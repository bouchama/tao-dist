{"version":3,"sources":["../../../taoTests/views/js/runner/plugin.js","css!taoQtiTestCss/plugins/key-navigation","../../../taoQtiTest/views/js/runner/plugins/content/accessibility/keyNavigation.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/dialog.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/exitMessages.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemAlertMessage.js","../../../taoQtiTest/views/js/runner/plugins/templates/button!tpl","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemInlineMessage.js","../../../taoQtiTest/views/js/runner/plugins/content/feedback/feedback.js","../../../taoQtiTest/views/js/runner/plugins/content/loading/loading.js","../../../taoQtiTest/views/js/runner/plugins/content/modalFeedback/modalFeedback.js","../../../taoQtiTest/views/js/runner/plugins/content/overlay/overlay.js","../../../taoQtiTest/views/js/runner/plugins/content/responsiveness/collapser.js","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock!tpl","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock.js","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity.js","../../../taoQtiTest/views/js/runner/plugins/controls/duration/duration.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progressbar!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progressbar.js","../../../taoQtiTest/views/js/runner/plugins/controls/testState/testState.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timer!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timerComponent.js","../../../taoQtiTest/views/js/runner/helpers/map.js","../../../taoQtiTest/views/js/runner/helpers/currentItem.js","../../../taoQtiTest/views/js/runner/helpers/stats.js","../../../taoQtiTest/views/js/runner/helpers/messages.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timers!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timer.js","../../../taoQtiTest/views/js/runner/plugins/controls/title/title!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/title/title.js","../../../taoQtiTest/views/js/runner/plugins/controls/trace/itemTraceVariables.js","../../../taoQtiTest/views/js/runner/plugins/navigation/allowSkipping.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next/nextWarningHelper.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next.js","../../../taoQtiTest/views/js/runner/plugins/navigation/nextSection.js","../../../taoQtiTest/views/js/runner/plugins/navigation/previous.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigatorTree!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/review.js","../../../taoQtiTest/views/js/runner/plugins/navigation/skip.js","../../../taoQtiTest/views/js/runner/plugins/navigation/validateResponses.js","../../../taoQtiTest/views/js/runner/plugins/navigation/warnBeforeLeaving.js","../../../taoQtiTest/views/js/runner/plugins/security/disableRightClick.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerElimination/eliminator.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/tpl/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/answerMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/areaMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/calculator.js","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment.js","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/panel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/documentViewer.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/highlighter.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/compoundMask.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifier.js","../../../taoQtiTest/views/js/runner/plugins/tools/zoom.js","../../../../../../../../onLayerEnd0.js"],"names":["define","_","pluginFactory","partialRight","hostName","$","keyNavigator","navigableDomElement","navigableGroupElement","shortcut","namespaceHelper","initToolbarNavigation","$navigationBar","$focusables","find","navigables","createFromDoms","length","id","replace","group","elements","defaultPosition","on","this","next","previous","cursor","navigable","getElement","click","mousedown","initHeaderNavigation","$headerElements","closest","loop","initNavigatorNavigation","testRunner","filtersNavigator","itemsNavigator","$filters","$trees","navigableFilters","navigableTrees","filterCursor","$panel","getAreaBroker","getPanelArea","$navigator","navigators","itemListingVisited","hasClass","keepState","defer","focus","first","last","origin","position","push","pos","data","forIn","i","$parent","parent","is","addClass","removeClass","initContentNavigation","itemNavigators","$content","getContentArea","filter","parents","each","$itemElement","union","initInteractionNavigation","propagateTab","$interaction","$inputs","interactionNavigables","interactionNavigators","$nav","off","initRubricNavigation","$itemElements","rubricNavigators","initTestRunnerNavigation","document","activeElement","blur","createFromNavigators","name","init","self","getTestRunner","add","groupNavigator","isFocused","disable","after","enable","destroy","remove","getName","__","dialogAlert","dialogConfirm","shortcutRegistry","globalShortcut","closeAccept","dialog","trigger","hide","closeReject","closeLast","accept","handle","opened","addHandle","namespace","stack","message","reject","doAccept","e","reason","isFunction","doReject","context","dialogShortcut","removeHandle","closeDialogs","forEach","alerts","confirms","testData","getTestData","testConfig","config","pluginShortcuts","shortcuts","propagate","prevent","set","allowShortcuts","command","key","namespaceAll","before","msg","actionPrefix","clear","Promise","install","isObject","resolve","getTestContext","itemIdentifier","disableItem","hider","$element","getContent","dom","modal","render","itemRunner","$modalsContainer","$container","_item","container","append","hb","template","Handlebars","depth0","helpers","partials","program1","stack1","helper","buffer","className","call","hash","functionType","escapeExpression","program3","icon","unless","text","inverse","noop","fn","program","program4","program6","compilerInfo","merge","control","title","buttonTpl","buttonData","end","$button","dataType","isLast","$btn","preventDefault","$navigationContainer","getNavigationArea","$inlineContainer","removeProp","prop","feedback","currentFeedback","closeCurrent","close","err","type","error","danger","warning","info","loadingBar","start","stop","module","inlineMessage","alertMessage","autoscroll","destroyFeedback","removed","renderedFeedbacks","storedFeedback","found","nextStep","defineMode","inline","inlineMode","messagePlugin","isDestroyed","inlineModalFeedback","createMessages","renderingQueue","bInlineMode","isBoolean","renderingToken","done","tFeedbacks","slice","stopImmediatePropagation","stopPropagation","shield","unshield","itemRef","pluginsConfig","plugins","overlayConfig","overlay","full","show","ns","defaults","collapseTools","collapseNavigation","collapseInOrder","hover","collaspeOrder","$window","window","buildCollapsiblesList","shouldCollapseInOrder","allCollapsibles","collapseOrder","map","selector","$elements","not","extraWidth","getExtraWidth","compact","$toolbox","$navigation","totalExtraWidth","reduce","total","collapsible","expandedWidth","collapsedWidth","collapseCls","outerWidth","toggleCollapsibles","availableWidth","getAvailableWidth","previousAvailableWidth","collapseAll","collapseNeeded","expandInOrder","expandAll","isArray","yes","toggleClass","toCollapse","collapsiblesCopy","clone","shift","getToolbarWidth","expandPossible","forEachRight","toExpand","$actionsBar","width","collapser","areaBroker","getArea","getToolboxArea","throttle","Infinity","containerTpl","blankifyLinks","attr","mathify","require","MathJax","Hub","Queue","rubrics","html","then","empty","options","helperMissing","state","connectivityTpl","proxy","getProxy","isOnline","source","getState","setState","isConnectivityError","purpose","code","reasons","category","subCategory","getControlArea","pollingFactory","timerFactory","store","initContext","initItemAttemptId","attempt","getConfig","serviceCallId","durationStore","getItemDuration","attemptId","test","getItem","Error","stopwatch","autoStart","initDuration","isNumber","attemptDuration","setItem","polling","action","elapsed","tick","itemAttemptId","duration","interval","params","itemDuration","addCallActionParams","getDuration","removeStore","catch","resume","pause","progressTpl","progressUpdater","testContext","testMap","progressConfig","percentage","Math","max","numberItems","ratio","floor","numberCompleted","label","getTestPart","parts","testPartId","getTestSection","testPart","sections","sectionId","progressScopeCounter","itemPosition","acc","section","size","items","testSection","positionInPart","positionInSection","counter","scope","currentPosition","showTotal","indicator","$progressLabel","$progressControl","progressIndicator","update","progressData","getTestMap","progressbar","use","req","res","isEmpty","messages","channel","isLeaving","running","moment","timeEncoder","timerTpl","hasAnimationFrame","timerTypes","item","isPlainObject","TypeError","contains","remaining","warnings","$display","refresh","encode","requestAnimationFrame","warn","findLast","showed","isFinite","point","humanize","val","value","getEmptyStats","questions","answered","flagged","viewed","getJumps","jumps","getParts","getJump","getPart","partName","getSection","sectionName","part","itemName","jump","identifier","getItemAt","getTestStats","stats","getPartStats","getSectionStats","getScopeStats","getScopeMap","scopeMap","cloneDeep","computeItemStats","computeStats","getItemPart","getItemSection","getItemIdentifier","callback","updateItemStats","informational","collection","responseCardinalities","single","multiple","ordered","record","currentItemHelper","getDeclarations","runner","responses","getResponseDeclaration","declaration","attributes","toResponse","baseType","cardinality","mappedCardinality","response","isString","v","base","isQtiValueNull","isQuestionAnswered","defaultValue","isEqual","isAnswered","partially","getResponses","count","mapHelper","getInstantStats","isItemCurrentlyAnswered","itemAnswered","statsHelper","getExitMessage","unansweredCount","flaggedCount","itemsCountMessage","enableUnansweredItemsWarning","toString","trim","timerComponentFactory","timerBoxTpl","exitMessage","isTimedSection","timeConstraints","some","constraint","qtiClassName","shouldClearStorage","doEnable","doDisable","toggleZenMode","$toggler","storage","removeItem","toggleToggler","timers","itemStates","timerWarning","displayedTimers","extraTime","consumedExtraTime","lastConsumedExtraTime","getRemainingExtraTime","extra","setRemainingTime","timerConfig","regular","getTimerConfig","timeConstraint","timer","closestPreviousWarning","isTimeout","itemSessionState","interacting","seconds","parseInt","leaveTimedSection","nbItems","closed","removeTimer","omit","addTimer","updateTimers","checkStorage","timerUpdatePromises","consumed","savedTime","all","timeStore","zenMode","timeoutScope","timeoutRef","elapsedExtraTime","timeout","regularVal","displayedVal","runTimeout","abs","movePromise","endTestWarning","noExitTimedSectionWarning","keepUpToTimeout","program2","titles","titleTpl","createElement","replaceWith","storeFactory","timestamp","Date","now","precision","onError","variables","tracesStore","ITEM_START_TIME_CLIENT","itemUri","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","format","callItemAction","traceData","JSON","stringify","enableAllowSkipping","allowSkipping","toBoolean","itemCanBeTriedAtWill","isLinear","remainingAttempts","isNextItemInLinearPart","nextPart","isLastOfPart","shouldWarnOnTestEnd","warnBeforeNext","shouldWarnForUnansweredItems","hasUnanswered","hasFlagged","unansweredOnly","shouldWarnOnPartChange","nextPartWarning","nextItemWarning","warnBeforeEnd","shouldWarnBeforeEnd","shouldWarnBeforeNext","nextWarningHelper","updateElement","doNext","testOptions","nextItemPosition","unansweredWarning","warningScope","warningHelper","partial","triggerNextAction","avoidInput","toggle","nextSection","nextSectionWarning","bind","doPrevious","previousItemWarning","canDoPrevious","canMoveBackward","program5","program7","program9","program11","program13","hidden","showLegend","active","program8","apply","program10","cls","index","component","navigatorTpl","navigatorTreeTpl","navigatorFactory","flagItem","$item","_cssCls","navigator","setItemFlag","navigatorApi","_defaults","setTemplate","controls","autoScroll","$component","$filterBar","_selectors","filterBar","$tree","tree","$infoAnswered","infoAnswered","$infoViewed","infoViewed","$infoAll","tabInfoAll","$infoUnanswered","infoUnanswered","tabInfoUnanswered","$infoFlagged","infoFlagged","tabInfoFlagged","$linearState","linearState","updateConfig","collapseHandle","collapsed","openSelected","infoPanelLabels","togglePanel","infoPanel","partLabels","openOnly","sectionLabels","itemLabels","event","$target","disabled","target","canFlag","icons","unseen","select","linearStart","mode","currentFilter","canCollapse","preventsUnseen","_iconCls","itemIcons","activeItem","counters","actives","collapsiblePanels","notFlagged","notAnswered","notInformational","_filterMap","unanswered","join","filtered","updateStats","flag","getProgressionTotal","progression","jquery","writeCount","criteria","$items","filterCb","$section","$itemsFound","$filtered","scopeClass","scopedMap","getScopedMap","totalQuestions","itm","$place","display","min","open","selected","hierarchy","parentsUntil","previousPosition","$previous","root","panel","collapseSelector","getFlagItemButtonData","itemFlagged","getToggleButtonData","updateButton","button","turnOff","turnOn","markReview","setFlag","unsetFlag","showReview","hideReview","isPluginAllowed","navigatorConfig","enabled","reviewScreen","callTestAction","flagItemButton","flagCurrentItem","forcedState","isUndefined","explicitlyHidden","toggleButton","previousItemPosition","review","getToolbox","createEntry","defaultOpen","skip","doSkip","enableValidateResponses","validateResponses","warnMessage","warnListener","returnValue","addEventListener","removeEventListener","eventName","defaultConfig","removeEliminationsOnClose","restoreEliminationsOnOpen","isPluginEnabled","eliminator","togglePluginButton","togglePlugin","$choiceInteractions","isEliminable","enableEliminator","disableEliminator","$choices","input","querySelector","dataset","wasEliminated","classList","setAttribute","checked","removeAttribute","statifier","componentFactory","maskTpl","$contentArea","createMask","maskApi","mask","answerMasking","allMasks","reveal","getContainer","removeAttr","$qtiChoices","$choice","getMasksState","setMasksState","masked","answerMaskingFactory","restoreStateOnToggle","restoreStateOnMove","itemContainsChoiceInteraction","disableMasking","enableMasking","itemId","pluginConfig","movableComponent","areaMaskingTpl","maskingComponentFactory","maskComponent","preview","delay","previewDelay","stackingScope","foo","addMask","masks","without","x","y","isEnabled","areaMasking","invoke","calculatorFactory","_default","height","top","left","calculator","buildCalculator","calcTpl","renderTo","$calculatorContainer","draggableContainer","alternativeTemplate","toggleCalculator","allowIn","stackerFactory","commentTpl","allowComment","toggleComment","$form","isHidden","$input","stacker","bringToFront","appendTo","$cancel","$submit","autoBringToFront","comment","content","viewerFactory","pdfViewer","panelTpl","showPanel","plugin","debounce","resizeViewer","hidePanel","hideIfVisible","isVisible","initPanelEvents","stopEvents","hideViewer","$overlay","viewer","setSize","registerProvider","displayViewer","$title","load","fitToWidth","allowSearch","originalEvent","detail","highlighterFactory","getAllRanges","allRanges","selection","rangeCount","getRangeAt","getSelection","isHighlighting","itemsHighlights","highlightHelper","containerSelector","isCollapsed","highlightRanges","removeAllRanges","toggleHighlighting","bool","saveHighlight","getHighlightIndex","restoreHighlight","highlightFromIndex","clearHighlights","highlighter","buttonMain","buttonRemove","themeHandler","changeTheme","themeId","$qtiItem","selectedTheme","themesConfig","get","availableThemes","defaultTheme","default","available","theme","menuButton","createMenu","themeEntry","setMenuId","turnOffAll","toggleMenu","eventifier","makePlaceable","makeDraggable","makeResizable","makeStackable","constrains","defaultDimensions","outerHeight","innerWidth","innerHeight","outerX","outerY","innerX","innerY","defaultOptions","dragMinWidth","dragMinHeight","resizeHandleSize","innerDragHeight","stackingOptions","dimensions","maskConfig","maskAPI","place","placeOverlay","styleResizableEdges","forOwn","edges","isResizable","edgeId","bringAllToFront","innerDrag","closer","invokeOnOverlays","invokeOnMasks","beforeResize","onResize","applyTransformsToOverlays","applyTransformsToInnerDrag","applyTransformsToCloser","createOverlay","transformOverlay","_sizeBackup","getSize","_posBackup","getPosition","moveTo","restoreOverlay","appendVisualGuides","visualGuides","$maskBg","$innerWindow","css","borderWidth","border-top-width","topHeight","border-right-width","rightWidth","border-bottom-width","bottomHeight","border-left-width","leftWidth","removeVisualGuides","xOffsetRelative","yOffsetRelative","invokeOnAll","applyTransforms","createInnerDragHandle","dragRestriction","fixedXY","allParts","nw","offset","minWidth","minHeight","minBottomHeight","$dragIcon","class","applyTransformsToMasks","createCloser","$closeIcon","args","invokeOn","correctTransforms","setTopHeight","newHeight","newY","fromTop","setRightWidth","newWidth","newX","fromLeft","setBottomHeight","setLeftWidth","createCompoundMask","createPart","right","bottom","maxHeight","maxWidth","partConfig","assign","createVisualGuides","compoundMask","setTransforms","dim","getDimensions","compoundMaskFactory","$qtiContent","lineHeight","ceil","parseFloat","maskOptions","paddingLeft","paddingTop","containerWidthHasChanged","lineReader","toggleMask","transformMask","openMask","closeMask","$maskContainer","level","magnifierPanelTpl","magnifierPanelFactory","scrollInClone","scrollData","$clonedTarget","$clone","scrollTop","scrollLeft","setScrollingListener","scrollingListenerCallback","removeScrollingListener","applyScrolling","scrolling","adjustZoomLevel","zoomLevelMin","zoomLevelMax","applyZoomLevel","$inner","transform","zoomLevel","showZoomLevel","$newZoomLevel","$zoomLevel","updateMaxSize","magnifierPanel","maxRatio","applySize","targetWidth","targetHeight","updateZoom","dx","dy","zoomAt","createObserver","observer","MutationObserver","updateMagnifier","startObserver","observe","childList","characterData","subtree","stopObserver","disconnect","translateMagnifier","coordinate","actualSize","magnifierSize","delta","getElementFromPoint","el","elementFromPoint","findSourceNode","node","$node","$root","indexes","$this","pop","children","eq","initConfig","levelMin","levelMax","zoomLevelStep","levelStep","baseSize","zoomSize","$initTarget","getZoomLevel","getTarget","setTarget","$newTarget","$viewTarget","zoomTo","zoomBy","step","zoomIn","zoomOut","translate","debounceDelay","scrollId","scrollingTop","uniqueId","scrollingDelay","screenRatio","pageX","pageY","screen","defaultBaseSize","pluginName","zoomMin","zoomMax","zoomStep","getMagnifierPanel","hideMagnifier","magnifier","toggleMagnifier","showMagnifier","transformer","standard","threshold","lower","upper","setZoomLevel","setTransformOrigin","scale","resetZoom","reset","forceRepaint","sel","style","offsetHeight","zoomAction","dir","sx","sy","inc","$zoomTarget","getBoundingClientRect","zoom","buttonZoomOut","buttonZoomIn","in","out","c","d","a","s","getElementsByTagName","cssText","createTextNode"],"mappings":"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","file":"testPlugins.min.js","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoTests/runner/plugin',['lodash', 'core/plugin'], function(_, pluginFactory){\n    'use strict';\n\n    /**\n     * A pluginFactory configured for the test runner\n     * @returns {Function} the preconfigured plugin factory\n     */\n    return _.partialRight(pluginFactory, {\n        //alias getHost to getTestRunner\n        hostName : 'testRunner'\n    });\n});\n\n","\ndefine('css!taoQtiTestCss/plugins/key-navigation',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Test Runner Content Plugin : Navigate through the item focusable elements using the keyboard\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/accessibility/keyNavigation',[\n    'jquery',\n    'lodash',\n    'ui/keyNavigation/navigator',\n    'ui/keyNavigation/navigableDomElement',\n    'ui/keyNavigation/navigableGroupElement',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'css!taoQtiTestCss/plugins/key-navigation'\n], function ($, _, keyNavigator, navigableDomElement, navigableGroupElement, shortcut, namespaceHelper, pluginFactory) {\n    'use strict';\n\n    /**\n     * Init the navigation in the toolbar\n     *\n     * @param {Object} testRunner\n     * @returns {Array}\n     */\n    function initToolbarNavigation(){\n        var $navigationBar = $('.bottom-action-bar');\n        var $focusables = $navigationBar.find('.action:not(.btn-group):visible, .action.btn-group .li-inner:visible');\n        var navigables = navigableDomElement.createFromDoms($focusables);\n        if (navigables.length) {\n            return [keyNavigator({\n                id : 'bottom-toolbar',\n                replace : true,\n                group : $navigationBar,\n                elements : navigables,\n                //start from the last button \"goto next\"\n                defaultPosition : navigables.length - 1\n            }).on('right down', function(){\n                this.next();\n            }).on('left up', function(){\n                this.previous();\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click().mousedown();\n            })];\n        }\n        return [];\n    }\n\n    /**\n     * Init the navigation in the header block\n     *\n     * @param {Object} testRunner\n     * @returns {Array}\n     */\n    function initHeaderNavigation(){\n        //need global selector as currently no way to access delivery frame from test runner\n        var $headerElements = $('[data-control=\"exit\"]:visible a');\n        var navigables = navigableDomElement.createFromDoms($headerElements);\n        if (navigables.length) {\n            return [keyNavigator({\n                id : 'header-toolbar',\n                group : $headerElements.closest('.infoControl'),\n                elements : navigables,\n                loop : true,\n                replace : true\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click();\n            })];\n        }\n        return [];\n    }\n\n    /**\n     * Init the navigation in the review panel\n     *\n     * @param {Object} testRunner\n     * @returns {Array} the keyNavigator of the main navigation group\n     */\n    function initNavigatorNavigation(testRunner){\n\n        var $panel = testRunner.getAreaBroker().getPanelArea();\n        var $navigator = $panel.find('.qti-navigator');\n        var navigators = [];\n        var filtersNavigator;\n        var itemsNavigator;\n        var $filters, $trees, navigableFilters, navigableTrees;\n\n        //the tag to identify if the item listing has been browsed, to only \"smart jump\" to active item only on the first visit\n        var itemListingVisited = false;\n        //the position of the filter in memory, to only \"smart jump\" to active item only on the first visit\n        var filterCursor;\n\n        if($navigator.length && !$navigator.hasClass('disabled')){\n            $filters = $navigator.find('.qti-navigator-filters .qti-navigator-filter');\n            navigableFilters = navigableDomElement.createFromDoms($filters);\n            if (navigableFilters.length) {\n                filtersNavigator = keyNavigator({\n                    keepState : true,\n                    id : 'navigator-filters',\n                    replace : true,\n                    elements : navigableFilters,\n                    group : $navigator\n                }).on('right', function(){\n                    this.next();\n                }).on('left', function(){\n                    this.previous();\n                }).on('down', function(){\n                    if(itemsNavigator){\n                        _.defer(function(){\n                            if(itemListingVisited){\n                                itemsNavigator.focus().first();\n                            }else{\n                                itemsNavigator.focus();\n                            }\n                        });\n                    }\n                }).on('up', function(){\n                    if(itemsNavigator){\n                        _.defer(function(){\n                            itemsNavigator.last();\n                        });\n                    }\n                }).on('focus', function(cursor, origin){\n                    //activate the tab in the navigators\n                    cursor.navigable.getElement().click();\n\n                    //reset the item listing browsed tag whenever the focus on the filter happens after a focus on another element\n                    if((filterCursor && filterCursor.position !== cursor.position) || origin){\n                        itemListingVisited = false;\n                    }\n                    //set the filter cursor in memory\n                    filterCursor = cursor;\n                });\n                navigators.push(filtersNavigator);\n            }\n\n            $trees = $navigator.find('.qti-navigator-tree .qti-navigator-item:not(.unseen) .qti-navigator-label');\n            navigableTrees = navigableDomElement.createFromDoms($trees);\n            if (navigableTrees.length) {\n                //instantiate a key navigator but do not add it to the returned list of navigators as this is not supposed to be reached with tab key\n                itemsNavigator = keyNavigator({\n                    id : 'navigator-items',\n                    replace : true,\n                    elements : navigableTrees,\n                    defaultPosition : function defaultPosition(navigables){\n                        var pos = 0;\n                        if(filterCursor && filterCursor.navigable.getElement().data('mode') !== 'flagged'){\n                            _.forIn(navigables, function(navigable, i){\n                                var $parent = navigable.getElement().parent('.qti-navigator-item');\n                                //find the first active and visible item\n                                if($parent.hasClass('active') && $parent.is(':visible')){\n                                    pos = i;\n                                    return false;\n                                }\n                            });\n                        }\n                        return pos;\n                    }\n                }).on('down', function(){\n                    this.next();\n                }).on('up', function(){\n                    this.previous();\n                }).on('right', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus().next();\n                    }\n                }).on('left', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus().previous();\n                    }\n                }).on('activate', function(cursor){\n                    cursor.navigable.getElement().click();\n                }).on('lowerbound upperbound', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus();\n                    }\n                }).on('focus', function(cursor){\n                    itemListingVisited = true;\n                    cursor.navigable.getElement().parent().addClass('key-navigation-highlight');\n                }).on('blur', function(cursor){\n                    cursor.navigable.getElement().parent().removeClass('key-navigation-highlight');\n                });\n            }\n\n        }\n        return navigators;\n    }\n\n    /**\n     * Init the navigation in the item content\n     * Navigable item content are interaction choices and body element with the special class \"key-navigation-focusable\"\n     * It returns an array of keyNavigators as the content is dynamically determined\n     *\n     * @param {Object} testRunner\n     * @returns {Array} of keyNavigator ids\n     */\n    function initContentNavigation(testRunner){\n\n        var itemNavigators = [];\n        var $content = testRunner.getAreaBroker().getContentArea();\n\n        //the item focusable body elements are considered scrollable\n        $content.find('.key-navigation-focusable').addClass('key-navigation-scrollable');\n        $content.find('.key-navigation-focusable,.qti-interaction').filter(function(){\n            //filter out interaction as it will be managed separately\n            return (!$(this).parents('.qti-interaction').length);\n        }).each(function(){\n            var $itemElement = $(this);\n            if($itemElement.hasClass('qti-interaction')){\n                itemNavigators = _.union(itemNavigators, initInteractionNavigation($itemElement));\n            }else{\n                itemNavigators.push(keyNavigator({\n                    elements : navigableDomElement.createFromDoms($itemElement),\n                    group : $itemElement,\n                    propagateTab : false\n                }));\n            }\n        });\n\n        return itemNavigators;\n    }\n\n    /**\n     * Init interaction key navigation from the interaction navigator\n     *\n     * @param {JQuery} $interaction - the interaction container\n     * @returns {Array} array of navigators created from interaction container\n     */\n    function initInteractionNavigation($interaction){\n\n        var $inputs;\n        var interactionNavigables;\n        var interactionNavigators = [];\n\n        //add navigable elements from prompt\n        $interaction.find('.key-navigation-focusable').each(function(){\n            var $nav = $(this);\n            if(!$nav.closest('.qti-choice').length){\n                interactionNavigators.push(keyNavigator({\n                    elements : navigableDomElement.createFromDoms($nav),\n                    group : $nav,\n                    propagateTab : false\n                }));\n            }\n        });\n\n        //reset interaction custom key navigation to override the behaviour with the new one\n        $interaction.off('.keyNavigation');\n\n        //search for inputs that represent the interaction focusable choices\n        $inputs = $interaction.is(':input') ? $interaction : $interaction.find(':input');\n        interactionNavigables = navigableDomElement.createFromDoms($inputs);\n\n        if (interactionNavigables.length) {\n            interactionNavigators.push(keyNavigator({\n                elements : interactionNavigables,\n                group : $interaction,\n                loop : false\n            }).on('right down', function(){\n                this.next();\n            }).on('left up', function(){\n                this.previous();\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click();\n            }).on('focus', function(cursor){\n                cursor.navigable.getElement().closest('.qti-choice').addClass('key-navigation-highlight');\n            }).on('blur', function(cursor){\n                cursor.navigable.getElement().closest('.qti-choice').removeClass('key-navigation-highlight');\n            }));\n        }\n\n        return interactionNavigators;\n    }\n\n    /**\n     * Init the navigation of test rubric blocks\n     * It returns an array of keyNavigator ids as the content is dynamically determined\n     *\n     * @param {Object} testRunner\n     * @returns {Array} of keyNavigator ids\n     */\n    function initRubricNavigation(){\n        var $itemElements;\n        var rubricNavigators = [];\n        var $rubricArea = $('#qti-rubrics');\n\n        $itemElements = $rubricArea.find('.qti-rubricBlock');\n        $itemElements.each(function(){\n            var $itemElement = $(this);\n            var id = 'rubric_element_navigation_group_'+rubricNavigators.length;\n\n            rubricNavigators.push(keyNavigator({\n                id : id,\n                elements : navigableDomElement.createFromDoms($itemElement),\n                group : $itemElement,\n                replace : true\n            }));\n        });\n\n        return rubricNavigators;\n    }\n\n    /**\n     * Init test runner navigation\n     * @param testRunner\n     * @returns {*}\n     */\n    function initTestRunnerNavigation(testRunner){\n\n        var navigators;\n\n        //blur current focused element, to reinitialize keyboard navigation\n        if (document.activeElement){\n            document.activeElement.blur();\n        }\n\n        navigators = _.union(\n            initRubricNavigation(testRunner),\n            initContentNavigation(testRunner),\n            initToolbarNavigation(testRunner),\n            initNavigatorNavigation(testRunner),\n            initHeaderNavigation(testRunner)\n        );\n\n        navigators = navigableGroupElement.createFromNavigators(navigators);\n\n        return keyNavigator({\n            id : 'test-runner',\n            replace : true,\n            loop : true,\n            elements : navigators,\n        }).on('tab', function(){\n            this.next();\n        }).on('shift+tab', function(){\n            this.previous();\n        });\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'keyNavigation',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            shortcut.add('tab shift+tab', function(){\n                if(!self.groupNavigator.isFocused()){\n                    self.groupNavigator.focus();\n                }\n            });\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .after('renderitem', function () {\n                    self.groupNavigator = initTestRunnerNavigation(testRunner);\n                    self.enable();\n                })\n                .on('unloaditem', function () {\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            if(this.groupNavigator) {\n                this.groupNavigator.destroy();\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Overlay\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/dialog',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/dialog/alert',\n    'ui/dialog/confirm',\n    'util/shortcut/registry',\n    'util/shortcut',\n    'util/namespace'\n], function ($, _, __, pluginFactory, dialogAlert, dialogConfirm, shortcutRegistry, globalShortcut, namespaceHelper){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'dialog';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var alerts = [];\n            var confirms = [];\n            var opened = [];\n            var dialogShortcut = shortcutRegistry($('body'), {\n                propagate: false,\n                prevent: true\n            });\n\n            /**\n             * Closes a dialog with accept\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function closeAccept(dialog) {\n                // TODO: improve the dialog implementation in order to provide a better API\n                dialog.trigger('okbtn.modal').hide();\n            }\n\n            /**\n             * Closes a dialog with rejection\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function closeReject(dialog) {\n                dialog.hide();\n            }\n\n            /**\n             * Closes the last opened dialog\n             * @param {Boolean} accept Whether the dialog should be accepted or not\n             * @param {String} [shortcut] The shortcut that caused the action\n             */\n            function closeLast(accept, shortcut) {\n                var handle = opened.length && opened[opened.length - 1];\n                if (handle) {\n                    handle.shortcut = shortcut;\n                    if (accept) {\n                        closeAccept(handle.dialog);\n                    } else {\n                        closeReject(handle.dialog);\n                    }\n                }\n            }\n\n            /**\n             * Add dialog on top of the provided stack\n             * @param {String} namespace - The event namespace that scope the dialog\n             * @param {Array} stack - The dialogs stack on which push the new instance\n             * @param {Function} dialog - The constructor of the dialog\n             * @param {String} message - The message to display\n             * @param {Function} accept - The callback for accept\n             * @param {Function} reject - The callback for reject\n             */\n            function addHandle(namespace, stack, dialog, message, accept, reject) {\n                var handle = {\n                    context: namespace,\n                    dialog: dialog(message, doAccept, doReject)\n                };\n\n                function doAccept(e, reason) {\n                    if (_.isFunction(accept)) {\n                        accept(handle.shortcut || reason);\n                    }\n                }\n                function doReject(e, reason) {\n                    if (_.isFunction(reject)) {\n                        reject(handle.shortcut || reason);\n                    }\n                }\n\n                // prevents all registered shortcuts to be triggered\n                // and brings back the dialog shortcuts\n                globalShortcut.disable();\n                dialogShortcut.enable();\n\n                stack.push(handle);\n                opened.push(handle);\n\n                handle.dialog.focus();\n                handle.dialog.on('closed.modal', function() {\n                    removeHandle(stack, handle.dialog);\n                    removeHandle(opened, handle.dialog);\n\n                    // if all dialogs have been closed allows all registered shortcuts to be triggered\n                    // also disables the dialog shortcuts\n                    if (!opened.length) {\n                        globalShortcut.enable();\n                        dialogShortcut.disable();\n                    }\n                });\n            }\n\n            /**\n             * Remove a dialog from the provided stack\n             * @param {Array} stack - The dialogs stack from which remove the dialog instance\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function removeHandle(stack, dialog) {\n                if (dialog) {\n                    _.remove(stack, function(handle) {\n                        if (handle && dialog === handle.dialog) {\n                            return true;\n                        }\n                    });\n                }\n            }\n\n            /**\n             * Closes all dialogs within the provided stack\n             * @param {String} namespace - The event namespace that scope the dialogs to close\n             * @param {Boolean} accept - Whether (`true`) or not (`false`) to close the dialogs with accept\n             * @param {Array} stack - The dialogs stack in which close the dialogs\n             */\n            function closeDialogs(namespace, accept, stack) {\n                if (stack) {\n                    _.forEach(stack, function(handle) {\n                        if (handle && (namespace === '@' || namespace === handle.context)) {\n                            if (accept) {\n                                closeAccept(handle.dialog);\n                            } else {\n                                closeReject(handle.dialog);\n                            }\n                        }\n                    });\n                } else {\n                    closeDialogs(namespace, accept, alerts);\n                    closeDialogs(namespace, accept, confirms);\n                }\n            }\n\n            // starts with shortcuts disabled, prevents the TAB key to be used to move outside the dialog box\n            dialogShortcut.disable().set('Tab Shift+Tab');\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function(command, key) {\n                    dialogShortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function(e, shortcut) {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key, shortcut);\n                    });\n                });\n            }\n\n            //change plugin state\n            testRunner\n                .before('alert.*', function(e, msg, accept) {\n                    addHandle(e.namespace, alerts, dialogAlert, msg, accept, accept);\n                })\n                .before('confirm.*', function(e, msg, accept, reject) {\n                    addHandle(e.namespace, confirms, dialogConfirm, msg, accept, reject);\n                })\n                .before('closedialog.*', function(e, accept) {\n                    closeDialogs(e.namespace, accept);\n                })\n                .on(actionPrefix + 'accept', function(shortcut) {\n                    closeLast(true, shortcut);\n                })\n                .on(actionPrefix + 'reject', function(shortcut) {\n                    closeLast(false, shortcut);\n                })\n                .on('destroy', function() {\n                    closeDialogs('.@');\n\n                    dialogShortcut.clear();\n                    dialogShortcut = null;\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/exitMessages',[\n    'lodash',\n    'core/promise',\n    'taoTests/runner/plugin'\n], function (_, Promise, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the testState plugin.\n     * Displays exit message, then leaves the runner once the user has acknowledged\n     */\n    return pluginFactory({\n\n        name: 'exitMessages',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            // this function is mandatory\n        },\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var testRunner = this.getTestRunner();\n\n            // intercepts the `leave` event,\n            // then if a message needs to be displayed displays it and waits the user acknowledges it\n            testRunner.before('leave', function leave(e, data) {\n                if (_.isObject(data) && data.message) {\n                    return new Promise(function(resolve) {\n                        var context = testRunner.getTestContext();\n\n                        // the leave can occurs when the runner is in inconsistent state (i.e. error)\n                        // prevent side error with item disabling\n                        if (context && context.itemIdentifier) {\n                            testRunner.disableItem(context.itemIdentifier);\n                        }\n\n                        // wait for the message acknowledge before leaving the runner\n                        testRunner.trigger('alert.leave', data.message, resolve);\n                    });\n                }\n            });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n\n/**\n * Create dialog form with message, with overlapped content\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin'\n], function($, __, hider, pluginFactory) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'itemAlertMessage',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            this.$element = $(this.getContent().dom);\n\n            this.$element\n                // for GUI actions\n                .on('closed.modal', function(){\n                    $(this).modal('destroy');\n                })\n                .on('destroyed.modal', function(){\n                    self.$element = null;\n                    self.trigger('resume', self);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var testRunner = this.getTestRunner();\n            var itemRunner = testRunner.itemRunner;\n            var $modalsContainer = this.getContent().$container;\n            if (!$modalsContainer) {\n                $modalsContainer = $('#modalFeedbacks', itemRunner._item.container);\n            }\n            $modalsContainer.append(this.$element);\n\n            this.$element.modal();\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            if (this.$element && this.$element.length){\n                this.$element.modal('close');\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/templates/button', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \" \";\n  if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\";\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  \n  return \" no-label\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"text\\\">\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\";\n  return buffer;\n  }\n\n  buffer += \"<li data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"small btn-info action\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" title=\\\"\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\">\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </a>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n/**\n * Create form with message in test runner and replace all control buttons on his personal\n */\n\ndefine('taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function($, __, hider, pluginFactory, buttonTpl) {\n    'use strict';\n\n    /**\n     * The display of the next button\n     */\n    var buttonData = {\n        next : {\n            control : 'move-forward',\n            title   : __('Submit and go to the next item'),\n            icon    : 'forward',\n            text    : __('OK')\n        },\n        end : {\n            control : 'move-end',\n            title   : __('Submit and go to the end of the test'),\n            icon    : 'fast-forward',\n            text    : __('OK & End test')\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'itemInlineMessage',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            /**\n             * Create the button based on the current context\n             * @returns {*|jQuery|HTMLElement} the button\n             */\n            var createOkButton = function createElement(){\n                var dataType = !!testRunner.getTestContext().isLast ? 'end' : 'next';\n                var $btn = $(buttonTpl(buttonData[dataType]));\n                $btn.addClass('modalFeedback-button');\n\n                //plugin behavior\n                $btn.on('click', function(e){\n                    e.preventDefault();\n\n                    self.disable();\n                    if($(this).data('control') === 'move-end'){\n                        self.trigger('end');\n                    }\n\n                    $btn.remove();\n                    self.$element.remove();\n\n                    self.trigger('resume', self);\n                });\n\n                return $btn;\n            };\n\n            this.$button = createOkButton();\n            this.$element = $(this.getContent().dom);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $navigationContainer = this.getAreaBroker().getNavigationArea();\n            var testRunner = this.getTestRunner();\n            var itemRunner = testRunner.itemRunner;\n            var $inlineContainer = this.getContent().$container;\n            if (!$inlineContainer && itemRunner._item.container) {\n                $inlineContainer = $('.qti-itemBody', itemRunner._item.container);\n            }\n\n            $inlineContainer.append(this.$element);\n\n            // hide all navigation buttons, create new instead of\n            if (!$('.modalFeedback-button', $navigationContainer).length){\n                $navigationContainer.append(this.$button);\n            }\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$button.removeProp('disabled')\n                .removeClass('disabled');\n        },\n\n        disable: function disable (){\n            this.$button.prop('disabled', true)\n                .addClass('disabled');\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$button.click();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Feedback\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/feedback/feedback',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/feedback'\n], function ($, __, pluginFactory, feedback){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'feedback',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            //keep a ref of the feedbacks\n            var currentFeedback;\n\n            var testRunner = this.getTestRunner();\n\n            /**\n             * Close the current feedback\n             */\n            var closeCurrent = function closeCurrent(){\n                if(currentFeedback){\n                    currentFeedback.close();\n                }\n            };\n\n            //change plugin state\n            testRunner\n                .on('error', function(err){\n                    var message = err;\n                    var type = 'error';\n\n                    if ('object' === typeof err) {\n                        message = err.message;\n                        type = err.type;\n                    }\n\n                    if (!message) {\n                        switch (type) {\n                            case 'TestState':\n                                message = __('The test has been closed/suspended!');\n                                break;\n\n                            case 'FileNotFound':\n                                message = __('File not found!');\n                                break;\n\n                            default:\n                                message = __('An error occurred!');\n                        }\n                    }\n\n                    currentFeedback = feedback().error(message);\n                })\n                .on('danger', function(message){\n                    currentFeedback = feedback().danger(message);\n                })\n                .on('warning', function(message){\n                    currentFeedback = feedback().warning(message);\n                })\n                .on('info', function(message){\n                    currentFeedback = feedback().info(message);\n                })\n                .on('alert.* confirm.* unloaditem', closeCurrent);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/loading/loading',[\n    'layout/loading-bar',\n    'taoTests/runner/plugin'\n], function (loadingBar, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the loading bar plugin.\n     * Displays a loading bar when a blocking task is running\n     */\n    return pluginFactory({\n\n        name: 'loading',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            testRunner\n                .on('unloaditem', function () {\n                    loadingBar.start();\n                })\n                .on('renderitem', function () {\n                    loadingBar.stop();\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n/**\n * @see http://www.imsglobal.org/question/qtiv2p1/imsqti_implv2p1.html#section10008 modalFeedback\n */\n\ndefine('taoQtiTest/runner/plugins/content/modalFeedback/modalFeedback',[\n    'jquery',\n    'lodash',\n    'module',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',\n    'taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',\n    'ui/autoscroll'\n], function ($, _, module, pluginFactory, inlineMessage, alertMessage, autoscroll) {\n    'use strict';\n\n    /**\n     * Modal or inline type of the messages\n     */\n    var inlineMode;\n\n    /**\n     * Form of the feedback\n     * by default dialog (modal) form\n     */\n    var messagePlugin;\n\n    /**\n     * All feedback messages\n     */\n    var renderedFeedbacks;\n\n    /**\n     * modalFeedback was resolved and all components were destroyed\n     */\n    var isDestroyed;\n\n    /**\n     * Method which should be halted after modalFeedbacks confirmation action\n     */\n    var nextStep;\n\n    function destroyFeedback(feedback) {\n\n        var removed = false;\n        _.remove(renderedFeedbacks, function (storedFeedback) {\n\n            var found = storedFeedback === feedback;\n            if (found) {\n                removed = true;\n            }\n            return found;\n        });\n\n        if (removed) {\n            feedback.destroy();\n\n            if (!renderedFeedbacks.length) {\n                nextStep();\n            }\n        }\n    }\n\n    function defineMode(inline) {\n        inlineMode = inline;\n        messagePlugin = inlineMode ? inlineMessage : alertMessage;\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'QtiModalFeedback',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            nextStep = function(){};\n\n            defineMode(!!module.config().inlineModalFeedback);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            var createMessages = function createMessages(renderingQueue, inline){\n\n                var bInlineMode = inlineMode;\n\n                isDestroyed = false;\n                renderedFeedbacks = [];\n\n                if (_.isBoolean(inline)) {\n                    defineMode(inline);\n                }\n\n                if (renderingQueue.length) {\n\n                    _.forEach(renderingQueue, function (renderingToken) {\n\n                        var feedback = messagePlugin(testRunner, testRunner.getAreaBroker());\n                        feedback.init({\n                            dom: renderingToken.feedback.render({\n                                inline: inlineMode\n                            }),\n                            // for alerts will be used #modalMessages container\n                            $container: inlineMode ? renderingToken.$container : null\n                        });\n                        feedback.render();\n\n                        renderedFeedbacks.push(feedback);\n                    });\n\n                    // auto scroll to the first feedback, only for the \"inline\" mode\n                    if (inlineMode && renderedFeedbacks) {\n                        autoscroll($('.qti-modalFeedback', testRunner.getAreaBroker().getContentArea()).first(), testRunner.getAreaBroker().getContentArea().parents('.content-wrapper'));\n                    }\n                } else {\n                    nextStep();\n                }\n\n                // restore global feedback mode\n                defineMode(bInlineMode);\n            };\n\n            if (inlineMode) {\n                testRunner\n                    .off('plugin-resume.itemInlineMessage')\n                    .on('plugin-resume.itemInlineMessage', function () {\n                        self.destroy();\n                    });\n            } else {\n                testRunner\n                    .off('plugin-resume.itemAlertMessage')\n                    .on('plugin-resume.itemAlertMessage', function (feedback) {\n                        destroyFeedback(feedback);\n                    });\n            }\n\n            testRunner.on('modalFeedbacks', function(renderingQueue, done, inline) {\n                nextStep = done;\n                createMessages(renderingQueue, inline);\n            });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         * allow to run that function only once\n         */\n        destroy: function destroy() {\n            var tFeedbacks, i;\n            if (!isDestroyed) {\n                isDestroyed = true;\n\n                if (!renderedFeedbacks) {\n                    nextStep();\n                } else {\n                    tFeedbacks = renderedFeedbacks.slice(0);\n                    for (i in tFeedbacks) {\n                        destroyFeedback(tFeedbacks[i]);\n                    }\n                }\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Overlay\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/overlay/overlay',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin'\n], function ($, __, pluginFactory){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'overlay',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.$element = $('<div />');\n            this.$element.on('click mousedown mouseup touchstart touchend keyup keydow keypress scroll drop', function(e){\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n            });\n\n            var shield = function shield(){\n                self.enable();\n            };\n            var unshield = function unshield(itemRef){\n                self.disable();\n            };\n\n            //change plugin state\n            testRunner\n                .on('disableitem',  shield)\n                .on('enableitem unloaditem', unshield);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render (){\n            var $contentArea = this.getTestRunner().getAreaBroker().getContentArea();\n            $contentArea.after(this.$element);\n        },\n\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the overlay\n         */\n        enable : function enable (){\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var overlayConfig = pluginsConfig.overlay || {};\n\n            this.$element.addClass('overlay');\n\n            if (overlayConfig.full) {\n                this.$element.addClass('overlay-full');\n            }\n        },\n\n        /**\n         * Disable the overlay\n         */\n        disable : function disable (){\n            this.$element.removeClass('overlay overlay-full');\n        },\n\n        /**\n         * Show the overlay\n         */\n        show: function show(){\n            this.enable();\n        },\n\n        /**\n         * Hide the overlay\n         */\n        hide: function hide(){\n            this.disable();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/responsiveness/collapser',[\n    'lodash',\n    'jquery',\n    'taoTests/runner/plugin'\n], function (_, $, pluginFactory) {\n    'use strict';\n\n    /**\n     * Event namespace\n     * @type {String}\n     */\n    var ns = '.collapser';\n\n    /**\n     * Name of the CSS class used to collapse the buttons\n     * @type {String}\n     */\n    var noLabelCls = 'tool-label-collapsed';\n\n    /**\n     * Name of the CSS class used to collapse the buttons and allow to expand on mouse over\n     * @type {String}\n     */\n    var noLabelHoverCls = 'tool-label-collapsed-hover';\n\n    /**\n     * Name of the  CSS class used to hide the label of the button independently of responsiveness\n     * @type {string}\n     */\n    var labelHiddenCls = 'no-tool-label';\n\n    /**\n     * Default plugin options\n     * @type {Object}\n     */\n    var defaults = {\n        collapseTools: true,        // collapse the tools buttons\n        collapseNavigation: false,  // collapse the navigation buttons\n        collapseInOrder: false,     // collapse any button in the given order\n        hover: false,               // expand when the mouse is over a button,\n\n        /**\n         * Allow to set manually which buttons should collapse and in which order.\n         * This can be set by triggering the \"collapser-set-order\" event on the testRunner.\n         * Given as an array of jQuery selectors: first index will be the first to be collapsed, and so on.\n         * If no selector is given for a button, then this one will never collapse.\n         * ex:\n         * var collapseOrder = [\n         *      '[data-control=\"highlight-clear\"],[data-control=\"highlight-trigger\"]',  // those will collapse first...\n         *      '[data-control=\"hide-review\"]',                                         // this one second...\n         *      '[data-control=\"set-item-flag\"]',                                       // third...\n         *      ...                                                                     // ...\n         * ];\n         * @type {String[]}\n         */\n        collaspeOrder: []\n    };\n\n    var $window = $(window);\n\n    /**\n     * Creates the responsiveness collapser plugin.\n     * Reduce the size of the action bar tools when the available space is below the needed one.\n     */\n    return pluginFactory({\n\n        name: 'collapser',\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginsConfig = testConfig.plugins || {},\n                config = _.defaults(pluginsConfig.collapser || {}, defaults),\n                collapseCls = config.hover ? noLabelHoverCls : noLabelCls;\n\n            var areaBroker = testRunner.getAreaBroker();\n\n            var $actionsBar = areaBroker.getArea('actionsBar'),\n                $toolbox = areaBroker.getToolboxArea(),\n                $navigation = areaBroker.getNavigationArea();\n\n            var allCollapsibles,\n                availableWidth,\n                previousAvailableWidth,\n                totalExtraWidth;\n\n            /**\n             * Get a reference of all collapsibles\n             */\n            function buildCollapsiblesList() {\n                // use the given order to build the collapsibles list\n                if (shouldCollapseInOrder()) {\n                    allCollapsibles = config.collapseOrder.map(function(selector) {\n                        var $elements = $(selector).not('.' + labelHiddenCls); // some buttons are collapsed by configuration: we should leave them alone\n                        var extraWidth = 0;\n\n                        if ($elements.length) {\n                            $elements.each(function() {\n                                extraWidth += getExtraWidth($(this));\n                            });\n                            return {\n                                $elements: $elements,\n                                extraWidth: extraWidth\n                            };\n                        }\n                        return false;\n                    });\n\n                    allCollapsibles = _.compact(allCollapsibles);\n\n                // collapsibles will be either tools and/or nav whole blocks depending on configuration\n                } else {\n                    allCollapsibles = [];\n                    if (config.collapseTools) {\n                        allCollapsibles.push({\n                            $elements: $toolbox,\n                            extraWidth: getExtraWidth($toolbox)\n                        });\n                    }\n                    if (config.collapseNavigation) {\n                        allCollapsibles.push({\n                            $elements: $navigation,\n                            extraWidth: getExtraWidth($navigation)\n                        });\n                    }\n\n                    totalExtraWidth = allCollapsibles.reduce(function(total, collapsible) {\n                        total += collapsible.extraWidth;\n                        return total;\n                    }, 0);\n                }\n            }\n\n            /**\n             * @param {jQuery} $element\n             * @returns {number} Size difference, in pixels, between collapsed and expanded state of $element\n             */\n            function getExtraWidth($element) {\n                var expandedWidth,\n                    collapsedWidth;\n\n                $element.removeClass(collapseCls);\n                expandedWidth = $element.outerWidth(true);\n                $element.addClass(collapseCls);\n                collapsedWidth = $element.outerWidth(true);\n                $element.removeClass(collapseCls);\n\n                return expandedWidth - collapsedWidth;\n            }\n\n            /**\n             * Expand or collapse elements\n             */\n            function toggleCollapsibles() {\n                availableWidth = getAvailableWidth();\n\n                if (availableWidth < previousAvailableWidth) {\n                    if (shouldCollapseInOrder()) {\n                        collapseInOrder();\n                    } else {\n                        collapseAll(collapseNeeded());\n                    }\n                } else {\n\n                    if (shouldCollapseInOrder()) {\n                        expandInOrder();\n                    } else {\n                        expandAll();\n                    }\n                }\n\n                previousAvailableWidth = availableWidth;\n            }\n\n            function shouldCollapseInOrder() {\n                return config.collapseInOrder && _.isArray(config.collapseOrder) && config.collapseOrder.length;\n            }\n\n            function collapseAll(yes) {\n                if (config.collapseTools) {\n                    $toolbox.toggleClass(collapseCls, yes);\n                }\n                if (config.collapseNavigation) {\n                    $navigation.toggleClass(collapseCls, yes);\n                }\n            }\n\n            function collapseInOrder() {\n                var collapsiblesCopy = _.clone(allCollapsibles),\n                    toCollapse;\n\n                while (collapseNeeded() && collapsiblesCopy.length) {\n                    toCollapse = collapsiblesCopy.shift();\n                    toCollapse.$elements.addClass(collapseCls);\n                }\n            }\n\n            function collapseNeeded() {\n                return getToolbarWidth() > getAvailableWidth();\n            }\n\n\n            function expandAll() {\n                if (expandPossible(totalExtraWidth)) {\n                    allCollapsibles.forEach(function(collapsible) {\n                        collapsible.$elements.removeClass(collapseCls);\n                    });\n                }\n            }\n\n            function expandInOrder() {\n                _.forEachRight(allCollapsibles, function(toExpand) {\n                    if (toExpand.$elements.hasClass(collapseCls)) {\n                        if (expandPossible(toExpand.extraWidth)) {\n                            toExpand.$elements.removeClass(collapseCls);\n                        } else {\n                            return false;\n                        }\n                    }\n                });\n            }\n\n            function expandPossible(extraWidth) {\n                return (getToolbarWidth() + extraWidth) <= getAvailableWidth();\n            }\n\n            function getAvailableWidth() {\n                return $actionsBar.width();\n            }\n\n            function getToolbarWidth() {\n                return $toolbox.outerWidth(true) + $navigation.outerWidth(true);\n            }\n\n\n\n            $window.on('resize' + ns, _.throttle(function() {\n                testRunner.trigger('collapseTools');\n            }, 100));\n\n            testRunner\n                .after('renderitem loaditem', function() {\n                    previousAvailableWidth = Infinity;\n\n                    buildCollapsiblesList();\n                    testRunner.trigger('collapseTools');\n                })\n                .on('collapseTools' + ns, function() {\n                    toggleCollapsibles();\n                });\n        },\n\n        destroy: function destroy() {\n            $window.off(ns);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div id=\\\"qti-rubrics\\\"></div>\\n\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : RubricBlock\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock',[\n    'jquery',\n    'i18n',\n    'core/promise',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock'\n], function ($, __, Promise, hider, pluginFactory, containerTpl){\n    'use strict';\n\n    /**\n     * Ensure the <a> links opens to blank pages\n     * @param {jQueryElement} $container - lookup scope\n     */\n    var blankifyLinks = function blankifyLinks($container){\n        $('a', $container).attr('target', '_blank');\n    };\n\n    /**\n     * Apply mathjax\n     */\n    var mathify = function mathify($container) {\n\n        return new Promise(function(resolve){\n            if($('math', $container).length > 0){\n                //load mathjax only if necessary\n                require(['mathJax'], function(MathJax){\n                    if(MathJax){\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $container[0]);\n                        MathJax.Hub.Queue(resolve);\n                    } else {\n                        resolve();\n                    }\n                }, resolve);\n            } else {\n                resolve();\n            }\n        });\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'rubricBlock',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.$element = $(containerTpl());\n\n            this.hide();\n\n            //change plugin state\n            testRunner\n                .on('ready', function(){\n                    self.hide();\n                })\n                .on('loaditem', function(){\n                    var context = testRunner.getTestContext();\n                    if(context.rubrics) {\n                        self.$element.html(context.rubrics);\n\n                        blankifyLinks(self.$element);\n                        mathify(self.$element).then(function(){\n                            // notify that the rubric blocks are loaded\n                            testRunner.trigger('rubricblock');\n                        });\n                    }\n                })\n                .on('renderitem', function(){\n                    self.show();\n                })\n                .on('unloaditem', function(){\n                    self.hide();\n                    self.$element.empty();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            //attach the element before the content area\n            var $container = this.getAreaBroker().getContentArea();\n            $container.before(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the container\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the container\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the container\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the container\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/connectivity/connectivity', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"connectivity-box \";\n  if (helper = helpers.state) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.state); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <span data-control=\\\"connectivity-connected\\\" class=\\\"qti-controls icon-connect\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Connected to server\", options) : helperMissing.call(depth0, \"__\", \"Connected to server\", options)))\n    + \"\\\"></span>\\n    <span data-control=\\\"connectivity-disconnected\\\" class=\\\"qti-controls icon-disconnect\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Disconnected from server\", options) : helperMissing.call(depth0, \"__\", \"Disconnected from server\", options)))\n    + \"\\\"></span>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/connectivity/connectivity',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/connectivity/connectivity'\n], function ($, __, pluginFactory, connectivityTpl) {\n    'use strict';\n\n    /**\n     * Creates the connectivity plugin.\n     * Detects connectivity issues\n     */\n    return pluginFactory({\n\n        name: 'connectivity',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            // this function is mandatory\n        },\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var proxy      = testRunner.getProxy();\n\n            //create the indicator\n            this.$element = $(connectivityTpl({\n                state: proxy.isOnline() ? 'connected' : 'disconnected'\n            }));\n\n            //the Proxy is the only one to know something about connectivity\n            proxy.on('disconnect', function disconnect(source) {\n                if (!testRunner.getState('disconnected')) {\n                    testRunner.setState('disconnected', true);\n                    testRunner.trigger('disconnect', source);\n                    self.$element.removeClass('connected').addClass('disconnected');\n                }\n            })\n            .on('reconnect', function reconnect() {\n                if (testRunner.getState('disconnected')) {\n                    testRunner.setState('disconnected', false);\n                    testRunner.trigger('reconnect');\n                    self.$element.removeClass('disconnected').addClass('connected');\n                }\n            });\n\n            testRunner.before('error', function(e, err) {\n\n                // detect and prevent connectivity errors\n                if (proxy.isConnectivityError(err)){\n                    return false;\n                }\n\n                //offline navigation error, we pause the test\n                if(err.source === 'navigator' && err.purpose === 'proxy' && err.code === 404){\n                    testRunner\n                        .trigger('disconnectpause')\n                        .trigger('pause', {\n                            reasons : {\n                                category : __('technical'),\n                                subCategory : __('network')\n                            },\n                            message : err.message\n                        });\n\n                    return false;\n                }\n            });\n        },\n\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Duration (record exact spent time duration)\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/duration/duration',[\n    'lodash',\n    'core/polling',\n    'core/timer',\n    'core/store',\n    'core/promise',\n    'taoTests/runner/plugin',\n], function (_, pollingFactory, timerFactory, store, Promise, pluginFactory) {\n    'use strict';\n\n    /**\n     * Time interval between duration capture in ms\n     * @type {Number}\n     */\n    var refresh = 1000;\n\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'duration',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self = this;\n            var testRunner   = this.getTestRunner();\n            var initContext  = testRunner.getTestContext();\n            var initItemAttemptId = initContext.itemIdentifier + '#' + initContext.attempt;\n\n            //where the duration of attempts are stored\n            return store('duration-' + testRunner.getConfig().serviceCallId).then(function(durationStore){\n\n                /**\n                 * Gets the duration of a particular item from the store\n                 * @param {String} attemptId - the attempt id to get the duration for\n                 * @returns {Promise}\n                 */\n                function getItemDuration(attemptId){\n                    if(!/^(.*)+#+\\d+$/.test(attemptId)){\n                        return Promise.reject(new Error('Is it really an attempt id, like \"itemid#attempt\"'));\n                    }\n\n                    return durationStore.getItem(attemptId);\n                }\n\n                //one stopwatch to count the time\n                self.stopwatch = timerFactory({\n                    autoStart : false\n                });\n\n                return durationStore.getItem(initItemAttemptId)\n                    .then(function(initDuration){\n                        initDuration = _.isNumber(initDuration) ? initDuration : 0;\n\n                        // if the current item attempt duration is empty in the client storage,\n                        // the test has probably been started in another browser or computer and a crash occurred,\n                        // so take the server provided duration to take care of elapsed time on the same attempt\n                        if (!initDuration && initContext.attemptDuration) {\n                            return durationStore.setItem(initItemAttemptId, initContext.attemptDuration || 0);\n                        }\n                    })\n                    .then(function(){\n                        //update the duration on a regular basis\n                        self.polling = pollingFactory({\n\n                            action : function updateDuration() {\n\n                                //how many time elapsed from the last tick ?\n                                var elapsed = self.stopwatch.tick();\n                                var context = testRunner.getTestContext();\n\n                                //store by attempt\n                                var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\n\n                                durationStore.getItem(itemAttemptId).then(function(duration){\n                                    duration = _.isNumber(duration) ? duration : 0;\n                                    elapsed  = _.isNumber(elapsed) && elapsed > 0 ? (elapsed / 1000) : 0;\n\n                                    //store the last duration\n                                    durationStore.setItem(itemAttemptId, duration + elapsed);\n                                });\n                            },\n                            interval : refresh,\n                            autoStart : false\n                        });\n\n                        //change plugin state\n                        testRunner\n\n                            .after('renderitem enableitem', function(){\n                                self.enable();\n                            })\n\n                            .before('move disableitem skip error', function(){\n                                if (self.getState('enabled')) {\n                                    self.disable();\n                                }\n                            })\n\n                            .before('move skip exit timeout', function(){\n                                var context = testRunner.getTestContext();\n                                var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\n                                return getItemDuration(itemAttemptId).then(function(duration) {\n                                    var params = {\n                                        itemDuration: 0\n                                    };\n                                    if(_.isNumber(duration) && duration > 0){\n                                        params.itemDuration = duration;\n                                    }\n\n                                    // the duration will be sent to the server with the next request,\n                                    // usually submitItem() or callItemAction()\n                                    testRunner.getProxy().addCallActionParams(params);\n                                });\n                            })\n\n                            /**\n                             * @event duration.get\n                             * @param {String} attemptId - the attempt id to get the duration for\n                             * @param {getDuration} getDuration - a receiver callback\n                             */\n                            .on('plugin-get.duration', function(e, attemptId, getDuration){\n                                if(_.isFunction(getDuration)){\n                                    getDuration(getItemDuration(attemptId));\n                                }\n                            })\n\n                            .before('finish', function(){\n                                return new Promise(function(resolve) {\n                                    durationStore.removeStore()\n                                        .then(resolve)\n                                        .catch(resolve);\n                                });\n                            });\n                    });\n            });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.polling.stop();\n            this.stopwatch.stop();\n        },\n\n        /**\n         * Enables the duration count\n         */\n        enable : function enable (){\n            this.polling.start();\n            this.stopwatch.resume();\n        },\n\n        /**\n         * Disables the duration count\n         */\n        disable : function disable (){\n            this.polling.stop();\n            this.stopwatch.pause();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/progressbar', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"progress-box\\\">\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar info\\\"></div>\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\n</div>\\n\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Progress Bar\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/progressbar/progressbar',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/progressbar',\n    'ui/progressbar'\n], function ($, _, __, pluginFactory, progressTpl){\n    'use strict';\n\n    /**\n     * Calculate progression based on the current context\n     *\n     * @param {Object} testContext - The current test context\n     * @param {Object} testMap - The items organization map\n     * @param {Object} progressConfig\n     * @param {String} progressConfig.indicator - to select the progression type\n     * @param {String} [progressConfig.scope] - to select the progression type\n     * @param {Bool} progressConfig.showTotal - display 'item x of y' (true) | 'item x'\n     * @returns {Object} the progression with a label and a ratio\n     */\n    var progressUpdater = function progressUpdater(testContext, testMap, progressConfig){\n\n\n        /**\n         * Provide progression calculation based on the type of indicator\n         */\n        var updater = {\n\n            /**\n            * Updates the progress bar displaying the percentage\n            * @param {Object} testContext The progression context\n            * @returns {{ratio: number, label: string}}\n            */\n            percentage : function percentage() {\n                var total = Math.max(1, testContext.numberItems);\n                var ratio = Math.floor(testContext.numberCompleted / total * 100);\n                return {\n                    ratio : ratio,\n                    label : ratio + '%'\n                };\n            },\n\n            /**\n            * Updates the progress bar displaying the position\n            * @param {Object} testContext The progression context\n            * @returns {{ratio: number, label: string}}\n            */\n            position : function position() {\n\n                //get the current test part in the map\n                var getTestPart = function getTestPart(){\n                    if(testMap && testMap.parts){\n                        return testMap.parts[testContext.testPartId];\n                    }\n                };\n\n                //get the current test section in the map\n                var getTestSection = function getTestSection(){\n                    var testPart = getTestPart();\n                    if(testPart && testPart.sections){\n                        return testPart.sections[testContext.sectionId];\n                    }\n                };\n\n                //provides you the methods to get total and position by scope\n                var progressScopeCounter = {\n                    test : {\n                        total : function(){\n                            return Math.max(1, testContext.numberItems);\n                        },\n                        position : function(){\n                            return testContext.itemPosition + 1;\n                        }\n                    },\n                    testPart : {\n                        total : function(){\n                            var testPart = getTestPart();\n                            if(testPart){\n                                return _.reduce(testMap.parts[testContext.testPartId].sections, function(acc, section){\n                                    return acc + _.size(section.items);\n                                }, 0);\n                            }\n                            return 0;\n                        },\n                        position : function(){\n                            var testSection = getTestSection();\n                            if(testSection){\n                                return testSection.items[testContext.itemIdentifier].positionInPart + 1;\n                            }\n                            return 0;\n                        }\n                    },\n                    testSection : {\n                        total : function(){\n                            var testSection = getTestSection();\n                            if(testSection){\n                                return _.size(testSection.items);\n                            }\n                            return 0;\n                        },\n                        position : function(){\n                            var testSection = getTestSection();\n                            if(testSection){\n                                return testSection.items[testContext.itemIdentifier].positionInSection + 1;\n                            }\n                            return 0;\n                        }\n                    }\n                };\n\n                var counter = progressScopeCounter[progressConfig.scope] || progressScopeCounter.test;\n                var total = counter.total();\n                var currentPosition = counter.position();\n\n                return {\n                    ratio : total > 0 ? Math.floor(currentPosition / total * 100) : 0,\n                    label : progressConfig.showTotal ?\n                        __('Item %d of %d', currentPosition, total) :\n                        __('Item %d', currentPosition)\n                };\n            }\n        };\n        return updater[progressConfig.indicator]();\n    };\n\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'progressBar',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var $progressLabel,\n                $progressControl;\n            var testRunner = this.getTestRunner();\n            var testData   = testRunner.getTestData();\n            var config     = testData.config.progressIndicator || {};\n\n            var progressConfig = {\n                indicator: config.type || 'percentage',\n                scope: config.scope || 'test',\n                showTotal: !!config.showTotal\n            };\n\n            /**\n             * Update the progress bar\n             */\n            var update = function update (){\n                var progressData = progressUpdater(testRunner.getTestContext(), testRunner.getTestMap(), progressConfig);\n                if(progressData && $progressLabel && $progressControl){\n                    $progressLabel.text(progressData.label);\n                    $progressControl.progressbar('value', progressData.ratio);\n                }\n            };\n\n            //create the progressbar\n            this.$element = $(progressTpl());\n\n            //store the controls\n            $progressLabel = $('[data-control=\"progress-label\"]', this.$element);\n            $progressControl = $('[data-control=\"progress-bar\"]', this.$element);\n\n            //and initialize the progress bar component\n            $progressControl.progressbar();\n\n            //let update the progression\n            update();\n\n            testRunner\n                .on('ready', update)\n                .on('loaditem', update);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/testState/testState',[\n    'lodash',\n    'taoTests/runner/plugin'\n], function (_, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the testState plugin.\n     * Handle particular states of the assessment test\n     */\n    return pluginFactory({\n\n        name: 'testState',\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var testRunner = this.getTestRunner();\n\n            // middleware invoked on every requests\n            testRunner.getProxy()\n                .use(function qtiFilter(req, res, next) {\n                    var data = res && res.data;\n\n                    // test has been closed/suspended => redirect to the index page after message acknowledge\n                    if (data && data.type && data.type === 'TestState') {\n                        // spread the world about the reason of the leave\n                        testRunner.setState('closedOrSuspended', true);\n\n                        if (!testRunner.getState('ready')) {\n                            // if we open an inconsistent test just leave\n                            // should happen if we refresh an auto paused test\n                            testRunner.trigger('destroy');\n                        } else if (_.isEmpty(data.messages) || !_.find(data.messages, {channel: 'teststate'})) {\n                            testRunner.trigger('leave', data);\n                        }\n                        // break the chain to avoid uncaught exception in promise...\n                        // this will lead to unresolved promise, but the browser will be redirected soon!\n                        return;\n                    }\n                    next();\n                });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            var isLeaving = false;\n\n            // immediate handling of proctor's actions\n            testRunner.getProxy()\n                .channel('teststate', function (data) {\n                    if (!isLeaving && data && ('close' === data.type || 'pause' === data.type) && !testRunner.getState('closedOrSuspended')) {\n                        isLeaving = true;\n\n                        testRunner.setState('closedOrSuspended', true);\n\n                        testRunner.trigger('leave', data);\n                    }\n                });\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/timer', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" disabled\";\n  }\n\n  buffer += \"<span class=\\\"qti-timer qti-timer__type-\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" qti-controls \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.running), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-control=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <span class=\\\"qti-timer_label truncate\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    <span class=\\\"qti-timer_time\\\"></span>\\n</span>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Component that controls the display of a timer (countdown/stopwatch like) into a QTI Test.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/timerComponent',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'moment',\n    'core/encoder/time',\n    'tpl!taoQtiTest/runner/plugins/controls/timer/timer'\n], function ($, _, __, moment, timeEncoder, timerTpl) {\n    'use strict';\n\n    var hasAnimationFrame = 'requestAnimationFrame' in window;\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * In a Qti context timers could be associated to those elements\n     */\n    var timerTypes = {\n        test:     'assessmentTest',\n        testPart: 'testPart',\n        section:  'assessmentSection',\n        item:     'assessmentItemRef'\n    };\n\n    /**\n     * Create a new timer component\n     * @param {Object} config - the timer config\n     * @param {String} config.id - used to identified the timer\n     * @param {String} config.type - the associated type (from timerTypes above)\n     * @param {String} [config.label] - the label to display next to the timer\n     * @param {Number} [config.remaining = 0] - the remaining time\n     * @param {Number|Boolean} [config.warning = false] - to warn the user their is only the specified amount of time left\n     * @param {Boolean} [config.running = true] - timer state\n     * @returns {timerComponent} the timer component\n     * @throws {TypeError} if the config is not correct\n     */\n    var timerComponentFactory = function timerComponentFactory(config){\n        var data;\n\n        if(!_.isPlainObject(config)){\n            throw new TypeError('A timer needs to be configured using a config object');\n        }\n        if(_.isEmpty(config.id)){\n            throw new TypeError('A timer needs and identifier');\n        }\n        if(!_.contains(timerTypes, config.type)){\n            throw new TypeError('Invalid type configured');\n        }\n\n        data = _.defaults(config, {\n            label:     '',\n            remaining: 0,\n            warnings: {},\n            running:   true\n        });\n\n        /**\n         * @typedef {timerComponent} the component to manage the timer\n         */\n        return {\n\n            /**\n             * Initialize the component\n             * @returns {timerComponent} chains\n             */\n            init   : function init(){\n               this.$element = $(timerTpl(data));\n               this.$display = $('.qti-timer_time', this.$element);\n               return this;\n            },\n\n            /**\n             * Attach the component to the DOM\n             * @param {jQueryElement} $container - where to append the component\n             * @returns {timerComponent} chains\n             */\n            render : function render($container){\n                $container.append(this.$element);\n                return this;\n            },\n\n            /**\n             * Destroy the component\n             * @returns {timerComponent} chains\n             */\n            destroy : function destroy(){\n                this.$element.remove();\n                return this;\n            },\n\n            /**\n             * Refresh the display\n             * @returns {timerComponent} chains\n             */\n            refresh : function refresh(){\n                var self = this;\n                var update = function update(){\n                    self.$display.text( timeEncoder.encode( data.remaining / precision) );\n                };\n                if(hasAnimationFrame){\n                   window.requestAnimationFrame(update);\n                } else {\n                    update();\n                }\n\n                return this;\n            },\n\n            /**\n             * Warn about time remaining\n             * @returns {Object} the warning message and type of popup\n             */\n            warn : function warn() {\n                var remaining,\n                    message = {},\n                    warning = _.findLast(data.warnings, { showed: false });\n\n                if (!_.isEmpty(warning)\n                    && _.isFinite(warning.point)\n                    && data.remaining <= warning.point\n                ) {\n                    remaining = moment.duration(data.remaining / precision, \"seconds\").humanize();\n                    this.$display.removeClass('txt-info txt-warning txt-danger').addClass('txt-' + warning.type);\n                    switch (data.type) {\n                        case 'assessmentItemRef':\n                            message.text = __(\"Warning – You have %s remaining to complete this item.\", remaining);\n                            break;\n\n                        case 'assessmentSection':\n                            message.text = __(\"Warning – You have %s remaining to complete this section.\", remaining);\n                            break;\n\n                        case 'testPart':\n                            message.text = __(\"Warning – You have %s remaining to complete this test part.\", remaining);\n                            break;\n\n                        case 'assessmentTest':\n                            message.text = __(\"Warning – You have %s remaining to complete the test.\", remaining);\n                            break;\n                    }\n\n                    var showed = _.find(data.warnings, { point: warning.point });\n                    if (showed && showed.point && data.warnings[showed.point / precision]) {\n                        data.warnings[showed.point / precision].showed = true;\n                    }\n\n                    message.type = warning.type;\n                }\n\n                return message;\n            },\n\n\n            /**\n             * Get the timer id\n             * @returns {String} the id\n             */\n            id  : function id(){\n                return data.id;\n            },\n\n            /**\n             * Get/set the current/remaining value\n             * @param {Number} [value] - only as a setter\n             * @returns {Number|timerComponent} the value as a getter, or chains as a setter\n             */\n            val : function val(value){\n                if(typeof value !== 'undefined'){\n                    data.remaining = value;\n                    return this;\n                }\n                return data.remaining;\n            },\n\n            /**\n             * Get/set the running state\n             * @param {Boolean} [value] - only as a setter\n             * @returns {Boolean|timerComponent} the value as a getter, or chains as a setter\n             */\n            running : function running(value){\n                if(typeof value !== 'undefined'){\n                    data.running = !!value;\n                    return this;\n                }\n                return !!data.running;\n            }\n        };\n    };\n\n    return timerComponentFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/map',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * Gets an empty stats record\n     * @returns {Object}\n     */\n    function getEmptyStats() {\n        return {\n            questions: 0,\n            answered: 0,\n            flagged: 0,\n            viewed: 0,\n            total: 0\n        };\n    }\n\n    /**\n     * Defines a helper that provides extractors for an assessment test map\n     */\n    return {\n        /**\n         * Gets the jumps table\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getJumps: function getJumps(map) {\n            return map && map.jumps;\n        },\n\n        /**\n         * Gets the parts table\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getParts: function getParts(map) {\n            return map && map.parts;\n        },\n\n        /**\n         * Gets the jump at a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getJump: function getJump(map, position) {\n            var jumps = this.getJumps(map);\n            return jumps && jumps[position];\n        },\n\n        /**\n         * Gets a test part by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} partName - The identifier of the test part\n         * @returns {Object}\n         */\n        getPart: function getPart(map, partName) {\n            var parts = this.getParts(map);\n            return parts && parts[partName];\n        },\n\n        /**\n         * Gets a test section by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionName - The identifier of the test section\n         * @returns {Object}\n         */\n        getSection: function getSection(map, sectionName) {\n            var parts = this.getParts(map);\n            var section = null;\n            _.forEach(parts, function (part) {\n                var sections = part.sections;\n                if (sections && sections[sectionName]) {\n                    section = sections[sectionName];\n                    return false;\n                }\n            });\n            return section;\n        },\n\n        /**\n         * Gets a test item by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} itemName - The identifier of the test item\n         * @returns {Object}\n         */\n        getItem: function getItem(map, itemName) {\n            var jump = _.find(this.getJumps(map), {identifier: itemName});\n            return this.getItemAt(map, jump && jump.position);\n        },\n\n        /**\n         * Gets the global stats of the assessment test\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getTestStats: function getTestStats(map) {\n            return map && map.stats;\n        },\n\n        /**\n         * Gets the stats of the test part containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {String} partName - The identifier of the test part\n         * @returns {Object}\n         */\n        getPartStats: function getPartStats(map, partName) {\n            var part = this.getPart(map, partName);\n            return part && part.stats;\n        },\n\n        /**\n         * Gets the stats of the test section containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionName - The identifier of the test section\n         * @returns {Object}\n         */\n        getSectionStats: function getSectionStats(map, sectionName) {\n            var section = this.getSection(map, sectionName);\n            return section && section.stats;\n        },\n\n        /**\n         * Gets the stats related to a particular scope\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The current position\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {Object}\n         */\n        getScopeStats: function getScopeStats(map, position, scope) {\n            var jump = this.getJump(map, position);\n\n            switch (scope) {\n                case 'section':\n                case 'testSection':\n                    return this.getSectionStats(map, jump && jump.section);\n\n                case 'part':\n                case 'testPart':\n                    return this.getPartStats(map, jump && jump.part);\n\n                default:\n                case 'test':\n                    return this.getTestStats(map);\n            }\n        },\n\n        /**\n         * Gets the map of a particular scope from a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The current position\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {object} The scoped map\n         */\n        getScopeMap: function getScopeMap(map, position, scope) {\n            // need a clone of the map as we will change some properties\n            var scopeMap = _.cloneDeep(map || {});\n\n            // gets the current part and section\n            var jump = this.getJump(map, position);\n            var part = this.getPart(scopeMap, jump && jump.part);\n            var section = this.getSection(scopeMap, jump && jump.section);\n\n            // reduce the map to the scope part\n            if (scope && scope !== 'test') {\n                scopeMap.parts = {};\n                if (part) {\n                    scopeMap.parts[jump.part] = part;\n                }\n            }\n\n            // reduce the map to the scope section\n            if (part && (scope === 'section' || scope === 'testSection')) {\n                part.sections = {};\n                if (section) {\n                    part.sections[jump.section] = section;\n                }\n            }\n\n            // update the stats to reflect the scope\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            scopeMap.stats = this.computeStats(scopeMap.parts);\n\n            return scopeMap;\n        },\n\n        /**\n         * Gets the test part containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemPart: function getItemPart(map, position) {\n            var jump = this.getJump(map, position);\n            return this.getPart(map, jump && jump.part);\n        },\n\n        /**\n         * Gets the test section containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemSection: function getItemSection(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            return sections && sections[jump && jump.section];\n        },\n\n        /**\n         * Gets the item located at a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemAt: function getItemAt(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            var section = sections && sections[jump && jump.section];\n            var items = section && section.items;\n            return items && items[jump && jump.identifier];\n        },\n\n        /**\n         * Gets the identifier of an existing item\n         * @param {Object} map - The assessment test map\n         * @param {Number|String} position - The position of the item, can already be the identifier\n         * @returns {String}\n         */\n        getItemIdentifier: function getItemIdentifier(map, position) {\n            var item;\n            if (_.isFinite(position)) {\n                item = this.getItemAt(map, position);\n            } else {\n                item = this.getItem(map, position);\n            }\n            return item && item.id;\n        },\n\n        /**\n         * Applies a callback on each item of the provided map\n         * @param {Object} map - The assessment test map\n         * @param {Function} callback(item, section, part, map) - A callback to apply on each item\n         * @returns {Object}\n         */\n        each: function each(map, callback) {\n            if (_.isFunction(callback)) {\n                _.forEach(map && map.parts, function(part) {\n                    _.forEach(part && part.sections, function(section) {\n                        _.forEach(section && section.items, function(item) {\n                            callback(item, section, part, map);\n                        });\n                    });\n                });\n            }\n            return map;\n        },\n\n        /**\n         * Update the map stats from a particular item\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        updateItemStats: function updateItemStats(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            var section = sections && sections[jump && jump.section];\n\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            if (map) {\n                map.stats = this.computeStats(map.parts);\n            }\n\n            return map;\n        },\n\n        /**\n         * Computes the stats for a list of items\n         * @param {Object} items\n         * @returns {Object}\n         */\n        computeItemStats: function computeItemStats(items) {\n            return _.reduce(items, function accStats(acc, item) {\n                if (!item.informational) {\n                    acc.questions++;\n                }\n                if (item.answered) {\n                    acc.answered++;\n                }\n                if (item.flagged) {\n                    acc.flagged++;\n                }\n                if (item.viewed) {\n                    acc.viewed++;\n                }\n                acc.total++;\n                return acc;\n            }, getEmptyStats());\n        },\n\n        /**\n         * Computes the global stats of a collection of stats\n         * @param {Object} collection\n         * @returns {Object}\n         */\n        computeStats: function computeStats(collection) {\n            return _.reduce(collection, function accStats(acc, item) {\n                acc.questions += item.stats.questions;\n                acc.answered += item.stats.answered;\n                acc.flagged += item.stats.flagged;\n                acc.viewed += item.stats.viewed;\n                acc.total += item.stats.total;\n                return acc;\n            }, getEmptyStats());\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides information about the current item\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/currentItem',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * List of QTI model cardinalities\n     * @type {Object}\n     */\n    var responseCardinalities = {\n        single: 'base',\n        multiple: 'list',\n        ordered: 'list',\n        record: 'record'\n    };\n\n    /**\n     * @typedef {currentItemHelper}\n     */\n    var currentItemHelper = {\n        /**\n         * Gets the responses declarations of the current item.\n         * @param {Object} runner - testRunner instance\n         * @returns {Object}\n         */\n        getDeclarations: function getDeclarations(runner) {\n            var itemRunner = runner.itemRunner;\n            return itemRunner._item && itemRunner._item.responses;\n        },\n\n        /**\n         * Gets a response declaration by the identifier of the response\n         * @param {Object} runner - testRunner instance\n         * @param {String} identifier - The identifier of the response\n         * @returns {Object|null}\n         */\n        getResponseDeclaration: function getResponseDeclaration(runner, identifier) {\n            var found = null;\n            _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n                var attributes = declaration.attributes || {};\n                if (attributes.identifier === identifier) {\n                    found = declaration;\n                    return false;\n                }\n            });\n            return found;\n        },\n\n        /**\n         * Convert a value to a response object\n         * @param {Array|String} value\n         * @param {String} baseType\n         * @param {String} cardinality\n         * @returns {Object}\n         */\n        toResponse: function toResponse(value, baseType, cardinality) {\n            var mappedCardinality = responseCardinalities[cardinality];\n            var response = {};\n\n            if (_.isString(value)) {\n                value = [value];\n            }\n\n            value = _.map(value || [], function (v) {\n                return (baseType === 'boolean') ? (v === true || v === 'true') : v;\n            });\n\n            if (mappedCardinality) {\n                if (mappedCardinality === 'base') {\n                    if (value.length === 0) {\n                        //return empty response:\n                        response.base = null;\n                    } else {\n                        response.base = {};\n                        response.base[baseType] = value[0];\n                    }\n                } else {\n                    response[mappedCardinality] = {};\n                    response[mappedCardinality][baseType] = value;\n                }\n            }\n\n            return response;\n        },\n\n        /**\n         * Checks if the provided value can be considered as null\n         * @param {Object} value\n         * @param {String} baseType\n         * @param {String} cardinality\n         * @returns {boolean}\n         */\n        isQtiValueNull: function isQtiValueNull(value, baseType, cardinality) {\n            var mappedCardinality = responseCardinalities[cardinality];\n            if (_.isObject(value) && value[mappedCardinality] && 'undefined' !== typeof value[mappedCardinality][baseType]) {\n                value = value[mappedCardinality][baseType];\n            }\n            return null === value || ('string' === baseType && _.isEmpty(value)) || (cardinality !== 'single' && _.isEmpty(value));\n        },\n\n        /**\n         * Tells if an item question has been answered or not\n         * @param response\n         * @param baseType\n         * @param cardinality\n         * @param [defaultValue]\n         * @returns {*}\n         */\n        isQuestionAnswered: function isQuestionAnswered(response, baseType, cardinality, defaultValue) {\n            var answered;\n            defaultValue = defaultValue || null;\n            if (currentItemHelper.isQtiValueNull(response, baseType, cardinality)) {\n                answered = !currentItemHelper.isQtiValueNull(defaultValue, baseType, cardinality);\n            } else {\n                answered = !_.isEqual(response, currentItemHelper.toResponse(defaultValue, baseType, cardinality));\n            }\n            return answered;\n        },\n\n        /**\n         * Tells is the current item has been answered or not\n         * The item is considered answered when at least one response has been set to not empty {base : null}\n         * @param {Object} runner - testRunner instance\n         * @param {Boolean} [partially = true] - if false all questions must have been answered\n         * @returns {Boolean}\n         */\n        isAnswered: function isAnswered(runner, partially) {\n            var itemRunner = runner.itemRunner;\n            var responses = itemRunner && itemRunner.getResponses();\n            var count = 0;\n            var empty = 0;\n\n            if (itemRunner) {\n                _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n                    var attributes = declaration.attributes || {};\n                    var response = responses[attributes.identifier];\n                    var baseType = attributes.baseType;\n                    var cardinality = attributes.cardinality;\n\n                    count++;\n                    if (!currentItemHelper.isQuestionAnswered(response, baseType, cardinality, declaration.defaultValue)) {\n                        empty++;\n                    }\n                });\n            }\n            if( partially === false ){\n                return count > 0 && empty === 0;\n            }\n            return count > 0 && empty < count;\n        }\n    };\n\n    return currentItemHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides more statistics about the test\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/stats',[\n    'lodash',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/currentItem'\n], function (_, mapHelper, currentItemHelper) {\n    'use strict';\n\n    /**\n     * Return scope stats that takes into account any test taker interaction made since the item has been loaded\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @returns {Object}\n     */\n    function getInstantStats(scope, runner) {\n        var map = runner.getTestMap(),\n            context = runner.getTestContext(),\n            stats = _.clone(mapHelper.getScopeStats(map, context.itemPosition, scope)),\n\n            isItemCurrentlyAnswered = currentItemHelper.isAnswered(runner);\n\n        if (isItemCurrentlyAnswered){\n            if (!isItemCurrentlyAnswered && context.itemAnswered) {\n                stats.answered--;\n            }\n\n            if (isItemCurrentlyAnswered && !context.itemAnswered) {\n                stats.answered++;\n            }\n        }\n        return stats;\n    }\n\n    return {\n        getInstantStats: getInstantStats\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/messages',[\n    'i18n',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/stats'\n], function (__, mapHelper, statsHelper) {\n    'use strict';\n\n    /**\n     * Completes an exit message\n     * @param {String} message - custom message that will be appended to the unanswered stats count\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @returns {String} Returns the message text\n     */\n    function getExitMessage(message, scope, runner) {\n        var stats = statsHelper.getInstantStats(scope, runner),\n            unansweredCount = stats && (stats.questions - stats.answered),\n            flaggedCount = stats && stats.flagged,\n            itemsCountMessage = '';\n\n        var testData = runner.getTestData(),\n            testConfig = testData && testData.config,\n            messageEnabled = testConfig ? testConfig.enableUnansweredItemsWarning : true;\n\n        if (messageEnabled) {\n            if (flaggedCount && unansweredCount) {\n                itemsCountMessage = __('You have %s unanswered question(s) and have %s item(s) marked for review.',\n                    unansweredCount.toString(),\n                    flaggedCount.toString()\n                );\n\n            } else if (flaggedCount) {\n                itemsCountMessage = __('You have %s item(s) marked for review.', flaggedCount.toString());\n\n            } else if (unansweredCount) {\n                itemsCountMessage = __('You have %s unanswered question(s).', unansweredCount.toString());\n            }\n        }\n        return (itemsCountMessage + ' ' + message).trim();\n    }\n\n    return {\n        getExitMessage: getExitMessage\n    };\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/timers', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"timer-box\\\">\\n    <a href=\\\"#\\\" class=\\\"timer-toggler hidden\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Hide timers\", options) : helperMissing.call(depth0, \"__\", \"Hide timers\", options)))\n    + \"\\\"><span class=\\\"icon-clock\\\"></span></a>\\n    <div class=\\\"timer-wrapper\\\"></div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Timer\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/timer',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/promise',\n    'core/polling',\n    'core/timer',\n    'core/store',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/controls/timer/timerComponent',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/controls/timer/timers'\n], function($, _, __, Promise, pollingFactory, timerFactory, store, hider, pluginFactory, timerComponentFactory, messages, timerBoxTpl) {\n    'use strict';\n\n    /**\n     * Time interval between timer refreshes, in milliseconds\n     * @type {Number}\n     */\n    var timerRefresh = 1000;\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * The message to display when exiting\n     */\n    var exitMessage = __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?');\n\n\n    var timerTypes = {\n        test: 'assessmentTest',\n        testPart: 'testPart',\n        section: 'assessmentSection',\n        item: 'assessmentItemRef'\n    };\n\n    /**\n     * Are we in a timed section\n     * @param {Object} context - the current test context\n     * @returns {Boolean}\n     */\n    var isTimedSection = function isTimedSection(context) {\n        var timeConstraints = context.timeConstraints || [];\n        return _.some(timeConstraints, function(constraint) {\n            return constraint.qtiClassName === 'assessmentSection';\n        });\n    };\n\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'timer',\n\n        /**\n         * Installation of the plugin (called before init)\n         */\n        install: function install() {\n            var self = this;\n            //the storechange event is fired early (before runner's init is done)\n            //so we attach the handler early\n            var testRunner = this.getTestRunner();\n            testRunner.on('storechange', function handleStoreChange() {\n                self.shouldClearStorage = true;\n            });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self         = this;\n            var testRunner   = this.getTestRunner();\n            var testData     = testRunner.getTestData() || {};\n            var itemStates   = testData.itemStates || {};\n            var timerWarning = testData.config && testData.config.timerWarning || {};\n\n            var displayedTimers = {};\n            var timers = {};\n\n            var extraTime = 0;\n            var consumedExtraTime = 0;\n            var lastConsumedExtraTime = 0;\n\n            /**\n             * Gets the remaining extra time, if any\n             * @returns {Number} the remaining extra time in milliseconds\n             */\n            var getRemainingExtraTime = function getRemainingExtraTime(extra) {\n                if (extra) {\n                    extraTime = extra;\n                }\n                return Math.max(0, extraTime - consumedExtraTime) * precision;\n            };\n\n            /**\n             * Sets correctly the remaining time on a timer config set\n             * @param {Object} timerConfig\n             * @param {Number} remaining\n             * @returns {Object}\n             */\n            var setRemainingTime = function setRemainingTime(timerConfig, remaining) {\n                // will display the timer with extra time, if any\n                timerConfig.remaining = remaining + getRemainingExtraTime(timerConfig.extra);\n\n                // keep track of the regular timer, without extra time\n                timerConfig.regular = remaining;\n\n                return timerConfig;\n            };\n\n            /**\n             * Load the configuration of a timer from the current context\n             * @param {String} type - the timer type/qtiClass\n             * @returns {Object} the timer config if there's one for the given type\n             */\n            var getTimerConfig = function getTimerConfig(type) {\n                var timeConstraint;\n                var timer;\n                var closestPreviousWarning;\n                var context = testRunner.getTestContext();\n\n                // get the config of each timer\n                if (!context.isTimeout && context.itemSessionState === itemStates.interacting) {\n                    timeConstraint = _.findLast(context.timeConstraints, {\n                        qtiClassName: type\n                    });\n                    if (timeConstraint) {\n                        timer = setRemainingTime({\n                            label: timeConstraint.label,\n                            extra: timeConstraint.extraTime,\n                            type: timeConstraint.qtiClassName,\n                            id: timeConstraint.source,\n                            running: true,\n                            warnings: {}\n                        }, timeConstraint.seconds * precision);\n\n                        _(timerWarning[timeConstraint.qtiClassName]).forEach(function(value, key) {\n                            if (_.contains(['info', 'warning', 'danger'], value)) {\n                                timer.warnings[key] = {\n                                    type: value,\n                                    showed: timer.remaining / precision <= key,\n                                    point: parseInt(key, 10) * precision\n                                };\n                            }\n                        });\n\n                        closestPreviousWarning = _.find(timer.warnings, {\n                            showed: true\n                        });\n                        if (!_.isEmpty(closestPreviousWarning) && closestPreviousWarning.point && timer.warnings[closestPreviousWarning.point / precision]) {\n                            timer.warnings[closestPreviousWarning.point / precision].showed = false;\n                        }\n                    }\n                }\n                return timer;\n            };\n\n            //TODO this kind of function is generic enough to be moved to a util/helper\n            var leaveTimedSection = function leaveTimedSection(type, scope, position) {\n                var context = testRunner.getTestContext();\n                var map = testRunner.getTestMap();\n\n                var section = map.parts[context.testPartId].sections[context.sectionId];\n                var nbItems = _.size(section.items);\n                var item = _.find(section.items, {\n                    position: context.itemPosition\n                });\n\n                if (!context.isTimeout && context.itemSessionState !== itemStates.closed && isTimedSection(context) && item) {\n\n                    return !!((type === 'next' && (scope === 'assessmentSection' || ((item.positionInSection + 1) === nbItems))) ||\n                        (type === 'previous' && item.positionInSection === 0) ||\n                        (type === 'jump' && position > 0 && (position < section.position || position >= section.position + nbItems)));\n\n                }\n                return false;\n            };\n\n            /**\n             * Remove a timer from the current ones\n             * @param {String} type - the timer type to remove\n             */\n            var removeTimer = function removeTimer(type) {\n                if (displayedTimers[type]) {\n                    self.storage.removeItem(displayedTimers[type].id());\n\n                    displayedTimers[type].destroy();\n                    displayedTimers = _.omit(displayedTimers, type);\n                    timers = _.omit(timers, type);\n\n                    /**\n                     * @event timerPlugin#removetimer\n                     * @param {String} type of timer (such as 'assessmentSection', 'testPart' etc.)\n                     */\n                    self.trigger('removetimer', type);\n                }\n            };\n\n            /**\n             * Add and initialize a timer of the given type\n             * @param {Object} config - the timer config\n             * @param {String} type - the timer type to remove\n             */\n            var addTimer = function addTimer(type, config) {\n                if (config) {\n                    // track the regular remaining timer, without the extra time\n                    timers[type] = config.regular;\n\n                    // creates the component that will display the final timer\n                    displayedTimers[type] = timerComponentFactory(config);\n                    displayedTimers[type]\n                        .init()\n                        .render(self.$element.find('.timer-wrapper'));\n\n                    /**\n                     * @event timerPlugin#addtimer\n                     * @param {String} type of timer (such as 'assessmentSection', 'testPart' etc.)\n                     * @param {Object} timer instance ('core/timer' timer factory).\n                     */\n                    self.trigger('addtimer', type, displayedTimers[type]);\n                }\n            };\n\n            /**\n             * Update the timers.\n             * It will remove, let, add or update the current timers based on the current context.\n             */\n            var updateTimers = function updateTimers(checkStorage) {\n                var timerUpdatePromises = [];\n                var context = testRunner.getTestContext();\n                if (context.extraTime) {\n                    extraTime = context.extraTime.total;\n                    consumedExtraTime = Math.max(consumedExtraTime, context.extraTime.consumed);\n                }\n\n                _.forEach(timerTypes, function(type) {\n                    timerUpdatePromises.push(\n                        new Promise(function(resolve) {\n                            var timerConfig = getTimerConfig(type);\n\n                            if (displayedTimers[type]) {\n                                if (!timerConfig) {\n                                    removeTimer(type);\n                                } else if (displayedTimers[type].id() !== timerConfig.id) {\n                                    removeTimer(type);\n                                    addTimer(type, timerConfig);\n                                } else {\n                                    setRemainingTime(timerConfig, timers[type]);\n                                    displayedTimers[type].val(timerConfig.remaining);\n                                }\n                                return resolve();\n                            } else if (timerConfig) {\n\n                                if (checkStorage) {\n                                    //check for the last value in the storage\n                                    self.storage.getItem(timerConfig.id).then(function(savedTime) {\n                                        if (_.isNumber(savedTime) && savedTime >= 0) {\n                                            setRemainingTime(timerConfig, savedTime);\n                                        }\n                                        addTimer(type, timerConfig);\n                                        return resolve();\n                                    }).catch(function() {\n                                        //add the timer even if the storage doesn't work\n                                        addTimer(type, timerConfig);\n                                        return resolve();\n                                    });\n                                } else {\n                                    addTimer(type, timerConfig);\n                                    return resolve();\n                                }\n                            } else {\n                                return resolve();\n                            }\n                        })\n                    );\n                });\n                return Promise\n                        .all(timerUpdatePromises)\n                        .then(function(data){\n                            toggleToggler();\n                            return data;\n                        });\n            };\n\n            /**\n             * Secured call to enable\n             */\n            function doEnable() {\n                if (!self.getState('enabled')) {\n                    self.enable();\n                }\n            }\n\n            /**\n             * Secured call to disable\n             */\n            function doDisable() {\n                if (self.getState('enabled')) {\n                    self.disable();\n                }\n            }\n\n            /**\n             * Show/hide the timers akka \"zen mode\"\n             */\n            function toggleZenMode() {\n                if(self.$element.hasClass('zen-mode')){\n                    self.$element.removeClass('zen-mode');\n                    self.$toggler.attr('title', __('Hide timers'));\n                    self.storage.removeItem('zen-mode');\n                } else {\n                    self.$element.addClass('zen-mode');\n                    self.$toggler.attr('title', __('Show timers'));\n                    self.storage.setItem('zen-mode', true);\n                }\n            }\n\n            /**\n             * Hide the toggler without timers,\n             * display it otherwise\n             */\n            function toggleToggler() {\n                if(self.$toggler.length){\n                    if(_.size(timers) > 0){\n                        hider.show(self.$toggler);\n                    } else {\n                        hider.hide(self.$toggler);\n                    }\n                }\n            }\n\n            return store('timer-' + testRunner.getConfig().serviceCallId)\n                .then(function(timeStore) {\n                    if (self.shouldClearStorage) {\n                        return timeStore.clear().then(function() {\n                            return timeStore;\n                        });\n                    }\n                    return Promise.resolve(timeStore);\n                }).then(function(timeStore) {\n\n                    //the timer's storage\n                    self.storage = timeStore;\n\n                    //the element that'll contain the timers\n                    self.$element = $(timerBoxTpl());\n\n                    //used to show/hide the timer\n                    self.$toggler =  self.$element.find('.timer-toggler');\n\n                    //restore the zen mode if set previously\n                    self.storage\n                        .getItem('zen-mode')\n                        .then(function(zenMode){\n                            if(zenMode  && !self.$element.hasClass('zen-mode')){\n                                toggleZenMode();\n                            }\n                        });\n\n                    self.$toggler.on('click', function(e){\n                        e.preventDefault();\n                        toggleZenMode();\n                    });\n\n\n                    //one stopwatch to count the time\n                    self.stopwatch = timerFactory({\n                        autoStart: false\n                    });\n\n                    //update the timers at regular intervals\n                    self.polling = pollingFactory({\n\n                        /**\n                         * The polling action consists in updating each timers,\n                         * checking timeout and warnings\n                         */\n                        action: function updateTime() {\n\n                            //how many time elapsed from the last tick ?\n                            var elapsed = self.stopwatch.tick();\n                            var elapsedExtraTime = 0;\n                            var timeout = false;\n                            var timeoutScope, timeoutRef;\n\n                            _.forEach(displayedTimers, function(timer, type) {\n                                var regularVal,\n                                    displayedVal,\n                                    warning;\n                                var runTimeout = function runTimeout() {\n                                    testRunner.timeout(timeoutScope, timeoutRef);\n                                };\n\n                                if (timer.running()) {\n                                    regularVal = timers[type] - elapsed;\n                                    displayedVal = timer.val() - elapsed;\n                                    timers[type] = Math.max(regularVal, 0);\n                                    timer\n                                        .val(Math.max(displayedVal, 0))\n                                        .refresh();\n\n                                    if (regularVal <= 0) {\n                                        // compute the actual consumed extra time for this period\n                                        elapsedExtraTime = Math.max(elapsedExtraTime, Math.abs(regularVal));\n                                    }\n\n                                    if (displayedVal <= 0) {\n                                        timer.running(false);\n                                        timeout = true;\n                                        timeoutRef = timer.id();\n                                        timeoutScope = type;\n\n                                        self.storage.setItem(timer.id(), 0)\n                                            .then(runTimeout)\n                                            .catch(runTimeout);\n\n                                    } else {\n                                        self.storage.setItem(timer.id(), timers[type]);\n                                        warning = timer.warn();\n                                        if (!_.isEmpty(warning)) {\n                                            testRunner.trigger(warning.type, warning.text);\n                                        }\n                                    }\n                                }\n                            });\n                            if (elapsedExtraTime) {\n                                consumedExtraTime += elapsedExtraTime / precision;\n                                lastConsumedExtraTime += elapsedExtraTime;\n                            }\n                            if (timeout) {\n                                self.disable();\n                            }\n                        },\n                        interval: timerRefresh,\n                        autoStart: false\n                    });\n\n                    //change plugin state\n                    testRunner\n                        .before('renderitem resumeitem', function() {\n                            return updateTimers(true);\n                        })\n                        .on('enableitem', doEnable)\n                        .on('disableitem disconnect', doDisable)\n                        .after('renderitem', doEnable)\n                        .before('move', function(e, type, scope, position) {\n                            var context = testRunner.getTestContext();\n                            var testData = testRunner.getTestData();\n                            var config = testData && testData.config;\n                            var timerConfig = config && config.timer || {};\n                            var options = context && context.options || {};\n\n                            var movePromise = new Promise(function(resolve, reject) {\n                                // endTestWarning has already been displayed, so we don't repeat the warning\n                                if (context.isLast && options.endTestWarning) {\n                                    resolve();\n                                    // display a message if we exit a timed section\n                                } else if (leaveTimedSection(type, scope, position) && !options.noExitTimedSectionWarning && !timerConfig.keepUpToTimeout) {\n                                    testRunner.trigger('confirm.exittimed', messages.getExitMessage(exitMessage, 'section', testRunner), resolve, reject);\n                                } else {\n                                    resolve();\n                                }\n                            });\n\n                            movePromise\n                                .then(function doMove() {\n                                    //pause the timers when moving\n                                    doDisable();\n                                    removeTimer(timerTypes.item);\n                                })\n                                .catch(function cancelMove() {\n                                    // Use `defer` to be sure the timer resume will occur after the move event is\n                                    // finished to be handled. Otherwise, the duration plugin will be frozen and\n                                    // the additional time will not be taken into account!\n                                    _.defer(function() {\n                                        testRunner.trigger('enableitem enablenav');\n                                    });\n                                });\n\n                            return movePromise;\n                        })\n                        .before('move skip exit timeout', function() {\n                            testRunner.getProxy().addCallActionParams({\n                                consumedExtraTime: lastConsumedExtraTime / precision\n                            });\n                            lastConsumedExtraTime = 0;\n                        })\n                        .before('finish', function() {\n                            return new Promise(function(resolve) {\n                                self.storage.removeStore()\n                                    .then(resolve)\n                                    .catch(resolve);\n                            });\n                        });\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.polling.stop();\n            this.stopwatch.stop();\n            this.$element.remove();\n        },\n\n        /**\n         * Enables the timers\n         */\n        enable: function enable() {\n            this.polling.start();\n            this.stopwatch.resume();\n        },\n\n        /**\n         * Disables the timers\n         */\n        disable: function disable() {\n            this.polling.stop();\n            this.stopwatch.pause();\n        },\n\n        /**\n         * Shows the timers\n         */\n        show: function show() {\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hides the timers\n         */\n        hide: function hide() {\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/title/title', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n        <span data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"qti-controls\\\" title=\\\"\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  stack1 = helpers.unless.call(depth0, (data == null || data === false ? data : data.first), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \" - \";\n  }\n\n  buffer += \"<div class=\\\"title-box truncate\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.titles), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Title\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/title/title',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/title/title'\n], function ($, __, pluginFactory, titleTpl){\n    'use strict';\n\n    return pluginFactory({\n        name : 'title',\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData   = testRunner.getTestData();\n\n            var createElement = function(){\n\n                var context  = testRunner.getTestContext();\n                var titles =  [{\n                    control : 'qti-test-title',\n                    text    : testData.title\n                }];\n\n               /*\n               //Commenting it, bc it leads to duplicating title\n               if(context.isDeepestSectionVisible){\n                    titles.push({\n                        control : 'qti-test-position',  //WTF !? isn't it the section title... ?\n                        text    : context.sectionTitle\n                    });\n               }*/\n\n                return $(titleTpl({ titles : titles }));\n            };\n\n            this.$element = createElement();\n\n\n            testRunner\n                .after('renderitem', function(){\n                    var $element = createElement();\n                    self.$element.replaceWith($element);\n                    self.$element = $element;\n                });\n\n        },\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Test Runner Control Plugin : Item Trace Variables\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/trace/itemTraceVariables',[\n    'lodash',\n    'moment',\n    'core/store',\n    'taoTests/runner/plugin'\n], function (_, moment, storeFactory, pluginFactory) {\n    'use strict';\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * Gets the current timestamp\n     * @returns {Number}\n     */\n    function timestamp() {\n        return Date.now() / precision;\n    }\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'itemTraceVariables',\n\n        /**\n         * Installation of the plugin (called before init)\n         */\n        install: function install() {\n            var self = this;\n            self.getTestRunner().on('storechange', function () {\n                self.shouldClearStorage = true;\n            });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var variables = {};\n\n            function onError(err) {\n                testRunner.trigger('error', err);\n            }\n\n            return storeFactory('trace-' + testRunner.getConfig().serviceCallId)\n                .then(function (tracesStore) {\n                    if (self.shouldClearStorage) {\n                        return tracesStore.clear().then(function () {\n                            return tracesStore;\n                        });\n                    }\n                    return tracesStore;\n                }).then(function (tracesStore) {\n                    testRunner\n                        .after('renderitem enableitem', function () {\n                            var context = testRunner.getTestContext();\n\n                            variables = {\n                                ITEM_START_TIME_CLIENT: timestamp()\n                            };\n\n                            tracesStore.getItem(context.itemUri)\n                                .then(function (data) {\n                                    if (data) {\n                                        _.merge(variables, data);\n                                    }\n\n                                    return tracesStore.setItem(context.itemUri, variables);\n                                })\n                                .catch(onError);\n                        })\n\n                        .before('move skip exit timeout', function () {\n                            var context = testRunner.getTestContext();\n\n                            variables.ITEM_END_TIME_CLIENT = timestamp();\n                            variables.ITEM_TIMEZONE = moment().utcOffset(moment().utcOffset()).format('Z');\n\n                            return tracesStore.setItem(context.itemUri, variables).catch(onError);\n                        })\n\n                        .before('unloaditem', function () {\n                            var context = testRunner.getTestContext();\n                            return testRunner.getProxy().callItemAction(context.itemIdentifier, 'storeTraceData', {\n                                traceData: JSON.stringify(variables)\n                            });\n                        })\n\n                        .before('finish', function () {\n                            return new Promise(function (resolve) {\n                                tracesStore.removeStore()\n                                    .then(resolve)\n                                    .catch(resolve);\n                            });\n                        });\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * http://www.imsglobal.org/question/qtiv2p2p1/QTIv2p2p1-ASI-InformationModelv1p0/imsqtiv2p2p1_asi_v1p0_InfoModelv1p0.html#DerivedCharacteristic_ItemSessionControl.Attr_allowSkipping\n *\n * An item is defined to be skipped if the candidate has not provided any\n * response. In other words, all response variables are submitted with their\n * default value or are NULL. This definition is consistent with the\n * numberResponded operator available in outcomeProcessing. If 'false',\n * candidates are not allowed to skip the item, or in other words, they are not\n * allowed to submit the item until they have provided a non-default value for\n * at least one of the response variables. By definition, an item with no\n * response variables cannot be skipped. The value of this attribute is only\n * applicable when the item is in a testPart with individual submission mode.\n * Note that if allowSkipping is 'true' delivery engines must ensure that the\n * candidate can choose to submit no response, for example, through the\n * provision of a \"skip\" button.\n */\n\ndefine('taoQtiTest/runner/plugins/navigation/allowSkipping',[\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/currentItem'\n], function(\n    _,\n    __,\n    pluginFactory,\n    currentItemHelper\n) {\n    'use strict';\n\n    /**\n     * Plugin factory\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'allowSkipping',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         * @returns {this}\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n\n            testRunner\n            .before('move', function () {\n                var testContext = testRunner.getTestContext();\n\n                if (testContext.enableAllowSkipping && !testContext.allowSkipping) {\n                    this.trigger('disablenav disabletools');\n\n                    return new Promise(function (resolve, reject) {\n                        if(_.size(currentItemHelper.getDeclarations(testRunner)) === 0){\n                            return resolve();\n                        }\n                        if (currentItemHelper.isAnswered(testRunner, true)) {\n                            return resolve();\n                        }\n\n                        if (!testRunner.getState('alerted.notallowed')) { // Only show one alert for itemSessionControl\n                            testRunner.setState('alerted.notallowed', true);\n                            testRunner.trigger(\n                                'alert.notallowed',\n                                __('A response to this item is required.'),\n                                function () {\n                                    testRunner.trigger('resumeitem');\n                                    reject();\n                                    testRunner.setState('alerted.notallowed', false);\n                                }\n                            );\n                        }\n                    });\n                }\n            });\n\n            return this;\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * This is a helper for navigation plugins. It decides if a warning should be displayed\n * before actually moving to the next item\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',[], function () {\n    'use strict';\n\n    /**\n     * Convert a value to a boolean\n     * @param {*} value\n     * @param {Boolean} defaultValue\n     * @returns {Boolean}\n     */\n    var toBoolean = function toBoolean(value, defaultValue) {\n        if (typeof(value) === \"undefined\") {\n            return defaultValue;\n        } else {\n            return (value === true || value === \"true\");\n        }\n    };\n\n    /**\n     * @param {Object} options\n     * @param {Boolean} options.endTestWarning - enables the end test warning, when applicable\n     * @param {Boolean} options.isLast - if the item is the last of the test\n     * @param {Boolean} options.isLinear - if the current part is linear\n     * @param {Boolean} options.nextItemWarning - enables the next item warning, when applicable\n     * @param {Boolean} options.nextPartWarning - enables the next item warning on part change\n     * @param {Boolean} options.stats - current state of the test\n     * @param {Object} options.nextPart - description of the next part of the test\n     * @param {Number} options.remainingAttempts - remaining attempts for the current item\n     * @param {String} options.testPartId - current test part identifier\n     * @param {Boolean} options.unansweredOnly - warn only if there are unanswered/flagged items\n     * @returns {Object}\n     */\n    var nextWarningHelper = function nextWarningHelper(options) {\n        var endTestWarning      = toBoolean(options.endTestWarning, false),\n            isLast              = toBoolean(options.isLast, false),\n            isLinear            = toBoolean(options.isLinear, false),\n            nextItemWarning     = toBoolean(options.nextItemWarning, false),\n            nextPartWarning     = toBoolean(options.nextPartWarning, false),\n            stats               = options.stats,\n            nextPart            = options.nextPart || {},\n            remainingAttempts   = typeof(options.remainingAttempts) === 'undefined' ? -1 : options.remainingAttempts,\n            testPartId          = options.testPartId || '',\n            unansweredOnly      = toBoolean(options.unansweredOnly, false),\n\n            warnBeforeNext = shouldWarnBeforeNext(),\n            warnBeforeEnd = shouldWarnBeforeEnd();\n\n        /**\n         * Decide if we should display a warning before moving to the next item.\n         * This is useful to prevent accidental navigation (for example by pressing a shortcut) that would occur\n         * before the test taker actually gets a chance to answer an item\n         */\n        function shouldWarnBeforeNext() {\n            return nextItemWarning\n                && !itemCanBeTriedAtWill();\n                //&& !exitTimedSectionWarning(); //todo: this should be implemented to prevent a double warning!\n        }\n\n        /**\n         * We try to decide if the test taker has the freedom to come back to this item as many times as he wants\n         */\n        function itemCanBeTriedAtWill() {\n            return (\n                isLast === false                // the test is not over\n                && isLinear === false           // the context is not linear\n                && remainingAttempts === -1     // the item doesn't have a configured max attempts number\n                && !isNextItemInLinearPart()    // the next item is not in a linear part\n            );\n        }\n\n        /**\n         * Check if the next item is in a linear part, as this would prevent the test taker to come back to the current item\n         */\n        function isNextItemInLinearPart() {\n            return nextPart && typeof nextPart.isLinear !== 'undefined'\n                && isLastOfPart()\n                && nextPart.isLinear === true;\n        }\n\n        /**\n         * Decide if we should display a warning before ending the test\n         */\n        function shouldWarnBeforeEnd() {\n            return shouldWarnOnTestEnd()\n                || shouldWarnOnPartChange();\n        }\n\n        /**\n         * Are we on the last test item?\n         * @returns {Boolean}\n         */\n        function shouldWarnOnTestEnd() {\n            return isLast\n                && (\n                    endTestWarning                      // warning is explicitly required by endTestWarning category\n                    || warnBeforeNext                   // warning is implicitly triggered by the next item warning being true (prevent double warning)\n                )\n                && shouldWarnForUnansweredItems();\n        }\n\n        /**\n         * Provide the opportunity to cancel the display of the warning if there are no unanswered/flagged item\n         * for this to work, the unansweredOnly option has to be set\n         * @returns {Boolean}\n         */\n        function shouldWarnForUnansweredItems() {\n            var hasUnanswered = stats && ((stats.questions - stats.answered) !== 0),\n                hasFlagged = stats && stats.flagged !== 0;\n\n            if (unansweredOnly) {\n                return (hasUnanswered || hasFlagged);\n            } else {\n                return true;\n            }\n        }\n\n        /**\n         * Are we on the last part item?\n         * @returns {Boolean}\n         */\n        function shouldWarnOnPartChange() {\n            return nextPartWarning\n                && isLastOfPart()\n                && shouldWarnForUnansweredItems();\n        }\n\n        /**\n         * Check if the next item belong to a different part\n         * @returns {Boolean}\n         */\n        function isLastOfPart() {\n            return nextPart && nextPart.id\n                && testPartId !== nextPart.id;\n        }\n\n        /**\n         * The helper object\n         */\n        return {\n            shouldWarnBeforeEnd: function () {\n                return warnBeforeEnd;\n            },\n            shouldWarnBeforeNext: function () {\n                return warnBeforeNext;\n            }\n        };\n    };\n\n    return nextWarningHelper;\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Next\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/next',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',\n    'taoQtiTest/runner/helpers/messages',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/stats',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, nextWarningHelper, messages, mapHelper, statsHelper, shortcut, namespaceHelper, buttonTpl){\n    'use strict';\n\n    /**\n     * The display of the next button\n     */\n    var buttonData = {\n        next : {\n            control : 'move-forward',\n            title   : __('Submit and go to the next item'),\n            icon    : 'forward',\n            text    : __('Next')\n        },\n        end : {\n            control : 'move-end',\n            title   : __('Submit and go to the end of the test'),\n            icon    : 'fast-forward',\n            text    : __('End test')\n        }\n    };\n\n    /**\n     * Create the button based on the current context\n     * @param {Object} context - the test context\n     * @returns {jQueryElement} the button\n     */\n    var createElement = function createElement(context){\n        var dataType = context.isLast ? 'end' : 'next';\n        return $(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\n     * Update the button based on the context\n     * @param {jQueryElement} $element - the element to update\n     * @param {Object} context - the test context\n     */\n    var updateElement = function updateElement($element, context){\n        var dataType = context.isLast ? 'end' : 'next';\n        if($element.data('control') !== buttonData[dataType].control){\n\n            $element.data('control', buttonData[dataType].control)\n                    .attr('title', buttonData[dataType].title)\n                    .find('.text').text(buttonData[dataType].text);\n\n            if(dataType === 'next'){\n                $element.find('.icon-' + buttonData.end.icon)\n                        .removeClass('icon-' + buttonData.end.icon)\n                        .addClass('icon-' + buttonData.next.icon);\n            } else {\n                $element.find('.icon-' + buttonData.next.icon)\n                        .removeClass('icon-' + buttonData.next.icon)\n                        .addClass('icon-' + buttonData.end.icon);\n            }\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'next',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            //plugin behavior\n            /**\n             * @param {Boolean} nextItemWarning - enable the display of a warning when going to the next item.\n             * Note: the actual display of the warning depends on other conditions (see nextWarningHelper)\n             */\n            function doNext(nextItemWarning) {\n                var context = testRunner.getTestContext(),\n                    testOptions = context.options || {};\n\n                var map = testRunner.getTestMap();\n                var nextItemPosition = context.itemPosition + 1;\n\n                // x-tao-option-unansweredWarning is a deprecated option whose behavior now matches the one of\n                // x-tao-option-nextPartWarning with the unansweredOnly option\n                var nextPartWarning = testOptions.nextPartWarning || testOptions.unansweredWarning;\n                var unansweredOnly =\n                    !testOptions.endTestWarning // this check to avoid an edge case where having both endTestWarning\n                                                // and unansweredWarning options would prevent endTestWarning to behave normally\n                    && testOptions.unansweredWarning;\n\n                var warningScope = (nextPartWarning) ? 'part' : 'test';\n\n                var warningHelper = nextWarningHelper({\n                    endTestWarning:     testOptions.endTestWarning,\n                    isLast:             context.isLast,\n                    isLinear:           context.isLinear,\n                    nextItemWarning:    nextItemWarning,\n                    nextPartWarning:    nextPartWarning,\n                    nextPart:           mapHelper.getItemPart(map, nextItemPosition),\n                    remainingAttempts:  context.remainingAttempts,\n                    testPartId:         context.testPartId,\n                    unansweredWarning:  testOptions.unansweredWarning,\n                    stats:              statsHelper.getInstantStats(warningScope, testRunner),\n                    unansweredOnly:     unansweredOnly\n                });\n\n                function enable() {\n                    testRunner.trigger('enablenav enabletools');\n                }\n\n                if(self.getState('enabled') !== false) {\n                    testRunner.trigger('disablenav disabletools');\n\n                    if (warningHelper.shouldWarnBeforeEnd()) {\n                        testRunner.trigger(\n                            'confirm.endTest',\n                            messages.getExitMessage(\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                                warningScope, testRunner),\n                            _.partial(triggerNextAction, context), // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n\n                    } else if (warningHelper.shouldWarnBeforeNext()) {\n                        testRunner.trigger(\n                            'confirm.next',\n                            __('You are about to go to the next item. Click OK to continue and go to the next item.'),\n                            _.partial(triggerNextAction, context), // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n\n                    } else {\n                        triggerNextAction(context);\n                    }\n                }\n            }\n\n            function triggerNextAction(context) {\n                if(context.isLast){\n                    self.trigger('end');\n                }\n                testRunner.next();\n            }\n\n            //create the button (detached)\n            this.$element = createElement(testRunner.getTestContext());\n\n            //attach behavior\n            this.$element.on('click', function(e){\n                e.preventDefault();\n                testRunner.trigger('nav-next');\n            });\n\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function(e) {\n                    if (self.getState('enabled') === true) {\n                        testRunner.trigger('nav-next', true);\n                    }\n                }, {\n                    avoidInput: true,\n                    prevent: true\n                });\n            }\n\n            //disabled by default\n            this.disable();\n\n            //change plugin state\n            testRunner\n                .on('loaditem', function(){\n                    updateElement(self.$element, testRunner.getTestContext());\n                })\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('nav-next', function(nextItemWarning) {\n                    doNext(nextItemWarning);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n\n            //attach the element to the navigation area\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            shortcut.remove('.' + this.getName());\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Next Section\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/nextSection',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\n    'use strict';\n\n    return pluginFactory({\n        name : 'nextsection',\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testConfig = testRunner.getTestData().config;\n\n            function toggle(){\n                var options = testRunner.getTestContext().options;\n                if(testConfig.nextSection && (options.nextSection || options.nextSectionWarning)){\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function nextSection() {\n                testRunner.next('section');\n            }\n\n            this.$element = $(buttonTpl({\n                control : 'next-section',\n                title   : __('Skip to the next section'),\n                icon    : 'fast-forward',\n                text    : __('Next Section')\n            }));\n\n            this.$element.on('click', function(e){\n                var context = testRunner.getTestContext();\n                var enable = _.bind(self.enable, self);\n                e.preventDefault();\n                if(self.getState('enabled') !== false){\n                    self.disable();\n\n                    if(context.options.nextSectionWarning){\n                        testRunner.trigger(\n                            'confirm.nextsection',\n                            messages.getExitMessage(\n                                __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\n                                'section', testRunner),\n                            nextSection, // if the test taker accept\n                            enable       // if the test taker refuse\n                        );\n                    } else {\n                        nextSection();\n                    }\n                }\n            });\n\n            this.disable();\n            toggle();\n\n            testRunner\n                .on('loaditem', toggle)\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n\n            //attach the element to the navigation area\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Previous\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/previous',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, shortcut, namespaceHelper, buttonTpl){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'previous',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            /**\n             * Check if the \"Previous\" functionality should be available or not\n             */\n            var canDoPrevious = function canDoPrevious() {\n                var context = testRunner.getTestContext();\n                return context.isLinear === false && context.canMoveBackward === true;\n            };\n\n            /**\n             * Hide the plugin if the Previous functionality shouldn't be available\n             */\n            var toggle = function toggle(){\n                if(canDoPrevious()){\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            };\n\n            //build element (detached)\n            this.$element =  $(buttonTpl({\n                control : 'move-backward',\n                title   : __('Submit and go to the previous item'),\n                icon    : 'backward',\n                text    : __('Previous')\n            }));\n\n            //attach behavior\n            function doPrevious(previousItemWarning) {\n                var context = testRunner.getTestContext();\n\n                function enable() {\n                    testRunner.trigger('enablenav enabletools');\n                }\n\n                if(self.getState('enabled') !== false){\n                    testRunner.trigger('disablenav disabletools');\n\n                    if (previousItemWarning && context.remainingAttempts !== -1) {\n                        testRunner.trigger(\n                            'confirm.previous',\n                            __('You are about to go to the previous item. Click OK to continue and go to the previous item.'),\n                            testRunner.previous, // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n\n                    } else {\n                        testRunner.previous();\n                    }\n                }\n            }\n\n            this.$element.on('click', function(e){\n                e.preventDefault();\n                testRunner.trigger('nav-previous');\n            });\n\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function(e) {\n                    if (canDoPrevious() && self.getState('enabled') === true) {\n                        testRunner.trigger('nav-previous', [true]);\n                    }\n                }, {\n                    avoidInput: true,\n                    prevent: true\n                });\n            }\n\n            //start disabled\n            toggle();\n            self.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', toggle)\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('nav-previous', function(previousItemWarning){\n                    doPrevious(previousItemWarning);\n                });\n        },\n\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            shortcut.remove('.' + this.getName());\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"qti-navigator-info collapsible\\\">\\n                <span class=\\\"qti-navigator-label\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-up\\\"></span>\\n                    <span class=\\\"icon-down\\\"></span>\\n                </span>\\n        <ul class=\\\"collapsible-panel plain\\\">\\n            <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n        </ul>\\n    </div>\\n    \";\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  return \"(<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  }\n\nfunction program7(depth0,data) {\n  \n  \n  return \"icon-unanswered \";\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \"icon-flagged \";\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"qti-panel qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\n    <div class=\\\"qti-navigator-collapsible\\\">\\n        <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\n        <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\n    </div>\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n\\n    <div class=\\\"qti-navigator-filters\\\">\\n        <ul class=\\\"plain clearfix\\\">\\n            <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\n                <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\">\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\">\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n        </ul>\\n    </div>\\n\\n    <nav class=\\\"qti-navigator-tree\\\"></nav>\\n\\n    <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\n        <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n        <p class=\\\"qti-navigator-message\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n        </p>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n            <span class=\\\"icon-up\\\"></span>\\n            <span class=\\\"icon-down\\\"></span>\\n        </span>\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isLinear), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </li>\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\n            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n            <p class=\\\"qti-navigator-message\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n            </p>\\n            <p class=\\\"qti-navigator-actions\\\">\\n                <button class=\\\"btn-info small\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-play r\\\"></span>\\n                </button>\\n            </p>\\n        </div>\\n        \";\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\n            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        </ul>\\n        \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                    <span class=\\\"qti-navigator-counter\\\">\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.answered)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.total)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                </span>\\n                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </ul>\\n            </li>\\n            \";\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <li class=\\\"qti-navigator-item \";\n  if (helper = helpers.cls) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.cls); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                            <span class=\\\"qti-navigator-icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></span>\\n                            <span class=\\\"qti-navigator-number\\\">\";\n  if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                        </span>\\n                    </li>\\n                    \";\n  return buffer;\n  }\n\n  buffer += \"<ul class=\\\"qti-navigator-parts plain\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</ul>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/review/navigator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/component',\n    'ui/autoscroll',\n    'taoQtiTest/runner/helpers/map',\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigator',\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree'\n], function ($, _, __, component, autoscroll, mapHelper, navigatorTpl, navigatorTreeTpl) {\n    'use strict';\n\n    /**\n     * Some default values\n     * @type {Object}\n     * @private\n     */\n    var _defaults = {\n        scope: 'test',\n        canCollapse: false,\n        preventsUnseen: true,\n        hidden: false\n    };\n\n    /**\n     * List of CSS classes\n     * @type {Object}\n     * @private\n     */\n    var _cssCls = {\n        active: 'active',\n        collapsed: 'collapsed',\n        collapsible: 'collapsible',\n        hidden: 'hidden',\n        disabled: 'disabled',\n        flagged: 'flagged',\n        answered: 'answered',\n        viewed: 'viewed',\n        unseen: 'unseen',\n        info: 'info',\n        icon: 'qti-navigator-icon',\n        scope: {\n            test: 'scope-test',\n            testPart: 'scope-test-part',\n            testSection: 'scope-test-section'\n        }\n    };\n\n    /**\n     * List of icon CSS classes\n     * @type {Array}\n     * @private\n     */\n    var _iconCls = [\n        _cssCls.info,\n        _cssCls.flagged,\n        _cssCls.answered,\n        _cssCls.viewed\n    ];\n\n    /**\n     * List of common CSS selectors\n     * @type {Object}\n     * @private\n     */\n    var _selectors = {\n        component: '.qti-navigator',\n        filterBar: '.qti-navigator-filters',\n        filter: '.qti-navigator-filter',\n        tree: '.qti-navigator-tree',\n        collapseHandle: '.qti-navigator-collapsible',\n        linearState: '.qti-navigator-linear',\n        infoAnswered: '.qti-navigator-answered .qti-navigator-counter',\n        infoViewed: '.qti-navigator-viewed .qti-navigator-counter',\n        infoUnanswered: '.qti-navigator-unanswered .qti-navigator-counter',\n        infoFlagged: '.qti-navigator-flagged .qti-navigator-counter',\n        infoPanel: '.qti-navigator-info',\n        infoPanelLabels: '.qti-navigator-info > .qti-navigator-label',\n        tabInfoAll: '[data-mode=\"all\"] .qti-navigator-counter',\n        tabInfoUnanswered: '[data-mode=\"unanswered\"] .qti-navigator-counter',\n        tabInfoFlagged: '[data-mode=\"flagged\"] .qti-navigator-counter',\n        parts: '.qti-navigator-part',\n        partLabels: '.qti-navigator-part > .qti-navigator-label',\n        sections: '.qti-navigator-section',\n        sectionLabels: '.qti-navigator-section > .qti-navigator-label',\n        items: '.qti-navigator-item',\n        itemLabels: '.qti-navigator-item > .qti-navigator-label',\n        itemIcons: '.qti-navigator-item > .qti-navigator-icon',\n        activeItem: '.qti-navigator-item.active',\n        icons: '.qti-navigator-icon',\n        linearStart: '.qti-navigator-linear-part button',\n        counters: '.qti-navigator-counter',\n        actives: '.active',\n        collapsible: '.collapsible',\n        collapsiblePanels: '.collapsible-panel',\n        unseen: '.unseen',\n        answered: '.answered',\n        flagged: '.flagged',\n        notFlagged: ':not(.flagged)',\n        notAnswered: ':not(.answered)',\n        notInformational: ':not(.info)',\n        informational: '.info',\n        hidden: '.hidden',\n        disabled : '.disabled'\n    };\n\n    /**\n     * Maps the filter mode to filter criteria.\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\n     * @type {Object}\n     * @private\n     */\n    var _filterMap = {\n        all: \"\",\n        unanswered: [_selectors.answered, _selectors.informational].join(','),\n        flagged: _selectors.notFlagged,\n        answered: _selectors.notAnswered,\n        filtered: _selectors.hidden\n    };\n\n    /**\n     *\n     * @type {Object}\n     */\n    var navigatorApi = {\n        /**\n         * Updates the stats on the flagged items in the current map\n         * @param {Number} position\n         * @param {Boolean} flag\n         */\n        updateStats: function updateStats(position, flag) {\n            var map = this.map;\n            var item;\n\n            if (map) {\n                item = mapHelper.getItemAt(map, position);\n\n                if (item) {\n                    item.flagged = flag;\n                    mapHelper.updateItemStats(map, position);\n                }\n            }\n        },\n\n        /**\n         * Gets the total number of items for the provided target\n         * @param {Object} progression\n         * @param {String} target\n         * @returns {Number}\n         */\n        getProgressionTotal: function getProgressionTotal(progression, target) {\n            var total;\n\n            if ('questions' === target) {\n                total = progression.questions;\n            } else {\n                total = progression.total;\n            }\n\n            return total;\n        },\n\n        /**\n         * Set the marked state of an item\n         * @param {Number|String|jQuery} position\n         * @param {Boolean} flag\n         */\n        setItemFlag: function setItemFlag(position, flag) {\n            var $item = position && position.jquery ? position : this.controls.$tree.find('[data-position=' + position + ']');\n            var progression = this.progression;\n            var icon;\n\n            // update the map stats\n            this.updateStats(position, flag);\n\n            // update the item flag\n            $item.toggleClass(_cssCls.flagged, flag);\n\n            // set the item icon according to its state\n            icon = _.find(_iconCls, _.bind($item.hasClass, $item)) || _cssCls.unseen;\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\n\n            // update the info panel\n            progression.flagged = this.controls.$tree.find(_selectors.flagged).length;\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, this.getProgressionTotal(progression, 'questions'));\n\n            // recompute the filters\n            this.filter(this.currentFilter);\n        },\n\n        /**\n         * Filters the items by a criteria\n         * @param {String} criteria\n         */\n        filter: function filter(criteria) {\n            var self = this;\n\n            // remove the current filter by restoring all items\n            var $items = this.controls.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\n\n            // filter the items according to the provided criteria\n            var filterCb = _filterMap[criteria];\n            if (filterCb) {\n                $items.filter(filterCb).addClass(_cssCls.hidden);\n            }\n\n            // update the section counters\n            this.controls.$tree.find(_selectors.sections).each(function () {\n                var $section     = $(this);\n                var $itemsFound  = $section.find(_selectors.items).not(_selectors.hidden);\n                var $filtered    = $itemsFound.not(_selectors.disabled);\n                self.writeCount($section.find(_selectors.counters), $filtered.length, $itemsFound.length);\n            });\n            this.currentFilter = criteria;\n        },\n\n        /**\n         * Update the config\n         * @param {Object} [config]\n         * @returns {navigatorApi}\n         */\n        updateConfig: function updateConfig(config) {\n            var $component = this.getElement();\n            var scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n\n            // apply the new config\n            config = _.merge(this.config, config || {});\n\n            // enable/disable the collapsing of the panel\n            $component.toggleClass(_cssCls.collapsible, config.canCollapse);\n\n            // update the component CSS class according to the scope\n            $component.removeClass(scopeClass);\n            scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n            $component.addClass(scopeClass);\n\n            return this;\n        },\n\n        /**\n         * Keep the active item visible, auto scroll if needed\n         */\n        autoScroll: function autoScroll() {\n            autoscroll(this.controls.$tree.find(_selectors.activeItem), this.controls.$tree);\n        },\n\n        /**\n         * Updates the review screen\n         * @param {Object} map The current test map\n         * @param {Object} context The current test context\n         * @returns {navigatorApi}\n         * @fires navigator#update\n         */\n        update: function update(map, context) {\n            var scopedMap = this.getScopedMap(map, context);\n            var progression = scopedMap.stats || {\n                questions: 0,\n                answered: 0,\n                flagged: 0,\n                viewed: 0,\n                total: 0\n            };\n            var totalQuestions = this.getProgressionTotal(progression, 'questions');\n\n            this.map = map;\n            this.progression = progression;\n\n            // update the info panel\n            this.writeCount(this.controls.$infoAnswered, progression.answered, totalQuestions);\n            this.writeCount(this.controls.$infoUnanswered, totalQuestions - progression.answered, totalQuestions);\n            this.writeCount(this.controls.$infoViewed, progression.viewed, this.getProgressionTotal(progression, 'total'));\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, totalQuestions);\n            this.writeCount(this.controls.$infoAll, totalQuestions, null);\n\n\n            // rebuild the tree\n            if (!context.isLinear) {\n                this.controls.$filterBar.show();\n                this.controls.$linearState.hide();\n                this.controls.$tree.html(navigatorTreeTpl(scopedMap));\n\n                this.autoScroll();\n\n                this.setState('prevents-unseen', this.config.preventsUnseen);\n                if (this.config.preventsUnseen) {\n                    // disables all unseen items to prevent the test taker has access to.\n                    this.controls.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\n                }\n            } else {\n                this.controls.$filterBar.hide();\n                this.controls.$linearState.show();\n                this.controls.$tree.empty();\n            }\n\n            // apply again the current filter\n            this.filter(this.controls.$filters.filter(_selectors.actives).data('mode'));\n\n            /**\n             * @event navigator#update the navigation data have changed\n             */\n            this.trigger('update');\n\n            return this;\n        },\n\n        /**\n         * Gets the scoped map\n         * @param {Object} map The current test map\n         * @param {Object} context The current test context\n         * @returns {object} The scoped map\n         */\n        getScopedMap: function getScopedMap(map, context) {\n            var scopedMap = mapHelper.getScopeMap(map, context.itemPosition, this.config.scope);\n            var testPart = mapHelper.getPart(scopedMap, context.testPartId) || {};\n            var section = mapHelper.getSection(scopedMap, context.sectionId) || {};\n            var item = mapHelper.getItem(scopedMap, context.itemIdentifier) || {};\n\n            // set the active part/section/item\n            testPart.active = true;\n            section.active = true;\n            item.active = true;\n\n            // adjust each item with additional meta\n            return mapHelper.each(scopedMap, function(itm) {\n                var cls = [];\n                var icon = '';\n\n                if (itm.active) {\n                    cls.push('active');\n                }\n                if (itm.informational) {\n                    cls.push('info');\n                    icon = icon || 'info';\n                }\n                if (itm.flagged) {\n                    cls.push('flagged');\n                    icon = icon || 'flagged';\n                }\n                if (itm.answered) {\n                    cls.push('answered');\n                    icon = icon || 'answered';\n                }\n                if (itm.viewed) {\n                    cls.push('viewed');\n                    icon = icon || 'viewed';\n                } else {\n                    cls.push('unseen');\n                    icon = icon || 'unseen';\n                }\n\n                itm.cls = cls.join(' ');\n                itm.icon = icon;\n            });\n        },\n\n        /**\n         * Updates a counter\n         * @param {jQuery} $place\n         * @param {Number} count\n         * @param {Number|Null} total\n         * @private\n         */\n        writeCount: function writeCount($place, count, total) {\n\n            var display = 0;\n            if($place.parent().hasClass('qti-navigator-tab')){\n                display = Math.max(count, 0);\n            }\n            else if(total > 0){\n                display = Math.min(count, total) + '/' + total;\n            }\n            $place.text(display);\n        },\n\n        /**\n         * Selects an item\n         * @param {String|jQuery} position The item's position\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\n         * @returns {jQuery} Returns the selected item\n         */\n        select: function select(position, open) {\n            // find the item to select and extract its hierarchy\n            var $tree = this.controls.$tree;\n            var selected = position && position.jquery ? position : $tree.find('[data-position=' + position + ']');\n            var hierarchy = selected.parentsUntil($tree);\n            var previousPosition = 0;\n            var $previous = $tree.find(_selectors.activeItem);\n            if ( $previous.length ) {\n                previousPosition = $previous.data('position');\n            }\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            if (open) {\n                this.openOnly(hierarchy);\n            }\n\n            // select the item\n            $tree.find(_selectors.actives).removeClass(_cssCls.active);\n            hierarchy.add(selected).addClass(_cssCls.active);\n\n            position = selected.data('position');\n\n            /**\n             * An item is selected\n             *\n             * @param {Number} position - The item position on which select\n             * @param {Number} previousPosition - The item position from which select\n             * @event navigator#selected\n             */\n            this.trigger('selected', position, previousPosition);\n\n            return selected;\n        },\n\n        /**\n         * Opens the tree on the selected item only\n         * @returns {jQuery} Returns the selected item\n         */\n        openSelected: function openSelected() {\n            // find the selected item and extract its hierarchy\n            var $tree = this.controls.$tree;\n            var selected = $tree.find(_selectors.items + _selectors.actives);\n            var hierarchy = selected.parentsUntil($tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            this.openOnly(hierarchy);\n\n            return selected;\n        },\n\n        /**\n         * Collapses the full tree and opens only the provided branch\n         * @param {jQuery} opened The element to be opened\n         * @param {jQuery} [root] The root element from which collapse the panels\n         */\n        openOnly: function openOnly(opened, root) {\n            (root || this.controls.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\n            opened.removeClass(_cssCls.collapsed);\n        },\n\n        /**\n         * Toggles a panel\n         * @param {jQuery} panel The panel to toggle\n         * @param {String} [collapseSelector] Selector of panels to collapse\n         * @returns {Boolean} Returns `true` if the panel just expanded now\n         */\n        togglePanel: function togglePanel(panel, collapseSelector) {\n            var collapsed = panel.hasClass(_cssCls.collapsed);\n\n            if (collapseSelector) {\n                this.controls.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\n            }\n\n            if (collapsed) {\n                panel.removeClass(_cssCls.collapsed);\n            } else {\n                panel.addClass(_cssCls.collapsed);\n            }\n            return collapsed;\n        },\n\n        /**\n         * Toggles the display state of the component\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\n         * @returns {navigatorApi}\n         */\n        toggle: function toggle(show) {\n            if (typeof show === 'undefined') {\n                show = this.is('hidden');\n            }\n\n            if (show) {\n                this.show();\n            } else {\n                this.hide();\n            }\n\n            return this;\n        }\n    };\n\n    /**\n     *\n     * @param {Object} config\n     * @param {String} [config.scope] Limit the review screen to a particular scope: test, testPart, testSection\n     * @param {Boolean} [config.preventsUnseen] Prevents the test taker to access unseen items\n     * @param {Boolean} [config.canCollapse] Allow the test taker to collapse the component\n     * @param {Boolean} [config.canFlag] Allow the test taker to flag items\n     * @param {Boolean} [config.hidden] Hide the component at init\n     * @param {Object} map The current test map\n     * @param {Object} context The current test context\n     * @returns {*}\n     */\n    function navigatorFactory(config, map, context) {\n\n        var navigator;\n\n        /**\n         * Flags an item\n         * @param {jQuery} $item\n         */\n        function flagItem($item) {\n            var position = $item.data('position');\n            var flagged = !$item.hasClass(_cssCls.flagged);\n\n            // update the display\n            navigator.setItemFlag(position, flagged);\n\n            /**\n             * An item is flagged\n             * @event navigator#flag\n             * @param {Number} position - The item position on which jump\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\n             */\n            navigator.trigger('flag', position, flagged);\n        }\n\n        /**\n         * Jumps to an item\n         * @param {jQuery} $item\n         * @private\n         */\n        function jump($item) {\n            var position = $item.data('position');\n\n            /**\n             * A jump to a particular item is required\n             * @event navigator#jump\n             * @param {Number} position - The item position on which jump\n             */\n            navigator.trigger('jump', position);\n        }\n\n        navigator = component(navigatorApi, _defaults)\n            .setTemplate(navigatorTpl)\n\n\n            // uninstalls the component\n            .on('destroy', function () {\n                this.controls = null;\n            })\n\n            // keep the activ item visible\n            .on('show', function () {\n                this.autoScroll();\n            })\n\n            // renders the component\n            .on('render', function () {\n                var self = this;\n\n                // main component elements\n                var $component = this.getElement();\n                var $filterBar = $component.find(_selectors.filterBar);\n                var $filters = $filterBar.find('li');\n                var $tree = $component.find(_selectors.tree);\n\n                // links the component to the underlying DOM elements\n                this.controls = {\n                    // access to info panel displaying counters\n\n                    $infoAnswered: $component.find(_selectors.infoAnswered),\n                    $infoViewed: $component.find(_selectors.infoViewed),\n                    $infoAll: $component.find(_selectors.tabInfoAll),\n                    $infoUnanswered: this.config.showLegend ?\n                        $component.find(_selectors.infoUnanswered) :\n                        $component.find(_selectors.tabInfoUnanswered),\n                    $infoFlagged: this.config.showLegend ?\n                        $component.find(_selectors.infoFlagged) :\n                        $component.find(_selectors.tabInfoFlagged),\n\n                    // access to filter switches\n                    $filterBar: $filterBar,\n                    $filters: $filters,\n\n                    // access to the tree of parts/sections/items\n                    $tree: $tree,\n\n                    // access to the panel displayed when a linear part is reached\n                    $linearState: $component.find(_selectors.linearState)\n                };\n\n                // apply options\n                this.updateConfig();\n\n                // click on the collapse handle: collapse/expand the review panel\n                $component.on('click' + _selectors.component, _selectors.collapseHandle, function () {\n                    if (!self.is('disabled')) {\n                        $component.toggleClass(_cssCls.collapsed);\n                        if ($component.hasClass(_cssCls.collapsed)) {\n                            self.openSelected();\n                        }\n                    }\n                });\n\n                // click on the info panel title: toggle the related panel\n                $component.on('click' + _selectors.component, _selectors.infoPanelLabels, function () {\n                    if (!self.is('disabled')) {\n                        self.togglePanel($(this).closest(_selectors.infoPanel), _selectors.infoPanel);\n                    }\n                });\n\n                // click on a part title: toggle the related panel\n                $tree.on('click' + _selectors.component, _selectors.partLabels, function () {\n                    var $panel;\n\n                    if (!self.is('disabled')) {\n                        $panel = $(this).closest(_selectors.parts);\n\n                        if (self.togglePanel($panel, _selectors.parts)) {\n                            if ($panel.hasClass(_cssCls.active)) {\n                                self.openSelected();\n                            } else {\n                                self.openOnly($panel.find(_selectors.sections).first(), $panel);\n                            }\n                        }\n                    }\n\n                });\n\n                // click on a section title: toggle the related panel\n                $tree.on('click' + _selectors.component, _selectors.sectionLabels, function () {\n                    if (!self.is('disabled')) {\n                        self.togglePanel($(this).closest(_selectors.sections), _selectors.sections);\n                    }\n                });\n\n                // click on an item: jump to the position\n                $tree.on('click' + _selectors.component, _selectors.itemLabels, function (event) {\n                    var $item, $target;\n\n                    if (!self.is('disabled')) {\n                        $item = $(this).closest(_selectors.items);\n\n                        if (!$item.hasClass(_cssCls.disabled)) {\n                            $target = $(event.target);\n                            if (self.config.canFlag && $target.is(_selectors.icons) && !$component.hasClass(_cssCls.collapsed)) {\n                                // click on the icon, just flag the item, unless the panel is collapsed\n                                if (!$item.hasClass(_cssCls.unseen) && !$item.hasClass(_cssCls.info)) {\n                                    flagItem($item);\n                                }\n                            } else if (!$item.hasClass(_cssCls.active)){\n                                // go to the selected item\n                                self.select($item);\n                                jump($item);\n                            }\n                        }\n                    }\n                });\n\n                // click on the start button inside a linear part: jump to the position\n                $tree.on('click' + _selectors.component, _selectors.linearStart, function () {\n                    var $btn;\n\n                    if (!self.is('disabled')) {\n                        $btn = $(this);\n\n                        // go to the first item of the linear part\n                        if (!$btn.hasClass(_cssCls.disabled)) {\n                            $btn.addClass(_cssCls.disabled);\n                            jump($btn);\n                        }\n                    }\n\n                });\n\n                // click on a filter button\n                $filterBar.on('click' + _selectors.component, _selectors.filter, function () {\n                    var $btn, mode;\n\n                    if (!self.is('disabled')) {\n                        $btn = $(this);\n                        mode = $btn.data('mode');\n\n                        // select the button\n                        $filters.removeClass(_cssCls.active);\n                        $component.removeClass(_cssCls.collapsed);\n                        $btn.addClass(_cssCls.active);\n\n                        // filter the items\n                        self.filter(mode);\n\n                        //after filtering, ensure that the active item (if exists) is visible\n                        self.autoScroll();\n                    }\n                });\n\n                this.update(map, context);\n            });\n\n        // set default filter\n        navigator.currentFilter = 'all';\n\n        // the component will be ready\n        return navigator.init(config);\n    }\n\n    return navigatorFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Review panel\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/review/review',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/plugins/navigation/review/navigator'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, mapHelper, navigatorFactory) {\n    'use strict';\n\n    /**\n     * The display states of the buttons\n     */\n    var buttonData = {\n        setFlag: {\n            control: 'set-item-flag',\n            title: __('Flag the current item for later review'),\n            icon: 'anchor',\n            text: __('Flag for Review')\n        },\n        unsetFlag: {\n            control: 'unset-item-flag',\n            title: __('Do not flag the current item for later review'),\n            icon: 'anchor',\n            text: __('Unflag for Review')\n        },\n        showReview: {\n            control: 'show-review',\n            title: __('Show the review screen'),\n            icon: 'right',\n            text: __('Show Review')\n        },\n        hideReview: {\n            control: 'hide-review',\n            title: __('Hide the review screen'),\n            icon: 'left',\n            text: __('Hide Review')\n        }\n    };\n\n    /**\n     * Gets the definition of the flagItem button related to the context\n     * @param {Object} context - the test context\n     * @returns {Object}\n     */\n    function getFlagItemButtonData(context) {\n        var dataType = context.itemFlagged ? 'unsetFlag' : 'setFlag';\n        return buttonData[dataType];\n    }\n\n    /**\n     * Gets the definition of the toggleNavigator button related to the context\n     * @param {Object} navigator - the navigator component\n     * @returns {Object}\n     */\n    function getToggleButtonData(navigator) {\n        var dataType = navigator.is('hidden') ? 'showReview' : 'hideReview';\n        return buttonData[dataType];\n    }\n\n    /**\n     * Update the button based on the provided data\n     * @param {Component} button - the element to update\n     * @param {Object} data - the button data\n     */\n    function updateButton(button, data) {\n        var $button = button.getElement();\n        if (button.is('rendered')) {\n            if ($button.data('control') !== data.control) {\n                $button\n                    .data('control', data.control)\n                    .attr('title', data.title);\n\n                $button.find('.icon').attr('class', 'icon icon-' + data.icon);\n                $button.find('.text').text(data.text);\n\n                if (_.contains(data.control, 'flag')) {\n                    if (button.is('active')) {\n                        button.turnOff();\n                    } else {\n                        button.turnOn();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if the current context allows to mark the item for review\n     * @param {Object} testRunner\n     * @returns {Boolean}\n     */\n    function canFlag(testRunner) {\n        var context = testRunner.getTestContext();\n        var map = testRunner.getTestMap();\n        var item = mapHelper.getItemAt(map, context.itemPosition);\n        return !!(!context.isLinear && context.options.markReview && !(item && item.informational));\n    }\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n        name: 'review',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testContext = testRunner.getTestContext();\n            var testMap = testRunner.getTestMap();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var navigatorConfig = testConfig.review || {};\n            var previousItemPosition;\n\n            /**\n             * Tells if the component is enabled\n             * @returns {Boolean}\n             */\n            function isPluginAllowed() {\n                var context = testRunner.getTestContext();\n                return navigatorConfig.enabled && context && context.options && context.options.reviewScreen;\n            }\n\n            /**\n             * Mark an item for review\n             * @param {Number} position\n             * @param {Boolean} flag\n             * @returns {Promise}\n             */\n            function flagItem(position, flag) {\n                self.disable();\n\n                return testRunner.getProxy()\n                    .callTestAction('flagItem', {\n                        position: position,\n                        flag: flag\n                    })\n                    .then(function () {\n                        var context = testRunner.getTestContext();\n\n                        // update the state in the context if the flagged item is the current one\n                        if (context.itemPosition === position) {\n                            context.itemFlagged = flag;\n                        }\n\n                        // update the display of the flag button\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\n\n                        // update the item state\n                        self.navigator.setItemFlag(position, flag);\n                        self.enable();\n                    })\n                    .catch(function () {\n                        // rollback on the item flag\n                        self.navigator.setItemFlag(position, !flag);\n                        self.enable();\n                    });\n            }\n\n            /**\n             * Mark the current item for review\n             */\n            function flagCurrentItem() {\n                var context = testRunner.getTestContext();\n                if (self.getState('enabled') !== false) {\n                    flagItem(context.itemPosition, !context.itemFlagged);\n                }\n            }\n\n            /**\n             * Shows/hides the review panel\n             *\n             * @param [{Boolean} forcedState], true will show the panel\n             */\n            function togglePanel(forcedState) {\n                var isHidden = _.isUndefined(forcedState) ? self.navigator.is('hidden') : forcedState;\n                if (isHidden) {\n                    self.explicitlyHidden = false;\n                    self.navigator.show();\n                } else {\n                    self.explicitlyHidden = true;\n                    self.navigator.hide();\n                }\n                updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n            }\n\n            this.navigator = navigatorFactory(navigatorConfig, testMap, testContext)\n                .on('selected', function(position, previousPosition){\n                    previousItemPosition = previousPosition;\n                })\n                .on('jump', function (position) {\n                    if (self.getState('enabled') !== false) {\n                        self.disable();\n                        testRunner.jump(position, 'item');\n                    }\n                })\n                .on('flag', function (position, flag) {\n                    if (self.getState('enabled') !== false) {\n                        flagItem(position, flag);\n                    }\n                })\n                .render();\n\n            // restore current item in the navigator if movement not allowed\n            testRunner.on('alert.notallowed', function() {\n                self.navigator.select(previousItemPosition);\n            });\n\n            this.explicitlyHidden = false;\n\n            // register buttons in the toolbox component\n            this.toggleButton = this.getAreaBroker().getToolbox().createEntry(getToggleButtonData(this.navigator));\n            this.toggleButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-reviewpanel');\n            });\n\n            this.flagItemButton = this.getAreaBroker().getToolbox().createEntry(getFlagItemButtonData(testContext));\n            this.flagItemButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-flagitem');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.flag) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.flag, this.getName(), true), function () {\n                        testRunner.trigger('tool-flagitem');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-reviewpanel');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            if (!isPluginAllowed()) {\n                this.hide();\n            }\n\n            //disabled by default\n            this.disable();\n\n            togglePanel(testConfig.review.defaultOpen);\n\n            //change plugin state\n            testRunner\n                .on('render', function () {\n                    if (isPluginAllowed()) {\n                        self.show();\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n                    } else {\n                        self.hide();\n                    }\n                })\n                .on('loaditem', function () {\n                    var context = testRunner.getTestContext();\n                    var map = testRunner.getTestMap();\n\n                    if (isPluginAllowed()) {\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\n                        self.navigator\n                            .update(map, context)\n                            .updateConfig({\n                                canFlag: !context.isLinear && context.options.markReview\n                            });\n                        self.show();\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n                    } else {\n                        self.hide();\n                    }\n                })\n                .on('enabletools', function () {\n                    if (isPluginAllowed()) {\n                        self.enable();\n                    }\n                })\n                .on('disabletools', function () {\n                    if (isPluginAllowed()) {\n                        self.disable();\n                    }\n                })\n                .on('tool-flagitem', function () {\n                    if (isPluginAllowed() && canFlag(testRunner)) {\n                        flagCurrentItem();\n                    }\n                })\n                .on('tool-reviewpanel', function () {\n                    if (isPluginAllowed() && self.getState('enabled')) {\n                        togglePanel();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var areaBroker = this.getAreaBroker();\n            var $panelContainer = areaBroker.getPanelArea();\n            $panelContainer.append(this.navigator.getElement());\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            this.navigator.destroy();\n        },\n\n        /**\n         * Enables the button\n         */\n        enable: function enable() {\n            var testRunner = this.getTestRunner();\n            var testContext = testRunner.getTestContext();\n\n            this.flagItemButton.enable();\n            this.toggleButton.enable();\n            this.navigator.enable();\n            if (testContext.itemFlagged) {\n                this.flagItemButton.turnOn();\n            } else {\n                this.flagItemButton.turnOff();\n            }\n        },\n\n        /**\n         * Disables the button\n         */\n        disable: function disable() {\n            this.flagItemButton.disable();\n            this.flagItemButton.turnOff();\n\n            this.toggleButton.disable();\n\n            this.navigator.disable();\n        },\n\n        /**\n         * Shows the button\n         */\n        show: function show() {\n            var testRunner = this.getTestRunner();\n            if (canFlag(testRunner)) {\n                this.flagItemButton.show();\n            } else {\n                this.flagItemButton.hide();\n            }\n            this.toggleButton.show();\n\n            if (!this.explicitlyHidden) {\n                this.navigator.show();\n            } else {\n                this.navigator.hide();\n            }\n        },\n\n        /**\n         * Hides the button\n         */\n        hide: function hide() {\n            this.flagItemButton.hide();\n            this.toggleButton.hide();\n            this.navigator.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Skip\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/skip',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\n    'use strict';\n\n    /**\n     * The display of the skip\n     */\n    var buttonData = {\n        skip : {\n            control : 'skip',\n            title   : __('Skip  and go to the next item'),\n            icon    : 'external',\n            text    : __('Skip')\n        },\n        end : {\n            control : 'skip-end',\n            title   : __('Skip and go to the end of the test'),\n            icon    : 'external',\n            text    : __('Skip and end test')\n        }\n    };\n\n    /**\n     * Create the button based on the current context\n     * @param {Object} context - the test context\n     * @returns {jQueryElement} the button\n     */\n    var createElement = function createElement(context){\n        var dataType = context.isLast ? 'end' : 'skip';\n        return $(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\n     * Update the button based on the context\n     * @param {jQueryElement} $element - the element to update\n     * @param {Object} context - the test context\n     */\n    var updateElement = function updateElement($element, context){\n        var dataType = context.isLast ? 'end' : 'skip';\n        if($element.data('control') !== buttonData[dataType].control){\n\n            $element.data('control', buttonData[dataType].control)\n                    .attr('title', buttonData[dataType].title)\n                    .find('.text').text(buttonData[dataType].text);\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'skip',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            var toggle = function toggle(){\n                var context = testRunner.getTestContext();\n                if(context.options.allowSkipping === true){\n                    self.show();\n                    return true;\n                }\n\n                self.hide();\n                return false;\n            };\n\n            function doSkip() {\n                testRunner.skip();\n            }\n\n            this.$element = createElement(testRunner.getTestContext());\n\n            this.$element.on('click', function(e){\n                var enable = _.bind(self.enable, self);\n                var context = testRunner.getTestContext();\n\n                e.preventDefault();\n\n                if(self.getState('enabled') !== false){\n                    self.disable();\n                    if(context.options.endTestWarning && context.isLast){\n                        testRunner.trigger(\n                            'confirm.endTest',\n                            messages.getExitMessage(\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                                'test', testRunner),\n                            doSkip, // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n                    } else {\n                        doSkip();\n                    }\n                }\n            });\n\n            toggle();\n            self.disable();\n\n            testRunner\n                .on('loaditem', function(){\n                    if(toggle()){\n                        updateElement(self.$element, testRunner.getTestContext());\n                    }\n                })\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * http://www.imsglobal.org/question/qtiv2p2p1/QTIv2p2p1-ASI-InformationModelv1p0/imsqtiv2p2p1_asi_v1p0_InfoModelv1p0.html#DerivedCharacteristic_ItemSessionControl.Attr_validateResponses\n *\n * This attribute controls the behaviour of delivery engines when the candidate\n * submits an invalid response. An invalid response is defined to be a response\n * which does not satisfy the constraints imposed by the interaction with which\n * it is associated (see interaction for more information). When\n * validateResponses is turned on (true) then the candidates are not allowed to\n * submit the item until they have provided valid responses for all\n * interactions. When turned off (false) invalid responses may be accepted by\n * the system. The value of this attribute is only applicable when the item is\n * in a testPart with individual submission mode (see Navigation and\n * Submission).\n */\n\ndefine('taoQtiTest/runner/plugins/navigation/validateResponses',[\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/currentItem'\n], function(\n    _,\n    __,\n    pluginFactory,\n    currentItemHelper\n) {\n    'use strict';\n\n    /**\n     * Plugin\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'validateResponses',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         * @returns {this}\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n\n            testRunner\n            .before('move', function () {\n                var testContext = testRunner.getTestContext();\n\n                if (testContext.enableValidateResponses &&  testContext.validateResponses) {\n                    this.trigger('disablenav disabletools');\n\n                    return new Promise(function (resolve, reject) {\n                        if(_.size(currentItemHelper.getDeclarations(testRunner)) === 0){\n                            return resolve();\n                        }\n                        if (currentItemHelper.isAnswered(testRunner, false)) {\n                            return resolve();\n                        }\n                        if (!testRunner.getState('alerted.notallowed')) { // Only show one alert for itemSessionControl\n                            testRunner.setState('alerted.notallowed', true);\n                            testRunner.trigger(\n                                'alert.notallowed',\n                                __('A valid response to this item is required.'),\n                                function () {\n                                    testRunner.trigger('resumeitem');\n                                    reject();\n                                    testRunner.setState('alerted.notallowed', false);\n                                }\n                            );\n                        }\n                    });\n                }\n\n            });\n\n            return this;\n        }\n    });\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Warn the test taker before closing the browser window\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/warnBeforeLeaving',[\n    'i18n',\n    'taoTests/runner/plugin'\n], function (__, pluginFactory) {\n    'use strict';\n\n    /**\n     * There's only a few chance to have this message displayed.\n     * Most browsers doesn't support custom message anymore.\n     * See https://www.chromestatus.com/feature/5349061406228480\n     */\n    var warnMessage = __('Please confirm you want to leave the test.');\n\n    /**\n     * The beforeunload listener\n     * @param {Event} e\n     * @returns {String} the custom message (for some browser, just need to be a string)\n     */\n    var warnListener = function warnListener(e){\n        e.returnValue = warnMessage;\n        return warnMessage;\n    };\n\n    /**\n     * Plugin factory\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'warnBeforeLeaving',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         */\n        init: function init() {\n            this.enable();\n        },\n\n        /**\n         * Destroy plugin (called during runner's destruction)\n         */\n        destroy : function destroy(){\n            this.disable();\n        },\n\n        /**\n         * Enables the warning\n         */\n        enable : function enable(){\n            window.addEventListener('beforeunload', warnListener);\n        },\n\n        /**\n         * Disables the warning\n         */\n        disable : function disable(){\n            window.removeEventListener('beforeunload', warnListener);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/security/disableRightClick',[\n    'taoTests/runner/plugin'\n], function (pluginFactory) {\n    'use strict';\n\n    return pluginFactory({\n\n        name: 'disableRightClick',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var rightClickEvents = ['contextmenu', 'mousedown', 'mouseup'];\n\n            rightClickEvents.forEach(function(eventName) {\n                window.document.addEventListener(eventName, function disableRightClick(event) {\n                    if (event.button === 2) {\n                        event.preventDefault();\n                    }\n                });\n            });\n        }\n    });\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Answer Eliminator Plugin\n *\n * While the platform's answer eliminator works on a per-item base, this variation allows\n * answer elimination on a test level. Essentially it allows to add a class 'eliminable'\n * to a choice interaction, from there the aforementioned item-based behaviour and styling takes\n * over.\n *\n * Alternative styling will be on a per customer basis and should always be published as a recipe\n * in the theme-toolkit.\n *\n * @author Dieter Raber <dieter@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerElimination/eliminator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'eliminator';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultConfig = {\n        // when hiding the buttons, don't remove existing eliminations\n        removeEliminationsOnClose: false,\n        // when showing the buttons, restore previously set eliminations\n        restoreEliminationsOnOpen: false\n    };\n\n\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\n            var testConfig = testRunner.getTestData().config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\n\n            // register the button in the toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'eliminator',\n                title : __('Eliminate choices'),\n                icon : 'eliminate',\n                text : __('Answer Eliminator')\n            });\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isPluginEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-eliminator\n                return !!options.eliminator;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePluginButton() {\n                if (isPluginEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function togglePlugin() {\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                self.$choiceInteractions.toggleClass('eliminable');\n                if (isEliminable()) {\n                    enableEliminator();\n                } else {\n                    disableEliminator();\n                }\n            }\n\n            function isEliminable() {\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                return self.$choiceInteractions.hasClass('eliminable');\n            }\n\n            function enableEliminator() {\n                var $choices;\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                $choices = self.$choiceInteractions.find('.qti-choice');\n\n                self.button.turnOn();\n                self.trigger('start');\n\n                if(config.restoreEliminationsOnOpen) {\n                    $choices.each(function() {\n                        var input = this.querySelector('.real-label input');\n                        if(this.dataset.wasEliminated) {\n                            this.dataset.wasEliminated = null;\n                            this.classList.add('eliminated');\n                            input.setAttribute('disabled', 'disabled');\n                            input.checked = false;\n                        }\n                    });\n                }\n            }\n\n            function disableEliminator() {\n                var $choices;\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                $choices = self.$choiceInteractions.find('.qti-choice');\n\n                self.$choiceInteractions.removeClass('eliminable');\n                self.button.turnOff();\n                self.trigger('end');\n\n                $choices.each(function() {\n                    if(this.classList.contains('eliminated')) {\n                        this.dataset.wasEliminated = true;\n                        this.classList.remove('eliminated');\n                        this.querySelector('.real-label input').removeAttribute('disabled');\n                    }\n                });\n            }\n\n            //add a new mask each time the button is pressed\n            this.button.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePluginButton)\n                .on('renderitem', function conditionalInit() {\n                    // show button only when in the presence of choice interactions\n                    self.$choiceInteractions = $container.find('.qti-choiceInteraction');\n                    if(!self.$choiceInteractions.length) {\n                        self.hide();\n                        return;\n                    }\n                    if (isPluginEnabled()) {\n                        self.show();\n                    }\n                })\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    disableEliminator();\n                })\n\n                // commands that controls the plugin\n                .on(actionPrefix + 'toggle', function () {\n                    if (isPluginEnabled()) {\n                        togglePlugin();\n                    }\n                })\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\n                .on('tool-answer-masking-toggle', function () {\n                    if (isEliminable()) {\n                        disableEliminator();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"answer-mask\\\">\\n    <span class=\\\"answer-mask-toggle\\\"></span>\\n</div>\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/answerMasking',[\n    'lodash',\n    'jquery',\n    'core/statifier',\n    'ui/component',\n    'tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask'\n], function(_, $, statifier, componentFactory, maskTpl) {\n    'use strict';\n\n    var ns = '.answerMasking';\n\n    /**\n     * @param {jQuery} $contentArea - DOM element containing the rendered item\n     */\n    return function answerMaskingFactory($contentArea) {\n        var answerMasking,\n            allMasks = [],\n\n            maskApi = {\n                /**\n                 * Toggle mask visibility\n                 * @returns {component}\n                 */\n                toggle: function toggle() {\n                    if (this.is('masked')) {\n                        return this.reveal();\n                    } else {\n                        return this.mask();\n                    }\n                },\n\n                /**\n                 * Show the choice under the current mask\n                 * @returns {component}\n                 */\n                reveal: function reveal() {\n                    var $container = this.getContainer();\n                    $container.removeClass('masked');\n                    $container.find('input').removeAttr('disabled');\n\n                    this.setState('masked', false);\n\n                    return this;\n                },\n\n                /**\n                 * Cover the whole choice with the mask\n                 * @returns {component}\n                 */\n                mask: function mask() {\n                    var $container = this.getContainer();\n                    $container.addClass('masked');\n                    $container.find('input').attr('disabled', 'disabled');\n\n                    this.setState('masked', true);\n\n                    return this;\n                }\n            };\n\n        /**\n         * Creates a ui/component to serve as a mask over a QTI Choice\n         * @param {jQuery} $container - the qti-choice element\n         * @returns {component}\n         */\n        function createMask($container) {\n            return componentFactory(maskApi)\n                .setTemplate(maskTpl)\n                .on('render', function() {\n                    var self = this,\n                        $component = this.getElement();\n\n                    $component.on('click' + ns, function(e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        self.toggle();\n                    });\n                })\n                .on('destroy', function() {\n                    var $component = this.getElement();\n                    $component.off(ns);\n                })\n                .init()\n                .render($container)\n                .mask();\n        }\n\n        /**\n         * The answer masking helper\n         */\n        answerMasking = {\n            /**\n             * Enable the answer masking functionality by creating masks over the Qti Choices\n             */\n            enable: function enable() {\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction'),\n                    $qtiChoices = $contentArea.find('.qti-choice');\n\n                allMasks = [];\n\n                $choiceInteractions.addClass('maskable');\n\n                $qtiChoices.each(function () {\n                    var $choice = $(this);\n                    allMasks.push(createMask($choice));\n                });\n\n                this.setState('enabled', true);\n            },\n\n            /**\n             * Remove any answerMasking-related markup from the rendered item\n             */\n            disable: function disable() {\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction');\n                $choiceInteractions.removeClass('maskable');\n\n                allMasks.forEach(function(mask) {\n                    mask.reveal(); // remove class on container\n                    mask.destroy();\n                });\n\n                allMasks = [];\n\n                this.setState('enabled', false);\n            },\n\n            /**\n             * Return the current state of the masks\n             * @returns {Boolean[]} - true if the choice is masked, false if the choice is revealed\n             */\n            getMasksState: function getMasksState() {\n                var state = allMasks.map(function (mask) {\n                    return mask.is('masked');\n                });\n                return state;\n            },\n\n            /**\n             * Restore a previously saved state for the masked choices\n             * @param {Boolean[]} state - array of boolean, most probably given by the getMasksState method\n             */\n            setMasksState: function setMasksState(state) {\n                state = state || [];\n\n                state.forEach(function (masked, index) {\n                    var mask = allMasks[index];\n\n                    if (_.isObject(mask) && _.isFunction(mask.reveal) && ! masked) {\n                        mask.reveal();\n                    }\n                });\n            }\n        };\n\n        statifier(answerMasking);\n\n        return answerMasking;\n    };\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/answerMasking/answerMasking'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, answerMaskingFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'answer-masking';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Stores the masking state for each item in the test\n     * @type {Object}\n     */\n    var itemStates = {};\n\n    /**\n     * Default Configuration\n     */\n    var defaultConfig = {\n        restoreStateOnToggle: true,\n        restoreStateOnMove: true\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultConfig),\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\n                $contentArea = this.getAreaBroker().getContentArea();\n\n            var answerMasking = answerMaskingFactory($contentArea);\n\n            function isPluginEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-answerMasking\n                return options.answerMasking && itemContainsChoiceInteraction();\n            }\n\n            function itemContainsChoiceInteraction() {\n                var $container = self.getAreaBroker().getContentArea().parent();\n                return $container.find('.qti-choiceInteraction').length;\n            }\n\n            function togglePluginButton() {\n                if (isPluginEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function togglePlugin() {\n                if (! answerMasking.getState('enabled')) {\n                    enableMasking();\n                } else {\n                    disableMasking();\n                }\n            }\n\n            function enableMasking() {\n                var testContext = testRunner.getTestContext(),\n                    itemId = testContext.itemIdentifier;\n\n                answerMasking.enable();\n                if (pluginConfig.restoreStateOnToggle) {\n                    answerMasking.setMasksState(itemStates[itemId]);\n                }\n                self.button.turnOn();\n                self.trigger('start');\n            }\n\n            function disableMasking() {\n                var testContext = testRunner.getTestContext(),\n                    itemId = testContext.itemIdentifier;\n\n                if (answerMasking.getState('enabled')) {\n                    itemStates[itemId] = answerMasking.getMasksState();\n                }\n\n                answerMasking.disable();\n                self.button.turnOff();\n                self.trigger('end');\n            }\n\n            // create buttons\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Answer Masking'),\n                icon: 'result-nok',\n                control: 'answer-masking',\n                text: __('Answer Masking')\n            });\n\n            // attach user events\n            this.button\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger(actionPrefix + 'toggle');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger(actionPrefix + 'toggle');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function() {\n                    var testContext = testRunner.getTestContext(),\n                        itemId = testContext.itemIdentifier;\n\n                    if (! pluginConfig.restoreStateOnMove) {\n                        itemStates[itemId] = [];\n                    }\n\n                    togglePluginButton();\n                })\n                .on('enabletools renderitem', function () {\n                    togglePluginButton(); // we repeat this here as we need the rendered item markup in order to decide whether the plugin is enabled\n                    self.enable();\n                })\n                .on('beforeunloaditem', function() {\n                    disableMasking();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    disableMasking();\n                })\n                .on(actionPrefix + 'toggle', function () {\n                    if (isPluginEnabled()) {\n                        togglePlugin();\n                    }\n                })\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\n                .on('tool-eliminator-toggle', function () {\n                    disableMasking();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"mask\\\">\\n   <div class=\\\"inner\\\"></div>\\n   <div class=\\\"controls\\\">\\n        <a href=\\\"#\\\" class=\\\"view\\\"  title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Preview the covered area\", options) : helperMissing.call(depth0, \"__\", \"Preview the covered area\", options)))\n    + \"\\\"><span class=\\\"icon-preview\\\"></span></a>\\n        <a href=\\\"#\\\" class=\\\"close\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close the mask\", options) : helperMissing.call(depth0, \"__\", \"Close the mask\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\n   </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Create a movable and resizable element in order to mask areas.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/mask',[\n    'lodash',\n    'ui/movableComponent',\n    'tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask'\n], function (_, movableComponent, areaMaskingTpl) {\n    'use strict';\n\n    var defaultConfig = {\n        previewDelay: 3000,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Creates a new masking component\n     * @returns {maskComponent} the component (uninitialized)\n     */\n    function maskingComponentFactory () {\n\n        /**\n         * @typedef {Object} maskComponent\n         */\n        var maskComponent = movableComponent({\n            /**\n             * Preview the content under the masked area\n             * @returns {maskComponent} chains\n             *\n             * @fires maskComponent#preview\n             */\n            preview : function preview(){\n                var self   = this;\n                var delay  = this.config.previewDelay || 1000;\n                if( this.is('rendered') && !this.is('disabled') && !this.is('previewing') ){\n                    this.setState('previewing', true)\n                        .trigger('preview');\n                    _.delay(function(){\n                        self.setState('previewing', false);\n                    }, delay);\n                }\n                return this;\n            }\n        }, defaultConfig);\n\n\n        maskComponent\n            .setTemplate(areaMaskingTpl)\n            .on('render', function(){\n                var self     = this;\n                var $element = this.getElement();\n\n                $element\n                    .on('click touchstart', '.view', function(e){\n                        e.preventDefault();\n                        self.preview();\n                    })\n                    .on('click touchstart', '.close', function(e){\n                        e.preventDefault();\n                        self.destroy();\n                    });\n            });\n\n        return maskComponent;\n    }\n\n    return maskingComponentFactory;\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Area Masking Plugin\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/areaMasking',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/tools/areaMasking/mask'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, maskComponent){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'area-masking';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultConfig = {\n        max : 5,\n        foo : true\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\n            var testConfig = testRunner.getTestData().config || {};\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n\n            function addMask() {\n                maskComponent()\n                    .on('render', function(){\n                        self.masks.push(this);\n                        self.button.turnOn();\n\n                        /**\n                         * @event areaMasking#maskadd\n                         */\n                        self.trigger('maskadd');\n                    })\n                    .on('destroy', function(){\n                        self.masks = _.without(self.masks, this);\n                        if(self.masks.length < config.max){\n                            self.enable();\n                        }\n                        if (self.masks.length === 0) {\n                            self.button.turnOff();\n                            self.trigger('close');\n                        }\n\n                        /**\n                         * @event areaMasking#maskclose\n                         */\n                        self.trigger('maskclose');\n                    })\n                    .init({\n                        x : self.masks.length * 10,\n                        y : self.masks.length * 10\n                    })\n                    .render($container);\n            }\n\n            //keep a ref to all masks\n            this.masks = [];\n\n            // register the element in the Toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'area-masking',\n                text : __('Masking'),\n                title : __('Covers parts of the item'),\n                icon : 'eye-slash'\n            });\n\n            //add a new mask each time the button is pressed\n            this.button.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            this.disable();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext(),\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-areaMasking\n                return !!options.areaMasking;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    //remove all masks\n                    _.invoke(self.masks, 'destroy');\n                })\n                // commands that controls the plugin\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        if (self.masks.length === 0) {\n                            self.trigger('open');\n                        }\n                        if (self.masks.length < config.max) {\n                            addMask();\n                        } else if (config.max === 1) {\n                            _.invoke(self.masks, 'destroy');\n                        }\n                    }\n                });\n\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Calculator\n *\n * @author Sam <sam@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/calculator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'ui/calculator',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, _, __, hider, calculatorFactory, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    var _default = {\n        height : 360,\n        width : 240,\n        top : 50,\n        left : 10,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'calculator',\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var areaBroker = this.getAreaBroker();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var config = pluginsConfig.calculator || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n\n                //to be activated with the special category x-tao-option-calculator\n                return !!options.calculator;\n            }\n\n            /**\n             * Is calculator activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {//allow calculator\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Build the calculator component\n             * @param {Function} [calcTpl] - an optional alternative template for the calculator\n             */\n            function buildCalculator(calcTpl){\n                self.calculator = calculatorFactory(_.defaults({\n                    renderTo: self.$calculatorContainer,\n                    replace: true,\n                    draggableContainer: areaBroker.getContainer(),\n                    alternativeTemplate : calcTpl || null\n                }, _default)).on('show', function () {\n                    self.trigger('open');\n                    self.button.turnOn();\n                }).on('hide', function () {\n                    self.trigger('close');\n                    self.button.turnOff();\n                }).show();\n            }\n\n            /**\n             * Show/hide the calculator\n             */\n            function toggleCalculator() {\n                if (self.getState('enabled') !== false) {\n                    if (self.calculator) {\n                        //just show/hide the calculator widget\n                        if (self.calculator.is('hidden')) {\n                            self.calculator.show();\n                        } else {\n                            self.calculator.hide();\n                        }\n                    } else {\n                        //build calculator widget\n                        if(config.template){\n                            require(['tpl!' + config.template.replace(/\\.tpl$/, '')], function(calcTpl){\n                                buildCalculator(calcTpl);\n                            }, function(){\n                                //in case of error, display the default calculator:\n                                buildCalculator();\n                            });\n                        }else{\n                            buildCalculator();\n                        }\n\n                    }\n                }\n            }\n\n            //build element (detached)\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'calculator',\n                title : __('Open Calculator'),\n                icon : 'table',\n                text : __('Calculator')\n            });\n            this.$calculatorContainer = $('<div class=\"widget-calculator\">');\n\n            //init calculator instance var, it will be created only necessary\n            this.calculator = null;\n\n            //attach behavior\n            this.button.on('click', function (e){\n                //prevent action if the click is made inside the form which is a sub part of the button\n                if($(e.target).closest('.widget-calculator').length){\n                    return;\n                }\n\n                e.preventDefault();\n                testRunner.trigger('tool-calculator');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-calculator');\n                    }, {\n                        avoidInput: true,\n                        allowIn: '.widget-calculator'\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    if(self.calculator){\n                        //destroy calculator to create a new instance of calculator each time\n                        self.calculator.destroy();\n                        self.calculator = null;\n                    }\n                })\n                .on('tool-calculator', function () {\n                    if (isEnabled()) {\n                        toggleCalculator();\n                    }\n                });\n        },\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var areaBroker = this.getAreaBroker();\n            areaBroker.getContainer().append(this.$calculatorContainer);\n        },\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + this.getName());\n\n            this.$calculatorContainer.remove();\n            if(this.calculator){\n                this.calculator.destroy();\n            }\n        },\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n            if(this.calculator){\n                this.calculator.hide();\n            }\n        },\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n            if(this.calculator){\n                this.calculator.hide();\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/comment/comment', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div data-control=\\\"qti-comment\\\" class=\\\"hidden\\\">\\n    <textarea data-control=\\\"qti-comment-text\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Your comment…\", options) : helperMissing.call(depth0, \"__\", \"Your comment…\", options)))\n    + \"\\\"></textarea>\\n    <button data-control=\\\"qti-comment-cancel\\\" class=\\\"btn-info small\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cancel\", options) : helperMissing.call(depth0, \"__\", \"Cancel\", options)))\n    + \"</button>\\n    <button data-control=\\\"qti-comment-send\\\" class=\\\"btn-info small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Send\", options) : helperMissing.call(depth0, \"__\", \"Send\", options)))\n    + \"</button>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Comment form\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/comment/comment',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/stacker',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/tools/comment/comment'\n], function ($, __, pluginFactory, hider, stackerFactory, shortcut, namespaceHelper, commentTpl) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'comment',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var stacker = stackerFactory('test-runner');\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext();\n                return !!context.options.allowComment;\n            }\n\n            /**\n             * Can we comment ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Show/hide the comment panel\n             */\n            function toggleComment() {\n                if (self.getState('enabled') !== false) {\n                    //just show/hide the form\n                    hider.toggle(self.$form);\n                    if (!hider.isHidden(self.$form)) {\n                        //reset the form on each display\n                        self.$input.val('').focus();\n                        self.button.turnOn();\n                        stacker.bringToFront(self.$form);\n                    } else {\n                        self.button.turnOff();\n                    }\n                }\n            }\n\n            // register button in toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control: 'comment',\n                title: __('Leave a comment'),\n                icon: 'tag',\n                text: __('Comment')\n            });\n\n            //get access to controls\n            this.button.on('render', function() {\n                self.$button = self.button.getElement();\n                self.$form = $(commentTpl()).appendTo(self.$button);\n                self.$input = self.$button.find('[data-control=\"qti-comment-text\"]');\n                self.$cancel = self.$button.find('[data-control=\"qti-comment-cancel\"]');\n                self.$submit = self.$button.find('[data-control=\"qti-comment-send\"]');\n\n                stacker.autoBringToFront(self.$form);\n\n                //hide the form without submit\n                self.$cancel.on('click', function () {\n                    hider.hide(self.$form);\n                    self.button.turnOff();\n                });\n\n                //submit the comment, then hide the form\n                self.$submit.on('click', function () {\n                    var comment = self.$input.val();\n\n                    if (comment) {\n                        self.disable();\n                        self.button.turnOff();\n\n                        testRunner.getProxy()\n                            .callTestAction('comment', {\n                                comment: comment\n                            })\n                            .then(function () {\n                                hider.hide(self.$form);\n                                self.enable();\n                            })\n                            .catch(function () {\n                                hider.hide(self.$form);\n                                self.enable();\n                            });\n                    }\n                });\n            });\n\n\n            //attach behavior\n            this.button.on('click', function (e) {\n                //prevent action if the click is made inside the form which is a sub part of the button\n                if ($(e.target).closest('[data-control=\"qti-comment\"]').length) {\n                    return;\n                }\n\n                e.preventDefault();\n                testRunner.trigger('tool-comment');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-comment');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('renderitem enabletools', function () {\n                    self.enable();\n                })\n                .on('unloaditem disabletools', function () {\n                    self.disable();\n                })\n                .on('tool-comment', function () {\n                    if (isEnabled()) {\n                        toggleComment();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            if (this.$form) {\n                hider.hide(this.$form);\n            }\n            this.button.disable();\n            this.button.turnOff();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            if (this.$form) {\n                hider.hide(this.$form);\n            }\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"document-viewer-plugin hidden\\\">\\n    <div class=\\\"viewer-overlay\\\"></div>\\n    <div class=\\\"viewer-panel\\\">\\n        <div class=\\\"viewer-header\\\">\\n            <span class=\\\"viewer-title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n            <span class=\\\"icon icon-close\\\"></span>\\n        </div>\\n        <div class=\\\"viewer-content\\\">\";\n  if (helper = helpers.content) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.content); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n        <div class=\\\"viewer-footer\\\"></div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : View a document\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/documentViewer/documentViewer',[\n    'jquery',\n    'lodash',\n    'ui/hider',\n    'ui/documentViewer',\n    'ui/documentViewer/providers/pdfViewer',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel'\n], function ($, _, hider, viewerFactory, pdfViewer, pluginFactory, panelTpl) {\n    'use strict';\n\n    /**\n     * The name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'documentViewer';\n\n    /**\n     * Shows the panel, trigger the `panelshow` event\n     *\n     * @param plugin\n     */\n    function showPanel(plugin) {\n        hider.show(plugin.controls.$panel);\n        plugin.trigger('panelshow');\n        $(window).on('resize.' + plugin.getName(), _.debounce(_.partial(resizeViewer, plugin), 50));\n    }\n\n    /**\n     * Hides the panel, trigger the `panelhide` event\n     *\n     * @param plugin\n     */\n    function hidePanel(plugin) {\n        hider.hide(plugin.controls.$panel);\n        plugin.trigger('panelhide');\n        $(window).off('resize.' + plugin.getName());\n    }\n\n    /**\n     * Hides the panel if it is visible\n     *\n     * @param plugin\n     * @returns {Boolean} Returns `true` if the panel was visible and has been hidden\n     */\n    function hideIfVisible(plugin) {\n        var isVisible = !hider.isHidden(plugin.controls.$panel, true);\n        if (isVisible) {\n            hidePanel(plugin);\n        }\n        return isVisible;\n    }\n\n    /**\n     * Initializes the event handlers for the panel container\n     *\n     * @param plugin\n     */\n    function initPanelEvents(plugin) {\n        var namespace = '.' + plugin.getName();\n        var stopEvents = ['click', 'mousedown', 'mouseup', 'touchstart', 'touchend', 'keyup', 'keydow', 'keypress', 'scroll', 'drop'].join(namespace + ' ') + namespace;\n        var hideViewer = _.partial(hidePanel, plugin);\n\n        function stopPropagation(e) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n        }\n\n        plugin.controls.$overlay\n            .off(namespace)\n            .on('click' + namespace, hideViewer)\n            .on(stopEvents, stopPropagation);\n\n        plugin.controls.$panel\n            .off(namespace)\n            .on('click' + namespace, '.icon-close', hideViewer)\n            .on(stopEvents, stopPropagation);\n    }\n\n    /**\n     * Resizes the viewer to fit the panel content area\n     * @param plugin\n     */\n    function resizeViewer(plugin) {\n        var $content = plugin.controls.$content;\n        plugin.viewer.setSize($content.width(), $content.height());\n    }\n\n    // all document viewers need to be registered\n    viewerFactory.registerProvider('pdf', pdfViewer);\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var $panel = $(panelTpl());\n\n            /**\n             * @param {Object} data\n             * @param {String} data.label - document title\n             * @param {String} data.document - document url\n             */\n            function displayViewer(data) {\n                if (self.getState('enabled') !== false) {\n                    showPanel(self);\n                    self.controls.$title.text(data.label);\n                    resizeViewer(self);\n                    self.viewer.load(data.document, 'pdf');\n                }\n            }\n\n            this.controls = {\n                $panel: $panel,\n                $overlay: $panel.find('.viewer-overlay'),\n                $title: $panel.find('.viewer-title'),\n                $content: $panel.find('.viewer-content')\n            };\n\n            this.viewer = viewerFactory({\n                renderTo: this.controls.$content,\n                replace: true,\n                fitToWidth: true,\n                allowSearch: true\n            });\n\n            //update plugin state based on changes\n            testRunner\n                .on('renderitem enabletools', function () {\n                    self.enable();\n                })\n                .on('renderitem', function () {\n                    self.getAreaBroker().getContentArea()\n                        .append(self.controls.$panel)\n                        .off('.' + self.getName())\n                        .on('viewDocument.' + self.getName(), function (event) {\n                            var data = event.originalEvent.detail;\n                            displayViewer(data);\n                        });\n                    initPanelEvents(self);\n                })\n                .on('move', function () {\n                    hideIfVisible(self);\n                })\n                .on('skip', function () {\n                    hideIfVisible(self);\n                })\n                .on('unloaditem disabletools', function () {\n                    self.disable();\n                })\n                .on('tool-documentViewer', function(data) {\n                    displayViewer(data);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.getAreaBroker().getContentArea().off('.' + this.getName());\n\n            if (this.viewer) {\n                this.viewer.destroy();\n            }\n\n            if (this.controls.$panel) {\n                this.controls.$panel.remove();\n            }\n\n            this.viewer = null;\n            this.controls = {};\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            hideIfVisible(this);\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            hideIfVisible(this);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n/**\n * This plugin allows the test taker to select text inside an item.\n * Highlight is preserved when navigating between items\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/highlighter/highlighter',[\n    'lodash',\n    'jquery',\n    'ui/highlighter'\n], function (\n    _,\n    $,\n    highlighterFactory\n) {\n    'use strict';\n    var selection;\n\n    if (!window.getSelection) throw new Error('Browser does not support getSelection()');\n\n    selection = window.getSelection();\n\n    /**\n     * Returns an array of active ranges.\n     * If browser doesn't support multiple Ranges, returns only the first range\n     * see note on https://w3c.github.io/selection-api/#methods\n     *\n     * @returns {Range[]}\n     */\n    function getAllRanges() {\n        var i, allRanges = [];\n\n        for (i = 0; i < selection.rangeCount; i++) {\n            allRanges.push(selection.getRangeAt(i));\n        }\n        return allRanges;\n    }\n\n    /**\n     * The highlighter Factory\n     */\n    return function(testRunner) {\n\n        /**\n         * Are we in highlight mode, meaning that each new selection is automatically highlighted\n         * without having to press any button\n         * @type {boolean}\n         */\n        var isHighlighting = false;\n\n        /**\n         * Store, for each item, an array containing the its highlight index\n         * @type {Object}\n         */\n        var itemsHighlights = {};\n\n        /**\n         * The helper that does the highlight magic\n         */\n        var highlightHelper = highlighterFactory({\n            className: 'txt-user-highlight',\n            containerSelector: '.qti-itemBody'\n        });\n\n        // add event to automatically highlight the recently made selection if needed\n        $(document).on('mouseup.highlighter', function() {\n            if (isHighlighting && !selection.isCollapsed) {\n                highlightHelper.highlightRanges(getAllRanges());\n                selection.removeAllRanges();\n            }\n        });\n\n        /**\n         * The highlighter instance\n         */\n        return {\n            /**\n             * toggle highlighting mode on and off\n             * @param {Boolean} bool - wanted state\n             */\n            toggleHighlighting: function toggleHighlighting(bool) {\n                isHighlighting = bool;\n                if (isHighlighting) {\n                    testRunner.trigger('plugin-start.highlighter');\n                } else {\n                    testRunner.trigger('plugin-end.highlighter');\n                }\n            },\n\n            /**\n             * Either highlight the current or selection, or toggle highlighting mode\n             */\n            trigger: function trigger() {\n                if (!isHighlighting) {\n                    if (!selection.isCollapsed) {\n                        testRunner.trigger('plugin-start.highlighter');\n                        highlightHelper.highlightRanges(getAllRanges());\n                        testRunner.trigger('plugin-end.highlighter');\n                        selection.removeAllRanges();\n                    } else {\n                        this.toggleHighlighting(true);\n                    }\n                } else {\n                    this.toggleHighlighting(false);\n                }\n            },\n\n            /**\n             * save the highlight index for the current item\n             * @param itemId\n             */\n            saveHighlight: function saveHighlight(itemId) {\n                var index = highlightHelper.getHighlightIndex();\n                if (index && index.length > 0) {\n                    itemsHighlights[itemId] = index;\n                }\n            },\n\n\n            /**\n             * restore the highlight index on the current item\n             * @param itemId\n             */\n            restoreHighlight: function restoreHighlight(itemId) {\n                var index = itemsHighlights[itemId];\n                if (index && index.length > 0) {\n                    highlightHelper.highlightFromIndex(index);\n                }\n            },\n\n            /**\n             * remove all highlights\n             */\n            clearHighlights: function clearHighlights() {\n                highlightHelper.clearHighlights();\n                selection.removeAllRanges();\n            }\n        };\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Text Highlighter\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/highlighter/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/highlighter/highlighter'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, highlighterFactory) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'highlighter',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            var highlighter = highlighterFactory(testRunner);\n\n            // create buttons\n            this.buttonMain = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Highlight Text'),\n                icon: 'text-marker',\n                control: 'highlight-trigger',\n                text: __('Highlight')\n            });\n\n            this.buttonRemove = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Clear all active highlights'),\n                icon: 'result-nok',\n                control: 'highlight-clear',\n                text: __('Clear Highlights')\n            });\n\n            // attach user events\n            this.buttonMain\n                .on('mousedown', function(e) { // using 'mousedown' instead of 'click' to avoid losing current selection\n                    e.preventDefault();\n                    testRunner.trigger('tool-highlight');\n                });\n\n            this.buttonRemove\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger('tool-highlight-remove');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-highlight');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-highlighter\n                return !!options.highlighter;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('renderitem', function() {\n                    var testContext = testRunner.getTestContext();\n                    highlighter.restoreHighlight(testContext.itemIdentifier);\n                })\n                .on('beforeunloaditem', function() {\n                    var testContext = testRunner.getTestContext();\n                    highlighter.saveHighlight(testContext.itemIdentifier);\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    highlighter.toggleHighlighting(false);\n                })\n                .on('tool-highlight', function () {\n                    if (isEnabled()) {\n                        highlighter.trigger();\n                    }\n                })\n                .on('tool-highlight-remove', function () {\n                    highlighter.clearHighlights();\n                })\n                .on('plugin-start.highlighter', function() {\n                    self.buttonMain.turnOn();\n                })\n                .on('plugin-end.highlighter', function() {\n                    self.buttonMain.turnOff();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            $(document).off('.highlighter');\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.buttonMain.enable();\n            this.buttonRemove.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.buttonMain.disable();\n            this.buttonRemove.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.buttonMain.show();\n            this.buttonRemove.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.buttonMain.hide();\n            this.buttonRemove.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : item Theme Switcher\n *\n * @author\n */\ndefine('taoQtiTest/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/themes',\n    'util/shortcut',\n    'util/namespace'\n], function ($, _, __, pluginFactory, hider, themeHandler, shortcut, namespaceHelper) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'itemThemeSwitcher',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var themesConfig = themeHandler.get('items') || {};\n            var state = {\n                availableThemes: [],\n                defaultTheme: '',\n                selectedTheme: ''\n            };\n\n            /**\n             * Load the selected theme\n             * @param themeId\n             */\n            function changeTheme(themeId) {\n                var $qtiItem = $('.qti-item');\n                state.selectedTheme = themeId;\n\n                if ($qtiItem) {\n                    _.defer(function(){\n                        $qtiItem.trigger('themechange', [state.selectedTheme]);\n                    });\n                }\n            }\n\n            //init plugin state\n            if (themesConfig) {\n                if (themesConfig.default) {\n                    state.defaultTheme = themesConfig.default;\n                    state.selectedTheme = themesConfig.default;\n                }\n                if (themesConfig.available) {\n                    _.forEach(themesConfig.available, function (theme) {\n                        state.availableThemes.push({\n                            id: theme.id,\n                            label: theme.name\n                        });\n                    });\n                }\n            }\n\n            // register toolbox button\n            this.menuButton = this.getAreaBroker().getToolbox().createMenu({\n                control: 'color-contrast',\n                title: __('Change the current color preset'),\n                icon: 'contrast',\n                text: __('Contrast')\n            });\n\n            this.menuButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-themeswitcher-toggle');\n            });\n\n\n            // register menu entries\n            state.availableThemes.forEach(function (theme) {\n                var themeEntry = self.getAreaBroker().getToolbox().createEntry({\n                    control: theme.id,\n                    title: theme.label,\n                    icon: 'preview',\n                    text: __(theme.label)\n                });\n\n                themeEntry.setMenuId('color-contrast');\n\n                themeEntry.on('click', function(e) {\n                    var themeId = this.config.control;\n                    e.preventDefault();\n\n                    self.menuButton.turnOffAll();\n                    this.turnOn();\n\n                    changeTheme(themeId);\n                });\n\n                if (state.defaultTheme === theme.id) {\n                    themeEntry.on('render', function() {\n                        this.turnOn();\n                    });\n                }\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-themeswitcher-toggle');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function() {\n                    self.show();\n                })\n                .on('renderitem', function () {\n                    self.enable();\n                    changeTheme(state.selectedTheme);\n                })\n                .on('enabletools', function() {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                })\n                .on('tool-themeswitcher-toggle', function () {\n                    if (self.getState('enabled') !== false) {\n                        self.menuButton.toggleMenu();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.menuButton.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.menuButton.disable();\n\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.menuButton.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.menuButton.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * A compound mask is a mask built with multiple ui/components that interacts with each other.\n * The compound mask itself is not a ui/component but mimic most of its API.\n *\n * Most mask transformations (resize, drag) are achieved by updating a very simple transform model (position, dimensions)\n * which is latter applied to the actual individual components at a proper time\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/lineReader/compoundMask',[\n    'jquery',\n    'lodash',\n    'core/statifier',\n    'core/eventifier',\n    'ui/component',\n    'ui/component/placeable',\n    'ui/component/draggable',\n    'ui/component/resizable',\n    'ui/component/stackable'\n], function(\n    $,\n    _,\n    statifier,\n    eventifier,\n    componentFactory,\n    makePlaceable,\n    makeDraggable,\n    makeResizable,\n    makeStackable\n) {\n    'use strict';\n\n    var defaultDimensions = {\n        outerWidth:  600,\n        outerHeight: 400,\n        innerWidth:  500,\n        innerHeight: 20\n    };\n    var defaultPosition = {\n        outerX: 0,\n        outerY: 0,\n        innerX: 50,\n        innerY: 50\n    };\n    var defaultOptions = {\n        dragMinWidth: 10,\n        dragMinHeight: 10,\n        resizeHandleSize: 10,\n        innerDragHeight: 20\n    };\n    var stackingOptions = {\n        stackingScope: 'test-runner'\n    };\n    var constrains;\n\n    /**\n     * @param {Object} options\n     * @param {Number} options.resizeHandleSize - size of the resize handlers on each resizable edge\n     * @param {Number} options.dragMinWidth - minimal width for the draggable area of each component.\n     * @param {Number} options.dragMinHeight - minimal height for the draggable area of each component.\n     * @param {Number} options.innerDragHeight - height of the inner window drag handle\n     * @param {Object} dimensions\n     * @param {Number} dimensions.outerWidth - overall mask width\n     * @param {Number} dimensions.outerHeight - overall mask height\n     * @param {Number} dimensions.innerWidth - inner window width\n     * @param {Number} dimensions.innerHeight - inner window height\n     * @param {Number} position\n     * @param {Number} position.outerX - overall mask x\n     * @param {Number} position.outerY - overall mask y\n     * @param {Number} position.innerX - inner window mask x\n     * @param {Number} position.innerY - inner window mask y\n     */\n    return function compoundMaskFactory(options, dimensions, position) {\n        var compoundMask,\n            allParts = {},\n            innerDrag,\n            closer,\n            visualGuides = {};\n\n        /**\n         * ============================================\n         * Definition of Mask & Overlay component types\n         * ============================================\n         */\n\n        /**\n         * Create a mask component. They are used for masking (obviously) but also resizing the compound mask\n         * @param {Object} maskConfig\n         * @param {String} maskConfig.id\n         * @param {Function} maskConfig.place - size and position the mask according to the transform model\n         * @param {Function} maskConfig.placeOverlay - size and position the overlay according to the transform model\n         * @param {Function} maskConfig.beforeResize - used to set the resize limit depending on which edge the resizing occurs\n         * @param {Function} maskConfig.onResize - how the resize affect the transform model\n         * @param {Object} maskConfig.edges - Interact configuration to specify which edges can be used for resizing\n         * @param {Number} maskConfig.minWidth\n         * @param {Number} maskConfig.minHeight\n         */\n        function createMask(maskConfig) {\n            var mask,\n                maskAPI = {\n                    place: maskConfig.place,\n                    placeOverlay: maskConfig.placeOverlay,\n\n                    styleResizableEdges: function styleResizableEdges() {\n                        var $element = this.getElement();\n                        _.forOwn(this.config.edges, function (isResizable, edgeId) {\n                            if (isResizable) {\n                                $element.addClass('border-' + edgeId);\n                            }\n                        });\n                    }\n                };\n\n            mask = componentFactory(maskAPI, maskConfig);\n            makeResizable(mask);\n            makeStackable(mask, stackingOptions);\n\n            return mask\n                .on('render', function() {\n                    var $element = this.getElement();\n\n                    this.styleResizableEdges();\n\n                    $element\n                        .addClass('line-reader-mask ' + maskConfig.id)\n                        .on('mousedown', function() {\n                            bringAllToFront();\n                        });\n\n                    // uncomment this to see what's going on with masks:\n                    // $element.css({ border: '1px solid olive'});\n                })\n                .on('resizestart', function () {\n                    innerDrag.hide();\n                    closer.hide();\n                    invokeOnOverlays('hide');\n                    invokeOnMasks('setState', ['resizing', true]);\n                })\n                .on('beforeresize', maskConfig.beforeResize || _.noop)\n                .on('resize', maskConfig.onResize || _.noop)\n                .on('resizeend', function () {\n                    applyTransformsToOverlays();\n                    applyTransformsToInnerDrag();\n                    applyTransformsToCloser();\n\n                    invokeOnMasks('setState', ['resizing', false]);\n                    invokeOnOverlays('show');\n                    innerDrag.show();\n                    closer.show();\n                })\n                .init();\n        }\n\n\n        /**\n         * Create a overlay component. Overlay are invisible and are used for dragging.\n         * When clicked, the whole mask is hidden and only the overlay is displayed, after being resized to fit the whole mask surface\n         * this allows for performance improvement as well as giving the dragged element proper dragging boundaries.\n         * Also, visual guides are added, like a fake inner window, during the drag\n         * @param {Object} overlayConfig\n         * @param {String} overlayConfig.id\n         */\n        function createOverlay(overlayConfig) {\n            var overlay,\n                overlayAPI = {\n                    transformOverlay: function transformOverlay() {\n                        var $element = this.getElement();\n\n                        this._sizeBackup = this.getSize();\n                        this._posBackup = this.getPosition();\n\n                        this.setSize(dimensions.outerWidth, dimensions.outerHeight)\n                            .moveTo(position.outerX, position.outerY);\n                        $element.addClass('moving');\n\n                        this.setState('transformed', true);\n                    },\n\n                    restoreOverlay: function restoreOverlay() {\n                        var $element = this.getElement();\n\n                        if (this.is('transformed')) {\n\n                            this.setSize(this._sizeBackup.width, this._sizeBackup.height)\n                                .moveTo(this._posBackup.x, this._posBackup.y);\n                            $element.removeClass('moving');\n\n                            this._sizeBackup = null;\n                            this._posBackup = null;\n\n                            this.setState('transformed', false);\n                        }\n                    },\n\n                    appendVisualGuides: function appendVisualGuides() {\n                        var $element = this.getElement(),\n                            borderWidth = 1, // this mirror the $lrBorderWidth css variable\n                            borderOffset = borderWidth * 2;\n\n                        $element.append(visualGuides.$maskBg);\n                        $element.append(visualGuides.$innerWindow);\n\n                        visualGuides.$maskBg.css({\n                            width:  dimensions.outerWidth - borderOffset,\n                            height: dimensions.outerHeight - borderOffset,\n                            'border-top-width':     dimensions.topHeight - borderOffset,\n                            'border-right-width':   dimensions.rightWidth - borderOffset,\n                            'border-bottom-width':  dimensions.bottomHeight - borderOffset,\n                            'border-left-width':    dimensions.leftWidth - borderOffset\n                        });\n\n                        visualGuides.$innerWindow.css({\n                            width:  dimensions.innerWidth,\n                            height: dimensions.innerHeight,\n                            left:   dimensions.leftWidth - borderOffset,\n                            top:    dimensions.topHeight - borderOffset\n                        });\n                    },\n\n                    removeVisualGuides: function removeVisualGuides() {\n                        visualGuides.$maskBg.remove();\n                        visualGuides.$innerWindow.remove();\n                    }\n                };\n\n            overlay = componentFactory(overlayAPI, overlayConfig);\n            makeDraggable(overlay);\n            makeStackable(overlay, stackingOptions);\n\n            return overlay\n                .on('render', function() {\n                    var self = this,\n                        $element = this.getElement();\n\n                    $element\n                        .addClass('line-reader-overlay ' + overlayConfig.id)\n                        .on('mousedown', function() {\n                            bringAllToFront();\n                            self.transformOverlay();\n                        })\n                        .on('mouseup', function() {\n                            self.restoreOverlay();\n                        });\n\n                    // uncomment this to see what's going on with overlays:\n                    // $element.css({ opacity: 0.5, 'background-color': 'yellow', border: '1px solid brown '});\n                })\n                .on('dragstart', function() {\n                    innerDrag.hide();\n                    closer.hide();\n                    invokeOnMasks('hide');\n                    this.appendVisualGuides();\n                })\n                .on('dragmove', function moveAllPartsTogether(xOffsetRelative, yOffsetRelative) {\n                    // update the transform model\n                    position.outerX += xOffsetRelative;\n                    position.outerY += yOffsetRelative;\n                    position.innerX += xOffsetRelative;\n                    position.innerY += yOffsetRelative;\n                })\n                .on('dragend', function() {\n                    this.removeVisualGuides();\n                    // although they are already display, calling show() again on the overlays\n                    // will force their z-Index at the top of the stack\n                    invokeOnAll('show');\n                    innerDrag.show();\n                    closer.show();\n\n                    // apply the new transform model\n                    applyTransforms();\n                })\n                .init();\n        }\n\n\n        /**\n         * ==========================\n         * Inner Drag Handle & Closer\n         * ==========================\n         */\n\n        /**\n         * This handle allows to drag the inner window\n         */\n        function createInnerDragHandle() {\n            // uncomment this (and a few lines below) if debugging is needed:\n            // var $boundingBox = $('<div>').css({ position: 'fixed', 'box-sizing': 'border-box', border: '1px solid red' });\n\n            innerDrag = componentFactory();\n\n            makeStackable(innerDrag, stackingOptions);\n            makeDraggable(innerDrag, {\n                dragRestriction: function dragRestriction() {\n                    var fixedXY = allParts.nw.mask.getElement().offset(),\n                        rect;\n\n                    rect = {\n                        x: fixedXY.left + constrains.minWidth,\n                        y: fixedXY.top + (constrains.minHeight + dimensions.innerHeight + options.resizeHandleSize),\n                        width: dimensions.outerWidth - (constrains.minWidth * 2 ),\n                        height: dimensions.outerHeight -\n                            (dimensions.innerHeight + constrains.minHeight + constrains.minBottomHeight - options.innerDragHeight)\n                    };\n\n                    // uncomment to see what's going on:\n                    // allParts.ne.mask.getContainer().append($boundingBox);\n                    // $boundingBox.css({ width: rect.width, height: rect.height, top: rect.y, left: rect.x });\n\n                    return rect;\n                }\n            })\n                .on('render', function() {\n                    var $element = this.getElement(),\n                        $dragIcon = $('<div>', {\n                            'class': 'icon icon-move'\n                        });\n\n                    $element.addClass('line-reader-inner-drag');\n                    $element.append($dragIcon);\n                    $element.on('mousedown', function(e) {\n                        e.stopPropagation();\n                        bringAllToFront();\n                    });\n                })\n                .on('dragstart', function() {\n                    closer.hide();\n                    invokeOnOverlays('hide');\n                    invokeOnMasks('setState', ['resizing', true]);\n                })\n                .on('dragmove', function(xOffsetRelative, yOffsetRelative) {\n                    position.innerX += xOffsetRelative;\n                    position.innerY += yOffsetRelative;\n\n                    dimensions.leftWidth += xOffsetRelative;\n                    dimensions.topHeight += yOffsetRelative;\n\n                    dimensions.rightWidth   -= xOffsetRelative;\n                    dimensions.bottomHeight -= yOffsetRelative;\n\n                    applyTransformsToMasks();\n                })\n                .on('dragend', function() {\n                    invokeOnOverlays('show');\n                    innerDrag.bringToFront();\n                    closer.show();\n                    invokeOnMasks('setState', ['resizing', false]);\n\n                    applyTransformsToOverlays();\n                })\n                .init();\n        }\n\n        /**\n         * Close button for the compound mask\n         */\n        function createCloser() {\n            closer = componentFactory();\n\n            makeStackable(closer, stackingOptions);\n            makePlaceable(closer)\n                .on('render', function() {\n                    var self = this,\n                        $element = this.getElement(),\n                        $closeIcon = $('<div>', {\n                            'class': 'icon icon-result-nok'\n                        });\n\n                    $element.append($closeIcon);\n                    $element.addClass('line-reader-closer');\n\n                    $element.on('mousedown', function() {\n                        bringAllToFront();\n                    });\n\n                    $element.on('click', function(e) {\n                        e.stopPropagation();\n                        self.trigger('click');\n                    });\n                })\n                .init();\n        }\n\n        /**\n         * =================\n         * Utility functions\n         * =================\n         */\n        function bringAllToFront() {\n            invokeOnAll('bringToFront');\n            innerDrag.bringToFront();\n            closer.bringToFront();\n        }\n\n        function invokeOnAll(fn, args) {\n            invokeOnMasks(fn, args);\n            invokeOnOverlays(fn, args);\n        }\n\n        function invokeOnMasks(fn, args) {\n            invokeOn('mask', fn, args);\n        }\n\n        function invokeOnOverlays(fn, args) {\n            invokeOn('overlay', fn, args);\n        }\n\n        /**\n         * Invoke a method on all compound mask parts, whether mask or overlays\n         * @param {String} target - mask | overlay\n         * @param {String} fn - the name of the method to invoke\n         * @param {*[]} args - arguments passed on invoke\n         */\n        function invokeOn(target, fn, args) {\n            _.forOwn(allParts, function(part) {\n                if (_.isObject(part[target]) && _.isFunction(part[target][fn])) {\n                    part[target][fn].apply(part[target], args);\n                }\n            });\n        }\n\n        /**\n         * =================================\n         * Transform model related functions\n         * =================================\n         */\n\n        function applyTransforms() {\n            applyTransformsToMasks();\n            applyTransformsToOverlays();\n            applyTransformsToInnerDrag();\n            applyTransformsToCloser();\n        }\n\n        function applyTransformsToMasks() {\n            invokeOnMasks('place');\n        }\n\n        function applyTransformsToOverlays() {\n            _.forOwn(allParts, function(part) {\n                part.mask.placeOverlay(part.overlay);\n            });\n        }\n\n        function applyTransformsToInnerDrag() {\n            if (innerDrag) {\n                innerDrag\n                    .setSize(dimensions.innerWidth, options.innerDragHeight)\n                    .moveTo(\n                        position.innerX,\n                        position.innerY + dimensions.innerHeight + options.resizeHandleSize\n                    );\n            }\n        }\n\n        function applyTransformsToCloser() {\n            if (closer) {\n                closer\n                    .setSize(\n                        constrains.minWidth - options.resizeHandleSize,\n                        constrains.minHeight - options.resizeHandleSize\n                    )\n                    .moveTo(\n                        position.outerX + dimensions.outerWidth - constrains.minWidth + 3, // manual adjustment so it looks better\n                        position.outerY + options.resizeHandleSize\n                    );\n            }\n        }\n\n        /**\n         * Check that the given transform model respect the current constrains.\n         * If not, correct them\n         */\n        function correctTransforms() {\n            if (dimensions.topHeight < constrains.minHeight) {\n                dimensions.topHeight = constrains.minHeight;\n                position.innerY = position.outerY + constrains.minHeight;\n            }\n            if (dimensions.innerHeight < constrains.minHeight) {\n                dimensions.innerHeight = constrains.minHeight;\n            }\n            if (dimensions.bottomHeight < constrains.minBottomHeight) {\n                dimensions.bottomHeight = constrains.minBottomHeight;\n            }\n            dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + dimensions.bottomHeight;\n\n            if (dimensions.leftWidth < constrains.minWidth) {\n                dimensions.leftWidth = constrains.minWidth;\n                position.innerX = position.outerX + constrains.minWidth;\n            }\n            if (dimensions.innerWidth < constrains.minWidth) {\n                dimensions.innerWidth = constrains.minWidth;\n            }\n            if (dimensions.rightWidth < constrains.minWidth) {\n                dimensions.rightWidth = constrains.minWidth;\n            }\n            dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + dimensions.rightWidth;\n        }\n\n        /**\n         * Update the transform model during a resize affecting the top height\n         * @param {Number} newHeight\n         * @param {Number} newY\n         * @param {Boolean} fromTop - if the resize occurs from the top\n         */\n        function setTopHeight(newHeight, newY, fromTop) {\n            dimensions.topHeight = newHeight;\n\n            if (fromTop) {\n                dimensions.outerHeight = newHeight + dimensions.innerHeight + dimensions.bottomHeight;\n                position.outerY = newY;\n            } else {\n                dimensions.innerHeight = dimensions.outerHeight - newHeight - dimensions.bottomHeight;\n                position.innerY = position.outerY + newHeight;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the right width\n         * @param {Number} newWidth\n         * @param {Number} newX\n         * @param {Boolean} fromLeft - if the resize occurs from the left\n         */\n        function setRightWidth(newWidth, newX, fromLeft) {\n            dimensions.rightWidth = newWidth;\n\n            if (fromLeft) {\n                dimensions.innerWidth = newX - position.innerX;\n            } else {\n                dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + newWidth;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the bottom height\n         * @param {Number} newHeight\n         * @param {Number} newY\n         * @param {Boolean} fromTop - if the resize occurs from the top\n         */\n        function setBottomHeight(newHeight, newY, fromTop) {\n            dimensions.bottomHeight = newHeight;\n\n            if (fromTop) {\n                dimensions.innerHeight = newY - position.innerY;\n                dimensions.bottomHeight = newHeight;\n            } else {\n                dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + newHeight;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the left width\n         * @param {Number} newWidth\n         * @param {Number} newX\n         * @param {Boolean} fromLeft - if the resize occurs from the left\n         */\n        function setLeftWidth(newWidth, newX, fromLeft) {\n            dimensions.leftWidth = newWidth;\n\n            if (fromLeft) {\n                dimensions.outerWidth = newWidth + dimensions.innerWidth + dimensions.rightWidth;\n                position.outerX = newX;\n            } else {\n                dimensions.innerWidth = dimensions.outerWidth - newWidth - dimensions.rightWidth;\n                position.innerX = position.outerX + newWidth;\n            }\n        }\n\n\n        /**\n         * ======================================\n         * Mask parts and other elements creation\n         * ======================================\n         */\n\n        function createCompoundMask() {\n\n            // North\n            createPart({\n                id: 'n',\n                edges: { top: true, right: false, bottom: true, left: false },\n\n                // move and dimension the mask\n                place: function place() {\n                    this.moveTo(\n                        position.innerX,\n                        position.outerY\n                    ).setSize(\n                        dimensions.innerWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                // move and dimension the overlay\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                // set a resize limit whenever resize happens on an inner edge (here, the top inner edge, eg. the bottom of the mask),\n                // so the min/max width/height limit for \"inner component\" is respected\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n                    this.config.maxHeight = (fromTop)\n                        ? null\n                        : dimensions.topHeight + (dimensions.innerHeight - constrains.minHeight);\n                },\n\n                // set the new transform values (dimension and position) resulting from the current mask resize, and apply them\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // North-east\n            createPart({\n                id: 'ne',\n                edges: { top: true, right: true, bottom: false, left: false },\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.outerY\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    setRightWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // East\n            createPart({\n                id: 'e',\n                edges: { top: false, right: true, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.innerY\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.innerHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y - options.resizeHandleSize\n                    ).setSize(\n                        size.width - (options.resizeHandleSize * 2),\n                        size.height + (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft) {\n                    this.config.maxWidth = (fromLeft)\n                        ? dimensions.rightWidth + (dimensions.innerWidth - constrains.minWidth)\n                        : null;\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\n                    setRightWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South east\n            createPart({\n                id: 'se',\n                edges: { top: false, right: true, bottom: true, left: false },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setRightWidth(width, x, fromLeft);\n                    setBottomHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South\n            createPart({\n                id: 's',\n                edges: { top: true, right: false, bottom: true, left: false },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX ,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.innerWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n                    this.config.maxHeight = (fromTop)\n                        ? dimensions.bottomHeight + (dimensions.innerHeight - constrains.minHeight)\n                        : null;\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setBottomHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South-west\n            createPart({\n                id: 'sw',\n                edges: { top: false, right: false, bottom: true, left: true },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setBottomHeight(height, y, fromTop);\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // West\n            createPart({\n                id: 'w',\n                edges: { top: false, right: true, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.innerY\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.innerHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y - options.resizeHandleSize\n                    ).setSize(\n                        size.width - (options.resizeHandleSize * 2),\n                        size.height + (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft) {\n                    this.config.maxWidth = (fromLeft)\n                        ? null\n                        : dimensions.leftWidth + (dimensions.innerWidth - constrains.minWidth);\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // North-west\n            createPart({\n                id: 'nw',\n                edges: { top: true, right: false, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.outerY\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n        }\n\n        function createPart(partConfig) {\n            allParts[partConfig.id] = {\n                mask: createMask(_.assign({}, constrains, partConfig)),\n                overlay: createOverlay(partConfig)\n            };\n        }\n\n\n        function createVisualGuides() {\n            visualGuides.$maskBg = $('<div>', {\n                'class': 'mask-bg'\n            });\n            visualGuides.$innerWindow = $('<div>', {\n                'class': 'inner-window'\n            });\n        }\n\n\n        /**\n         * =========================\n         * The compoundMask instance\n         * =========================\n         */\n\n        dimensions  = _.defaults(dimensions || {}, defaultDimensions);\n        position    = _.defaults(position   || {}, defaultPosition);\n        options     = _.defaults(options    || {}, defaultOptions);\n\n        constrains = {\n            minWidth:           (options.resizeHandleSize * 2) + options.dragMinWidth,\n            minHeight:          (options.resizeHandleSize * 2) + options.dragMinHeight,\n            minBottomHeight:    (options.resizeHandleSize * 2) + options.innerDragHeight\n        };\n\n        compoundMask = {\n            init: function init() {\n                var self = this;\n\n                this.setTransforms(dimensions, position);\n\n                createCompoundMask();\n                createVisualGuides();\n                createInnerDragHandle();\n                createCloser();\n\n                closer.on('click', function() {\n                    self.hide();\n                    self.trigger('close');\n                });\n\n                return this;\n            },\n\n            render: function render($container) {\n                invokeOnAll('render', [$container]);\n                innerDrag.render($container);\n                closer.render($container);\n                applyTransforms();\n                return this;\n            },\n\n            destroy: function destroy() {\n                invokeOnAll('destroy');\n                visualGuides = null;\n                innerDrag = null;\n                closer = null;\n                return this;\n            },\n\n            show: function show() {\n                invokeOnAll('show');\n                innerDrag.show();\n                closer.show();\n                this.setState('hidden', false);\n                return this;\n            },\n\n            hide: function hide() {\n                invokeOnAll('hide');\n                innerDrag.hide();\n                closer.hide();\n                this.setState('hidden', true);\n                return this;\n            },\n\n            /**\n             * Allow updating the transform model\n             * @param {Object} dim\n             * @param {Number} dim.outerWidth - overall mask width\n             * @param {Number} dim.outerHeight - overall mask height\n             * @param {Number} dim.innerWidth - inner window width\n             * @param {Number} dim.innerHeight - inner window height\n             * @param {Number} pos\n             * @param {Number} pos.outerX - overall mask x\n             * @param {Number} pos.outerY - overall mask y\n             * @param {Number} pos.innerX - inner window x\n             * @param {Number} pos.innerY - inner window y\n             */\n            setTransforms: function setTransforms(dim, pos) {\n                dimensions  = _.defaults(dim || {}, dimensions);\n                position    = _.defaults(pos || {}, position);\n\n                // automatically complete the dimensions\n                dimensions.topHeight    = pos.innerY - pos.outerY;\n                dimensions.rightWidth   = dim.outerWidth - (pos.innerX - pos.outerX) - dim.innerWidth;\n                dimensions.bottomHeight = dim.outerHeight - (pos.innerY - pos.outerY) - dim.innerHeight;\n                dimensions.leftWidth    = pos.innerX - pos.outerX;\n\n                correctTransforms();\n                applyTransforms();\n            },\n\n            getDimensions: function getDimensions() {\n                return dimensions;\n            },\n\n            getPosition: function getPosition() {\n                return position;\n            },\n\n            getParts: function getParts() {\n                return allParts;\n            }\n        };\n\n        statifier(compoundMask);\n        eventifier(compoundMask);\n\n        return compoundMask;\n    };\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Line Reader\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/lineReader/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/lineReader/compoundMask'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, compoundMaskFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'line-reader';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Options for the compoundMask factory\n     * @type {Object}\n     */\n    var maskOptions = {\n        dragMinWidth: 7,\n        dragMinHeight: 7,\n        resizeHandleSize: 7,\n        innerDragHeight: 20\n    };\n\n    var dimensions,\n        position;\n\n    /**\n     * These functions are a first effort to place the mask on the first line on the item\n     * They make a lot of assumptions:\n     * - the item starts with a text\n     * - the padding is set on the .qti-item container\n     * - the padding is consistent with the minWidth/minHeight configuration of the mask\n     * - and some other...\n     * @param {jQuery} $container - where the mask is appended\n     */\n    function getDimensions($container) {\n        var $qtiContent = $container.find('#qti-content'),\n            $qtiItem = $qtiContent.find('.qti-item'),\n\n            lineHeight = Math.ceil(parseFloat($qtiContent.css('line-height'))) || 20; // reasonable default line height\n\n        return {\n            outerWidth:     $qtiItem.width() + (maskOptions.resizeHandleSize * 4) + (maskOptions.dragMinWidth * 2),\n            outerHeight:    175, // reasonable default height\n            innerWidth:     $qtiItem.width(),\n            innerHeight:    lineHeight\n        };\n    }\n    function getPosition($container) {\n        var $qtiContent = $container.find('#qti-content'),\n            $qtiItem = $qtiContent.find('.qti-item'),\n\n            itemPosition = $qtiItem.position() || {},\n\n            paddingLeft = parseInt($qtiItem.css('padding-left'), 10),\n            paddingTop = parseInt($qtiItem.css('padding-top'), 10),\n\n            textPadding = 3, // this is to let the text breathe a bit\n\n            innerX = parseInt(itemPosition.left, 10) + paddingLeft - textPadding,\n            innerY = parseInt(itemPosition.top, 10) + paddingTop - textPadding;\n\n        return {\n            outerX: innerX - (maskOptions.resizeHandleSize * 2) - maskOptions.dragMinWidth,\n            outerY: 0,\n            innerX: innerX,\n            innerY: innerY\n        };\n    }\n\n    function containerWidthHasChanged($container) {\n        var newDimensions = getDimensions($container);\n        return newDimensions.outerWidth !== dimensions.outerWidth;\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this,\n\n                testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\n                $container = testRunner.getAreaBroker().getContentArea().parent();\n\n            this.compoundMask = compoundMaskFactory(maskOptions)\n                .init()\n                .render($container)\n                .on('close', function() {\n                    closeMask();\n                })\n                .hide();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-lineReader\n                return !!options.lineReader;\n            }\n\n            function toggleButton() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function toggleMask() {\n                if (self.compoundMask.getState('hidden')) {\n                    if (containerWidthHasChanged($container)) {\n                        transformMask($container);\n                    }\n                    openMask();\n                } else {\n                    closeMask();\n                }\n            }\n\n            function openMask() {\n                self.compoundMask.show();\n                self.trigger('start');\n                self.button.turnOn();\n            }\n\n            function closeMask() {\n                if (! self.compoundMask.getState('hidden')) {\n                    self.compoundMask.hide();\n                }\n                self.trigger('end');\n                self.button.turnOff();\n            }\n\n            function transformMask($maskContainer) {\n                dimensions = getDimensions($maskContainer);\n                position = getPosition($maskContainer);\n                self.compoundMask.setTransforms(\n                    _.clone(dimensions),\n                    _.clone(position)\n                );\n            }\n\n            // create button\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Line Reader'),\n                icon: 'insert-horizontal-line',\n                control: 'line-reader',\n                text: __('Line Reader')\n            });\n\n            // attach user events\n            this.button\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger(actionPrefix + 'toggle');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger(actionPrefix + 'toggle');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', toggleButton)\n                .on('renderitem', function() {\n                    transformMask($container);\n                })\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    closeMask();\n                })\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        toggleMask();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.compoundMask.destroy();\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"magnifier\\\">\\n    <div class=\\\"level\\\">\";\n  if (helper = helpers.level) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.level); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n    <div class=\\\"overlay\\\"></div>\\n    <div class=\\\"inner\\\"></div>\\n    <div class=\\\"controls close\\\">\\n        <a href=\\\"#\\\" class=\\\"closeMagnifier\\\" data-control=\\\"closeMagnifier\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close Magnifier\", options) : helperMissing.call(depth0, \"__\", \"Close Magnifier\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\n    </div>\\n    <div class=\\\"controls zoom\\\">\\n        <a href=\\\"#\\\" class=\\\"control\\\"  data-control=\\\"zoomOut\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify less\", options) : helperMissing.call(depth0, \"__\", \"Magnify less\", options)))\n    + \"\\\"><span class=\\\"icon-remove\\\"></span></a>\\n        <a href=\\\"#\\\" class=\\\"control\\\" data-control=\\\"zoomIn\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify more\", options) : helperMissing.call(depth0, \"__\", \"Magnify more\", options)))\n    + \"\\\"><span class=\\\"icon-add\\\"></span></a>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel',[\n    'jquery',\n    'lodash',\n    'ui/movableComponent',\n    'tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\n], function ($, _, movableComponent, magnifierPanelTpl) {\n    'use strict';\n\n    /**\n     * The screen pixel ratio\n     * @type {Number}\n     */\n    var screenRatio = window.screen.width / window.screen.height;\n\n    /**\n     * Standard debounce delay for heavy process\n     * @type {Number}\n     */\n    var debounceDelay = 50;\n\n    /**\n     * Standard scrolling throttling for the scrolling\n     * It can be lower than the debounce delay as it is lighter in process and it improves the user experience\n     * @type {Number}\n     */\n    var scrollingDelay = 20;\n\n    /**\n     * The default base size\n     * @type {Number}\n     */\n    var defaultBaseSize = 116;\n\n    /**\n     * The minimum zoom level\n     * @type {Number}\n     */\n    var defaultLevelMin = 2;\n\n    /**\n     * The maximum zoom level\n     * @type {Number}\n     */\n    var defaultLevelMax = 8;\n\n    /**\n     * The default zoom level\n     * @type {Number}\n     */\n    var defaultLevel = defaultLevelMin;\n\n    /**\n     * Some default values\n     * @type {Object}\n     */\n    var defaultConfig = {\n        level: defaultLevel,\n        levelMin: defaultLevelMin,\n        levelMax: defaultLevelMax,\n        levelStep: .5,\n        baseSize: defaultBaseSize,\n        width: defaultBaseSize * defaultLevel,\n        height: defaultBaseSize * defaultLevel / screenRatio,\n        minWidth: defaultBaseSize * defaultLevelMin,\n        minHeight: defaultBaseSize * defaultLevelMin / screenRatio,\n        maxRatio: .5,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Creates a magnifier panel component\n     * @param {Object} config\n     * @param {Number} [config.level] - The default zoom level\n     * @param {Number} [config.levelMin] - The minimum allowed zoom level\n     * @param {Number} [config.levelMax] - The maximum allowed zoom level\n     * @param {Number} [config.levelStep] - The level increment applied when using the controls + and -\n     * @param {Number} [config.baseSize] - The base size used to assign the width and the height according to the zoom level\n     * @param {Number} [config.maxRatio] - The ratio for the maximum size regarding the size of the window\n     * @returns {magnifierPanel} the component (initialized)\n     */\n    function magnifierPanelFactory(config) {\n        var initConfig = _.defaults(config || {}, defaultConfig);\n        var zoomLevelMin = parseFloat(initConfig.levelMin);\n        var zoomLevelMax = parseFloat(initConfig.levelMax);\n        var zoomLevelStep = parseFloat(initConfig.levelStep);\n        var zoomLevel = adjustZoomLevel(initConfig.level);\n        var maxRatio = parseFloat(initConfig.maxRatio);\n        var baseSize = parseInt(initConfig.baseSize, 10);\n        var zoomSize = baseSize * zoomLevel;\n        var $initTarget = null;\n        var controls = null;\n        var observer = null;\n        var targetWidth, targetHeight, dx, dy;\n        var scrolling = [];\n\n        /**\n         * @typedef {Object} magnifierPanel\n         */\n        var magnifierPanel = movableComponent({\n            /**\n             * Gets the current zoom level\n             * @returns {Number}\n             */\n            getZoomLevel: function getZoomLevel() {\n                return zoomLevel;\n            },\n\n            /**\n             * Gets the targeted content the magnifier will zoom\n             * @returns {jQuery}\n             */\n            getTarget: function getTarget() {\n                return controls && controls.$target;\n            },\n\n            /**\n             * Sets the targeted content the magnifier will zoom\n             * @param {jQuery} $newTarget\n             * @returns {magnifierPanel}\n             * @fires targetchange\n             * @fires update\n             */\n            setTarget: function setTarget($newTarget) {\n                if (controls) {\n                    controls.$target = $newTarget;\n                    controls.$viewTarget = null;\n\n                    setScrollingListener();\n\n                    /**\n                     * @event magnifierPanel#targetchange\n                     * @param {jQuery} $target\n                     */\n                    this.trigger('targetchange', controls.$target);\n\n                    this.update();\n                } else {\n                    $initTarget = $newTarget;\n                }\n\n                return this;\n            },\n\n            /**\n             * Sets the zoom level of the magnifier\n             * @param {Number} level\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomTo: function zoomTo(level) {\n                if (level && _.isFinite(level)) {\n                    zoomLevel = adjustZoomLevel(level);\n                }\n\n                applyZoomLevel();\n                showZoomLevel();\n                updateMaxSize();\n                updateZoom();\n\n                /**\n                 * @event magnifierPanel#zoom\n                 * @param {Number} zoomLevel\n                 */\n                this.trigger('zoom', zoomLevel);\n\n                return this;\n            },\n\n            /**\n             * Increments the zoom level of the magnifier\n             * @param {Number} step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomBy: function zoomBy(step) {\n                if (step && _.isFinite(step)) {\n                    this.zoomTo(zoomLevel + parseFloat(step));\n                }\n                return this;\n            },\n\n            /**\n             * Zoom-in using the configured level step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomIn: function zoomIn() {\n                return this.zoomBy(zoomLevelStep);\n            },\n\n            /**\n             * Zoom-out using the configured level step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomOut: function zoomOut() {\n                return this.zoomBy(-zoomLevelStep);\n            },\n\n            /**\n             * Places the magnifier sight at a particular position on the target content\n             * @param {Number} x\n             * @param {Number} y\n             * @returns {magnifierPanel}\n             */\n            zoomAt: function zoomAt(x, y) {\n                var position;\n                if (controls) {\n                    position = this.translate(x, y);\n                    controls.$inner.css({\n                        top: -position.top,\n                        left: -position.left\n                    });\n                }\n            },\n\n            /**\n             * Translates screen coordinates to zoom coordinates\n             * @param {Number} x\n             * @param {Number} y\n             * @returns {Object}\n             */\n            translate: function translate(x, y) {\n                return {\n                    top: translateMagnifier(y, targetHeight, this.config.height),\n                    left: translateMagnifier(x, targetWidth, this.config.width)\n                };\n            },\n\n            /**\n             * Updates the magnifier with the target content\n             * @returns {magnifierPanel}\n             * @fires update\n             */\n            update: function update() {\n                if (controls && controls.$target) {\n                    controls.$clone = controls.$target.clone().removeAttr('id');\n                    controls.$clone.find('iframe').remove();\n                    controls.$clone.find('[name],[id],[data-serial]').removeAttr('name id data-serial');\n                    controls.$inner.empty().append(controls.$clone);\n\n                    applySize();\n                    applyZoomLevel();\n                    updateZoom();\n                    updateMaxSize();\n                    applyScrolling();\n\n                    /**\n                     * @event magnifierPanel#update\n                     */\n                    this.trigger('update');\n                }\n\n                return this;\n            }\n        }, defaultConfig);\n\n        /**\n         * Will update the magnifier content with the actual content\n         * @type {Function}\n         */\n        var updateMagnifier = _.debounce(_.bind(magnifierPanel.update, magnifierPanel), debounceDelay);\n\n        /**\n         * Will update the magnifier content with the scrolling position\n         * @type {Function}\n         */\n        var scrollingListenerCallback = _.throttle(function (event) {\n\n            var $target = $(event.target);\n            var scrollingTop = event.target.scrollTop;\n            var scrollLeft = event.target.scrollLeft;\n            var scrollId, scrollData;\n\n            //check if the element is already known as a scrollable element\n            if (controls && controls.$clone && $target.data('magnifier-scroll')) {\n\n                scrollId = $target.data('magnifier-scroll');\n                scrollData = _.find(scrolling, {id: scrollId});\n                scrollData.scrollTop = scrollingTop;\n                scrollData.scrollLeft = scrollLeft;\n\n                //if in clone, scroll it\n                scrollInClone(scrollData);\n\n            } else {\n                //if the element is not yet identified as a scrollable element, tag it and register its id\n                scrollId = _.uniqueId('scrolling_');\n                $target.attr('data-magnifier-scroll', scrollId);\n                scrolling.push({\n                    id: scrollId,\n                    scrollTop: scrollingTop,\n                    scrollLeft: scrollLeft\n                });\n\n                //update all\n                magnifierPanel.update();\n            }\n\n        }, scrollingDelay);\n\n        /**\n         * Scroll an element in the clone\n         *\n         * @param {Object} scrollData\n         * @param {String} scrollData.id\n         * @param {Number} [scrollData.scrollTop]\n         * @param {Number} [scrollData.scrollLeft]\n         */\n        function scrollInClone(scrollData) {\n            var $clonedTarget;\n            if (controls && controls.$clone && scrollData && scrollData.id) {\n                $clonedTarget = controls.$clone.find('[data-magnifier-scroll=' + scrollData.id + ']');\n                if ($clonedTarget.length) {\n                    if (_.isNumber(scrollData.scrollTop)) {\n                        $clonedTarget[0].scrollTop = scrollData.scrollTop;\n                    }\n                    if (_.isNumber(scrollData.scrollLeft)) {\n                        $clonedTarget[0].scrollLeft = scrollData.scrollLeft;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Initializes the listener for scrolling event and transfer the scrolling\n         */\n        function setScrollingListener() {\n            window.addEventListener('scroll', scrollingListenerCallback, true);\n        }\n\n        /**\n         * Stops the listener for scrolling event\n         */\n        function removeScrollingListener() {\n            window.removeEventListener('scroll', scrollingListenerCallback, true);\n        }\n\n        /**\n         * Applies scrolling programmatically from the recorded list of elements to be scrolled\n         */\n        function applyScrolling() {\n            _.forEach(scrolling, scrollInClone);\n        }\n\n        /**\n         * Adjusts a provided zoom level to fit the constraints\n         * @param {Number|String} level\n         * @returns {Number}\n         */\n        function adjustZoomLevel(level) {\n            return Math.max(zoomLevelMin, Math.min(parseFloat(level), zoomLevelMax));\n        }\n\n        /**\n         * Applies the zoom level to the content\n         */\n        function applyZoomLevel() {\n            if (controls) {\n                controls.$inner.css({\n                    transform: 'scale(' + zoomLevel + ')'\n                });\n            }\n        }\n\n        /**\n         * Shows the zoom level using a CSS animation\n         */\n        function showZoomLevel() {\n            var $newZoomLevel;\n            if (controls) {\n                $newZoomLevel = controls.$zoomLevel.clone(true).html(zoomLevel);\n                controls.$zoomLevel.before($newZoomLevel).remove();\n                controls.$zoomLevel = $newZoomLevel;\n            }\n        }\n\n        /**\n         * Updates the max size according to the window's size\n         */\n        function updateMaxSize() {\n            var $window = $(window);\n            magnifierPanel.config.maxWidth = $window.width() * maxRatio;\n            magnifierPanel.config.maxHeight = $window.height() * maxRatio;\n        }\n\n        /**\n         * Forwards the size of the target to the cloned content\n         */\n        function applySize() {\n            if (controls && controls.$clone) {\n                targetWidth = controls.$target.width();\n                targetHeight = controls.$target.height();\n\n                controls.$clone\n                    .width(targetWidth)\n                    .height(targetHeight);\n            }\n        }\n\n        /**\n         * Place the zoom sight at the right place inside the magnifier\n         */\n        function updateZoom() {\n            var position;\n            if (controls && controls.$target) {\n                position = magnifierPanel.getPosition();\n\n                position.x += dx + controls.$target.scrollLeft();\n                position.y += dy + controls.$target.scrollTop();\n\n                magnifierPanel.zoomAt(position.x, position.y);\n            }\n        }\n\n        /**\n         * Creates the observer that will react to DOM changes to update the magnifier\n         */\n        function createObserver() {\n            observer = new window.MutationObserver(updateMagnifier);\n        }\n\n        /**\n         * Starts to observe the DOM of the magnifier target\n         */\n        function startObserver() {\n            if (controls && controls.$target) {\n                observer.observe(controls.$target.get(0), {\n                    childList: true,        // Set to true if additions and removals of the target node's child elements (including text nodes) are to be observed.\n                    attributes: true,       // Set to true if mutations to target's attributes are to be observed.\n                    characterData: true,    // Set to true if mutations to target's data are to be observed.\n                    subtree: true           // Set to true if mutations to target and target's descendants are to be observed.\n                });\n            }\n            setScrollingListener();\n        }\n\n        /**\n         * Stops to observe the DOM of the magnifier target\n         */\n        function stopObserver() {\n            observer.disconnect();\n            removeScrollingListener();\n        }\n\n        /**\n         * Translates a screen coordinate into the magnifier\n         * @param {Number} coordinate\n         * @param {Number} actualSize\n         * @param {Number} magnifierSize\n         * @returns {Number}\n         */\n        function translateMagnifier(coordinate, actualSize, magnifierSize) {\n            var delta = 0;\n            var ratio = zoomLevel;\n\n            if (actualSize) {\n                delta = ((actualSize * (zoomLevel - 1)) / 2);\n                ratio = (actualSize * zoomLevel - magnifierSize) / (actualSize - magnifierSize);\n            }\n\n            return coordinate * ratio - delta;\n        }\n\n        /**\n         * Gets the top element from a particular absolute point.\n         * @param {Number} x - the page X-coordinate of the point\n         * @param {Number} y - the page Y-coordinate of the point\n         * @returns {HTMLElement}\n         */\n        function getElementFromPoint(x, y) {\n            var el;\n\n            if (controls) {\n                controls.$overlay.addClass('hidden');\n            }\n\n            el = document.elementFromPoint(x, y);\n\n            if (controls) {\n                controls.$overlay.removeClass('hidden');\n            }\n\n            return el;\n        }\n\n        /**\n         * Find the related node in the target. The both trees must have the same content.\n         * @param {jQuery|HTMLElement} node - the node for which find a relation\n         * @param {jQuery|HTMLElement} root - the root of the tree that contains the actual node\n         * @param {jQuery|HTMLElement} target - the root of the tree that could contains the related node\n         * @returns {jQuery}\n         */\n        function findSourceNode(node, root, target) {\n            var $node = $(node);\n            var $root = $(root);\n            var $target = $(target);\n            var indexes = [$node.index()];\n\n            // compute map of node's parents indexes\n            $node.parents().each(function () {\n                var $this = $(this);\n                if (!$this.is($root)) {\n                    indexes.push($this.index());\n                } else {\n                    return false;\n                }\n            });\n\n            // the last index is related to the root, so ignore it\n            indexes.pop();\n\n            // now try to find the same node using the path provided by the indexes map\n            if (indexes.length) {\n                $node = $target;\n                _.forEachRight(indexes, function (index) {\n                    $node = $node.children().eq(index);\n                    if (!$node.length) {\n                        return false;\n                    }\n                });\n            } else {\n                // nothing to search for...\n                $node = $();\n            }\n            return $node;\n        }\n\n        initConfig.width = zoomSize;\n        initConfig.height = zoomSize / screenRatio;\n        initConfig.minWidth = baseSize * zoomLevelMin;\n        initConfig.minHeight = baseSize * zoomLevelMin / screenRatio;\n\n        magnifierPanel\n            .setTemplate(magnifierPanelTpl)\n            .on('render', function () {\n                var self = this;\n                var $component = this.getElement();\n\n                this.setState('hidden', true);\n\n                // compute the padding of the magnifier content\n                dx = ($component.outerWidth() - $component.width()) / 2;\n                dy = ($component.outerHeight() - $component.height()) / 2;\n\n                controls = {\n                    $target: $initTarget,\n                    $inner: $('.inner', $component),\n                    $zoomLevel: $('.level', $component),\n                    $overlay: $('.overlay', $component)\n                };\n                $initTarget = null;\n\n                // click on zoom-in or zoom-out controls\n                $component.on('click touchstart', '.zoom', function (event) {\n                    var $button = $(event.target).closest('.control');\n                    var action = $button.data('control');\n\n                    event.preventDefault();\n                    if (action && self[action]) {\n                        self[action]();\n                    }\n                });\n\n                // click on close controls\n                $component.on('click touchstart', '.closeMagnifier', function (event) {\n                    event.preventDefault();\n                    self.hide();\n                    self.trigger('close');\n                });\n\n                // interact through the magnifier glass with the zoomed content\n                $component.on('click touchstart', '.overlay', function (event) {\n                    if (!self.is('noclick')) {\n                        findSourceNode(\n                            getElementFromPoint(event.pageX, event.pageY),\n                            controls.$inner,\n                            controls.$target\n                        ).click().focus();\n                    } else {\n                        // was a 'dragend' click, just ignore\n                        self.setState('noclick', false);\n                    }\n                });\n\n                createObserver();\n                updateMaxSize();\n                applyZoomLevel();\n            })\n            .on('dragstart resizestart', function () {\n                // prevent the 'dragend' click to be understood as an actual click\n                this.setState('noclick', true);\n            })\n            .on('move resize', function () {\n                updateZoom();\n            })\n            .on('show', function () {\n                updateMagnifier();\n                startObserver();\n            })\n            .on('hide', function () {\n                stopObserver();\n            })\n            .on('resize', function () {\n                updateMaxSize();\n            })\n            .on('destroy', function () {\n                stopObserver();\n                $initTarget = null;\n                controls = null;\n                observer = null;\n            })\n            .init(initConfig);\n\n        return magnifierPanel;\n    }\n\n    return magnifierPanelFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifier',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, magnifierPanelFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'magnifier';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultOptions = {\n        zoomMin: 2,    // Smallest magnification factor\n        zoomMax: 8,    // Biggest magnification factor\n        zoomStep: .5   // Increment between min an max\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultOptions);\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var magnifierPanel = null;\n\n            /**\n             * Creates the magnifier panel on demand\n             * @returns {magnifierPanel}\n             * @fires plugin-magnifier-create.magnifier\n             */\n            function getMagnifierPanel() {\n                var $container;\n\n                if (!magnifierPanel) {\n                    $container = testRunner.getAreaBroker().getContainer();\n\n                    magnifierPanel = magnifierPanelFactory({\n                        levelMin: pluginConfig.zoomMin,\n                        levelMax: pluginConfig.zoomMax,\n                        levelStep: pluginConfig.zoomStep\n                    })\n                        .on('show', function () {\n                            /**\n                             * @event plugin-magnifier-show.magnifier\n                             */\n                            self.trigger('magnifier-show');\n                        })\n                        .on('hide', function () {\n                            /**\n                             * @event plugin-magnifier-hide.magnifier\n                             */\n                            self.trigger('magnifier-hide');\n                        })\n                        .on('zoom', function (level) {\n                            /**\n                             * @event plugin-magnifier-zoom.magnifier\n                             * @param {Number} zoomLevel\n                             */\n                            self.trigger('magnifier-zoom', level);\n                        })\n                        .on('close', function () {\n                            hideMagnifier();\n                        })\n                        .setTarget($container)\n                        .render($container.parent());\n\n                    /**\n                     * @event plugin-magnifier-create.magnifier\n                     */\n                    self.trigger('magnifier-create');\n                }\n                return magnifierPanel;\n            }\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-magnifier\n                return !!options.magnifier;\n            }\n\n            /**\n             * Shows/hides the plugin GUI according to context\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Shows/hides the magnifier\n             */\n            function toggleMagnifier() {\n                if (self.getState('enabled')) {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    } else {\n                        showMagnifier();\n                    }\n                }\n            }\n\n            /**\n             * Opens the magnifier panel\n             * @fires plugin-magnifier-show.magnifier\n             */\n            function showMagnifier() {\n                getMagnifierPanel();\n\n                if (magnifierPanel.is('hidden')) {\n                    magnifierPanel.show();\n                }\n                self.button.turnOn();\n                testRunner.trigger('plugin-open.' + pluginName);\n\n                self.setState('active', true);\n            }\n\n            /**\n             * Closes the magnifier panel\n             * @fires plugin-magnifier-hide.magnifier\n             */\n            function hideMagnifier() {\n                self.setState('active', false);\n\n                self.button.turnOff();\n                testRunner.trigger('plugin-close.' + pluginName);\n\n                if (magnifierPanel && !magnifierPanel.is('hidden')) {\n                    magnifierPanel.hide();\n                }\n            }\n\n            // build element\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control: 'magnify',\n                title: __('Displays a customisable magnifier'),\n                text: __('Magnifying Glass'),\n                icon: 'find'\n            });\n\n            // attach behavior\n            this.button.on('click', function (event) {\n                event.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n            // runner life cycle\n                .on('loaditem', function () {\n                    togglePlugin();\n                    self.disable();\n                })\n                .on('renderitem', function () {\n                    if (magnifierPanel) {\n                        magnifierPanel\n                            .update()\n                            .zoomTo(pluginConfig.zoomMin);\n                    }\n                })\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    }\n                    self.disable();\n                })\n                .on('destroy', function () {\n                    if (magnifierPanel) {\n                        magnifierPanel.destroy();\n                    }\n                    magnifierPanel = null;\n                })\n\n                // commands that controls the magnifier\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        toggleMagnifier();\n                    }\n                })\n                .on(actionPrefix + 'in', function () {\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n                        getMagnifierPanel().zoomIn();\n                    }\n                })\n                .on(actionPrefix + 'out', function () {\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n                        getMagnifierPanel().zoomOut();\n                    }\n                })\n                .on(actionPrefix + 'close', function () {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enables the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disables the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Shows the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hides the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author dieter <dieter@taotesting.com>\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\ndefine('taoQtiTest/runner/plugins/tools/zoom',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'ui/transformer',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, __, hider, transformer, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    /**\n     * The standard zoom level, in percentage\n     * @type {Number}\n     */\n    var standard = 100;\n\n    /**\n     * Zoom-In/Zoom-Out steps\n     * @type {Number}\n     */\n    var increment = 10;\n\n    /**\n     * The zoom boundaries, in percentage\n     * @type {Object}\n     */\n    var threshold = {\n        lower: 10,\n        upper: 200\n    };\n\n    /**\n     * Sets the zoom level\n     * @param {jQuery} $target\n     * @param {Number} level - Zoom percentage\n     */\n    var setZoomLevel = function($target, level) {\n        transformer.setTransformOrigin($target, '0 0');\n        transformer.scale($target, level / 100);\n    };\n\n    /**\n     * Restores the standard zoom level\n     * @param {jQuery} $target\n     */\n    var resetZoom = function($target) {\n        transformer.reset($target);\n    };\n\n    /**\n     * Forces a browser repaint\n     * Solution from http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes?answertab=votes#tab-top\n     * @param {jQuery} $target\n     */\n    var forceRepaint = function($target) {\n        var sel = $target[0];\n        if (sel) {\n            sel.style.display = 'none';\n            sel.offsetHeight; // no need to store this anywhere, the reference is enough\n            sel.style.display = '';\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'zoom',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            function zoomAction(dir) {\n\n                var inc = increment * dir;\n                var el, sx, sy, before, after, margin;\n\n                if (self.$zoomTarget) {\n                    el = self.$zoomTarget[0];\n\n                    before = el.getBoundingClientRect();\n\n                    sx = self.$container.scrollLeft();\n                    sy = self.$container.scrollTop();\n\n                    self.zoom = Math.max(threshold.lower, Math.min(threshold.upper, self.zoom + inc));\n\n                    if (self.zoom === standard) {\n                        resetZoom(self.$zoomTarget);\n                    } else {\n                        setZoomLevel(self.$zoomTarget, self.zoom);\n                    }\n\n                    // force a browser repaint to fix a scrollbar issue with WebKit\n                    forceRepaint(self.$zoomTarget);\n\n                    after = el.getBoundingClientRect();\n\n                    sx = Math.max(0, sx + (after.width - before.width) / 2);\n                    sy = Math.max(0, sy + (after.height - before.height) / 2);\n\n                    self.$container.scrollLeft(sx).scrollTop(sy);\n                }\n            }\n\n            function zoomIn() {\n                if (self.getState('enabled') !== false) {\n                    zoomAction(1);\n                }\n            }\n\n            function zoomOut() {\n                if (self.getState('enabled') !== false) {\n                    zoomAction(-1);\n                }\n            }\n\n            //build element (detached)\n            this.buttonZoomOut = this.getAreaBroker().getToolbox().createEntry({\n                control : 'zoomOut',\n                title : __('Zoom out'),\n                icon : 'remove'\n            });\n\n            this.buttonZoomIn = this.getAreaBroker().getToolbox().createEntry({\n                control : 'zoomIn',\n                title : __('Zoom in'),\n                icon : 'add'\n            });\n\n            //attach behavior\n            this.buttonZoomIn.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger('tool-zoomin');\n            });\n\n            //attach behavior\n            this.buttonZoomOut.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger('tool-zoomout');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.in) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.in, this.getName(), true), function () {\n                        testRunner.trigger('tool-zoomin');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n\n                if (pluginShortcuts.out) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.out, this.getName(), true), function () {\n                        testRunner.trigger('tool-zoomout');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            this.show();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function (){\n                    self.zoom = standard;\n\n                    self.show();\n                    self.disable();\n                })\n                .on('renderitem', function (){\n                    self.$container = $('#qti-content');\n                    self.$zoomTarget = $('.qti-item');\n\n                    self.enable();\n                })\n                .on('enabletools', function() {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                })\n                .on('tool-zoomin', zoomIn)\n                .on('tool-zoomout', zoomOut);\n        },\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + this.getName());\n        },\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.buttonZoomIn.enable();\n            this.buttonZoomOut.enable();\n        },\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.buttonZoomIn.disable();\n            this.buttonZoomOut.disable();\n        },\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.buttonZoomIn.show();\n            this.buttonZoomOut.show();\n        },\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.buttonZoomIn.hide();\n            this.buttonZoomOut.hide();\n        }\n    });\n});\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('.test-runner-scope .content-wrapper p.key-navigation-group,.test-runner-scope .content-wrapper div.key-navigation-group{padding:5px !important}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction){border-width:1px !important;border-style:solid;border-color:transparent}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).focusin{border-color:#0e5d91 !important;outline:none}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).qti-interaction .qti-choice.key-navigation-highlight{background:#e7eff4 !important}.test-runner-scope .content-wrapper span.key-navigation-group{border:none !important}.test-runner-scope .content-wrapper span.key-navigation-group.focusin{outline:solid #0e5d91 1px !important;outline-offset:1px}.test-runner-scope .test-sidebar .key-navigation-group.focusin{background:#e7eff4}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight .qti-navigator-tab{border-width:2px}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus{outline:none}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus .qti-navigator-tab{border-top-color:#222 !important;border-left-color:#222 !important;border-right-color:#222 !important}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight{padding-left:8px;border-left:solid 2px #222}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight .key-navigation-highlight:focus{outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group.focusin{-webkit-box-shadow:0 0 6px 2px #3e7da7;-moz-box-shadow:0 0 6px 2px #3e7da7;-ms-box-shadow:0 0 6px 2px #3e7da7;-o-box-shadow:0 0 6px 2px #3e7da7;box-shadow:0 0 6px 2px #3e7da7}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus{margin-bottom:0;border-bottom-color:#e7eff4 !important;outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus.active{border-bottom-color:transparent !important;background:#e7eff4 !important}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus:not(.active) .li-inner{color:#e7eff4}header .settings-menu .key-navigation-group{padding-right:5px}header .settings-menu .key-navigation-group.focusin{background-color:rgba(14,93,145,0.5);padding-bottom:10px}header .settings-menu .key-navigation-highlight:focus{height:54px;color:white !important;border-bottom:solid 2px white !important}\\n\\n/*# sourceMappingURL=key-navigation.css.map */');\n"]}